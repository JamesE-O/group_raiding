(undo-tree-save-format-version . 1)
"557cb6749300fa02ef98f7320df797a79128bd59"
[nil nil nil nil (25919 51469 115396 563000) 0 nil]
([nil nil ((58 . 63) (57 . 58) (50 . 57) (#("g" 0 1 (fontified t face py-def-face)) . -50) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) 51 (41 . 51) (#("    " 0 4 (fontified t)) . -41) (undo-tree-id417 . -4) (undo-tree-id418 . -4) 45 (41 . 45) (#("    " 0 4 (fontified nil)) . 40) (undo-tree-id419 . -4) (undo-tree-id420 . -4) (39 . 45) (38 . 39) (34 . 38) (#("i" 0 1 (fontified t face py-def-face)) . -34) (undo-tree-id421 . -1) (#("o" 0 1 (fontified t face py-def-face)) . -35) (undo-tree-id422 . -1) (#("n" 0 1 (fontified t face py-def-face)) . -36) (undo-tree-id423 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -37) (undo-tree-id424 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -38) (undo-tree-id425 . -1) 39 (21 . 39) (#("    " 0 4 (fontified t)) . -21) (undo-tree-id426 . -4) (undo-tree-id427 . -4) 25 (21 . 25) (#("    " 0 4 (fontified nil)) . 20) (undo-tree-id428 . -4) (undo-tree-id429 . -4) (19 . 25) (18 . 19) (16 . 18) (2 . 16) (1 . 2) (1 . 2) (nil rear-nonsticky nil 1438 . 1439) (nil fontified nil 1438 . 1439) (nil fontified nil 1428 . 1438) (nil fontified nil 1420 . 1428) (nil fontified nil 1419 . 1420) (nil fontified nil 1414 . 1419) (nil fontified nil 1406 . 1414) (nil fontified nil 1405 . 1406) (nil fontified nil 1404 . 1405) (nil fontified nil 1403 . 1404) (nil fontified nil 1397 . 1403) (nil fontified nil 1389 . 1397) (nil fontified nil 1388 . 1389) (nil fontified nil 1386 . 1388) (nil fontified nil 1378 . 1386) (nil fontified nil 1377 . 1378) (nil fontified nil 1369 . 1377) (nil fontified nil 1368 . 1369) (nil fontified nil 1360 . 1368) (nil fontified nil 1359 . 1360) (nil fontified nil 1358 . 1359) (nil fontified nil 1346 . 1358) (nil fontified nil 1345 . 1346) (nil fontified nil 1342 . 1345) (nil fontified nil 1334 . 1342) (nil fontified nil 1331 . 1334) (nil fontified nil 1329 . 1331) (nil fontified nil 1321 . 1329) (nil fontified nil 1320 . 1321) (nil fontified nil 1319 . 1320) (nil fontified nil 1314 . 1319) (nil fontified nil 1313 . 1314) (nil fontified nil 1310 . 1313) (nil fontified nil 1308 . 1310) (nil fontified nil 1302 . 1308) (nil fontified nil 1299 . 1302) (nil fontified nil 1291 . 1299) (nil fontified nil 1290 . 1291) (nil fontified nil 1289 . 1290) (nil fontified nil 1281 . 1289) (nil fontified nil 1280 . 1281) (nil fontified nil 1277 . 1280) (nil fontified nil 1269 . 1277) (nil fontified nil 1266 . 1269) (nil fontified nil 1260 . 1266) (nil fontified nil 1258 . 1260) (nil fontified nil 1257 . 1258) (nil fontified nil 1256 . 1257) (nil fontified nil 1252 . 1256) (nil fontified nil 1251 . 1252) (nil fontified nil 1248 . 1251) (nil fontified nil 1240 . 1248) (nil fontified nil 1237 . 1240) (nil fontified nil 1229 . 1237) (nil fontified nil 1228 . 1229) (nil fontified nil 1227 . 1228) (nil fontified nil 1221 . 1227) (nil fontified nil 1220 . 1221) (nil fontified nil 1217 . 1220) (nil fontified nil 1212 . 1217) (nil fontified nil 1209 . 1212) (nil fontified nil 1206 . 1209) (nil fontified nil 1198 . 1206) (nil fontified nil 1197 . 1198) (nil fontified nil 1196 . 1197) (nil fontified nil 1190 . 1196) (nil fontified nil 1189 . 1190) (nil fontified nil 1186 . 1189) (nil fontified nil 1178 . 1186) (nil fontified nil 1175 . 1178) (nil fontified nil 1172 . 1175) (nil fontified nil 1167 . 1172) (nil fontified nil 1166 . 1167) (nil fontified nil 1165 . 1166) (nil fontified nil 1160 . 1165) (nil fontified nil 1159 . 1160) (nil fontified nil 1156 . 1159) (nil fontified nil 1148 . 1156) (nil fontified nil 1145 . 1148) (nil fontified nil 1137 . 1145) (nil fontified nil 1136 . 1137) (nil fontified nil 1135 . 1136) (nil fontified nil 1130 . 1135) (nil fontified nil 1129 . 1130) (nil fontified nil 1126 . 1129) (nil fontified nil 1118 . 1126) (nil fontified nil 1115 . 1118) (nil fontified nil 1107 . 1115) (nil fontified nil 1106 . 1107) (nil fontified nil 1105 . 1106) (nil fontified nil 1099 . 1105) (nil fontified nil 1098 . 1099) (nil fontified nil 1084 . 1098) (nil fontified nil 1083 . 1084) (nil fontified nil 1076 . 1083) (nil fontified nil 1075 . 1076) (nil fontified nil 1074 . 1075) (nil fontified nil 1070 . 1074) (nil fontified nil 1053 . 1070) (nil fontified nil 1052 . 1053) (nil fontified nil 1051 . 1052) (nil fontified nil 1045 . 1051) (nil fontified nil 1043 . 1045) (nil fontified nil 1030 . 1043) (nil fontified nil 1028 . 1030) (nil fontified nil 1021 . 1028) (nil fontified nil 1018 . 1021) (nil fontified nil 1011 . 1018) (nil fontified nil 1010 . 1011) (nil fontified nil 1001 . 1010) (nil fontified nil 1000 . 1001) (nil fontified nil 999 . 1000) (nil fontified nil 998 . 999) (nil fontified nil 997 . 998) (nil fontified nil 993 . 997) (nil fontified nil 992 . 993) (nil fontified nil 984 . 992) (nil fontified nil 983 . 984) (nil fontified nil 982 . 983) (nil fontified nil 978 . 982) (nil fontified nil 961 . 978) (nil fontified nil 960 . 961) (nil fontified nil 959 . 960) (nil fontified nil 955 . 959) (nil fontified nil 952 . 955) (nil fontified nil 939 . 952) (nil fontified nil 937 . 939) (nil fontified nil 931 . 937) (nil fontified nil 925 . 931) (nil fontified nil 918 . 925) (nil fontified nil 917 . 918) (nil fontified nil 908 . 917) (nil fontified nil 907 . 908) (nil fontified nil 906 . 907) (nil fontified nil 905 . 906) (nil fontified nil 904 . 905) (nil fontified nil 896 . 904) (nil fontified nil 888 . 896) (nil fontified nil 887 . 888) (nil fontified nil 886 . 887) (nil fontified nil 882 . 886) (nil fontified nil 865 . 882) (nil fontified nil 864 . 865) (nil fontified nil 863 . 864) (nil fontified nil 859 . 863) (nil fontified nil 849 . 859) (nil fontified nil 845 . 849) (nil fontified nil 840 . 845) (nil fontified nil 836 . 840) (nil fontified nil 834 . 836) (nil fontified nil 824 . 834) (nil fontified nil 818 . 824) (nil fontified nil 817 . 818) (nil fontified nil 816 . 817) (nil fontified nil 807 . 816) (nil fontified nil 806 . 807) (nil fontified nil 805 . 806) (nil fontified nil 804 . 805) (nil fontified nil 803 . 804) (nil fontified nil 799 . 803) (nil fontified nil 791 . 799) (nil fontified nil 790 . 791) (nil fontified nil 789 . 790) (nil fontified nil 785 . 789) (nil fontified nil 768 . 785) (nil fontified nil 767 . 768) (nil fontified nil 766 . 767) (nil fontified nil 758 . 766) (nil fontified nil 745 . 758) (nil fontified nil 743 . 745) (nil fontified nil 736 . 743) (nil fontified nil 729 . 736) (nil fontified nil 728 . 729) (nil fontified nil 727 . 728) (nil fontified nil 719 . 727) (nil fontified nil 718 . 719) (nil fontified nil 717 . 718) (nil fontified nil 716 . 717) (nil fontified nil 714 . 716) (nil fontified nil 713 . 714) (nil fontified nil 711 . 713) (nil fontified nil 703 . 711) (nil fontified nil 702 . 703) (nil fontified nil 701 . 702) (nil fontified nil 698 . 701) (nil fontified nil 697 . 698) (nil fontified nil 680 . 697) (nil fontified nil 679 . 680) (nil fontified nil 678 . 679) (nil fontified nil 670 . 678) (nil fontified nil 657 . 670) (nil fontified nil 655 . 657) (nil fontified nil 650 . 655) (nil fontified nil 644 . 650) (nil fontified nil 637 . 644) (nil fontified nil 636 . 637) (nil fontified nil 633 . 636) (nil fontified nil 627 . 633) (nil fontified nil 626 . 627) (nil fontified nil 625 . 626) (nil fontified nil 624 . 625) (nil fontified nil 618 . 624) (nil fontified nil 610 . 618) (nil fontified nil 609 . 610) (nil fontified nil 608 . 609) (nil fontified nil 604 . 608) (nil fontified nil 587 . 604) (nil fontified nil 586 . 587) (nil fontified nil 585 . 586) (nil fontified nil 579 . 585) (nil fontified nil 566 . 579) (nil fontified nil 564 . 566) (nil fontified nil 556 . 564) (nil fontified nil 549 . 556) (nil fontified nil 548 . 549) (nil fontified nil 539 . 548) (nil fontified nil 538 . 539) (nil fontified nil 537 . 538) (nil fontified nil 536 . 537) (nil fontified nil 535 . 536) (nil fontified nil 529 . 535) (nil fontified nil 527 . 529) (nil fontified nil 521 . 527) (nil fontified nil 520 . 521) (nil fontified nil 519 . 520) (nil fontified nil 515 . 519) (nil fontified nil 498 . 515) (nil fontified nil 497 . 498) (nil fontified nil 496 . 497) (nil fontified nil 494 . 496) (nil fontified nil 487 . 494) (nil fontified nil 476 . 487) (nil fontified nil 474 . 476) (nil fontified nil 472 . 474) (nil fontified nil 465 . 472) (nil fontified nil 458 . 465) (nil fontified nil 457 . 458) (nil fontified nil 448 . 457) (nil fontified nil 447 . 448) (nil fontified nil 446 . 447) (nil fontified nil 445 . 446) (nil fontified nil 444 . 445) (nil fontified nil 439 . 444) (nil fontified nil 431 . 439) (nil fontified nil 430 . 431) (nil fontified nil 429 . 430) (nil fontified nil 425 . 429) (nil fontified nil 408 . 425) (nil fontified nil 407 . 408) (nil fontified nil 406 . 407) (nil fontified nil 397 . 406) (nil fontified nil 384 . 397) (nil fontified nil 382 . 384) (nil fontified nil 374 . 382) (nil fontified nil 367 . 374) (nil fontified nil 366 . 367) (nil fontified nil 357 . 366) (nil fontified nil 356 . 357) (nil fontified nil 355 . 356) (nil fontified nil 354 . 355) (nil fontified nil 348 . 354) (nil fontified nil 340 . 348) (nil fontified nil 339 . 340) (nil fontified nil 316 . 339) (nil fontified nil 308 . 316) (nil fontified nil 307 . 308) (nil fontified nil 306 . 307) (nil fontified nil 305 . 306) (nil fontified nil 299 . 305) (nil fontified nil 298 . 299) (nil fontified nil 291 . 298) (nil fontified nil 284 . 291) (nil fontified nil 283 . 284) (nil fontified nil 274 . 283) (nil fontified nil 268 . 274) (nil fontified nil 260 . 268) (nil fontified nil 259 . 260) (nil fontified nil 258 . 259) (nil fontified nil 257 . 258) (nil fontified nil 252 . 257) (nil fontified nil 244 . 252) (nil fontified nil 243 . 244) (nil fontified nil 242 . 243) (nil fontified nil 241 . 242) (nil fontified nil 235 . 241) (nil fontified nil 234 . 235) (nil fontified nil 226 . 234) (nil fontified nil 219 . 226) (nil fontified nil 218 . 219) (nil fontified nil 209 . 218) (nil fontified nil 203 . 209) (nil fontified nil 195 . 203) (nil fontified nil 194 . 195) (nil fontified nil 193 . 194) (nil fontified nil 187 . 193) (nil fontified nil 179 . 187) (nil fontified nil 178 . 179) (nil fontified nil 177 . 178) (nil fontified nil 176 . 177) (nil fontified nil 169 . 176) (nil fontified nil 168 . 169) (nil fontified nil 146 . 168) (nil fontified nil 145 . 146) (nil fontified nil 144 . 145) (nil fontified nil 143 . 144) (nil fontified nil 135 . 143) (nil fontified nil 134 . 135) (nil fontified nil 120 . 134) (nil fontified nil 112 . 120) (nil fontified nil 111 . 112) (nil fontified nil 110 . 111) (nil fontified nil 103 . 110) (nil fontified nil 96 . 103) (nil fontified nil 95 . 96) (nil fontified nil 88 . 95) (nil fontified nil 87 . 88) (nil fontified nil 86 . 87) (nil fontified nil 78 . 86) (nil fontified nil 70 . 78) (nil fontified nil 69 . 70) (nil fontified nil 68 . 69) (nil fontified nil 60 . 68) (nil fontified nil 53 . 60) (nil fontified nil 52 . 53) (nil fontified nil 45 . 52) (nil fontified nil 44 . 45) (nil fontified nil 43 . 44) (nil fontified nil 34 . 43) (nil fontified nil 26 . 34) (nil fontified nil 1 . 26) (1 . 1439) (#("f" 0 1 (fontified t)) . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (#("r" 0 1 (fontified t)) . -2) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (#("o" 0 1 (fontified t)) . -3) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (#("m" 0 1 (fontified t face py-import-from-face)) . -4) (undo-tree-id436 . -1) (undo-tree-id437 . -1) 5 (#(" " 0 1 (fontified t)) . 5) (undo-tree-id438 . -1) (undo-tree-id439 . -1) 6 (#("a" 0 1 (fontified t)) . -6) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (#("p" 0 1 (fontified t)) . -7) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (#("p" 0 1 (fontified t)) . -8) (undo-tree-id444 . -1) (undo-tree-id445 . -1) 9 (#(" " 0 1 (fontified t)) . 9) (undo-tree-id446 . -1) (undo-tree-id447 . -1) 10 (#("i" 0 1 (fontified t)) . -10) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (#("m" 0 1 (fontified t)) . -11) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (#("p" 0 1 (fontified t)) . -12) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (#("o" 0 1 (fontified t)) . -13) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (#("r" 0 1 (fontified t)) . -14) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (#("t" 0 1 (fontified t face py-import-from-face)) . -15) (undo-tree-id458 . -1) (undo-tree-id459 . -1) 16 (#(" " 0 1 (fontified t)) . 16) (undo-tree-id460 . -1) (undo-tree-id461 . -1) 17 (#("d" 0 1 (fontified t)) . -17) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (#("b" 0 1 (fontified t)) . -18) (undo-tree-id464 . -1) (undo-tree-id465 . -1) 19 (1 . 19) (t 25919 51374 649778 689000)) nil (25919 51469 115383 127000) 0 nil])
([nil nil ((#("        newDeego = Player(name = \"Deego\")
" 0 8 (fontified t) 8 16 (fontified t face py-variable-name-face) 16 17 (fontified t) 17 18 (fontified t face font-lock-operator-face) 18 25 (fontified t) 25 26 (fontified t face (rainbow-delimiters-depth-1-face)) 26 33 (fontified t) 33 40 (fontified t face font-lock-string-face) 40 41 (fontified t face (rainbow-delimiters-depth-1-face)) 41 42 (fontified t)) . 133) (undo-tree-id386 . -40) (undo-tree-id387 . -40) (undo-tree-id388 . -19) (undo-tree-id389 . -25) (undo-tree-id390 . -41) (undo-tree-id391 . 8) (undo-tree-id392 . -39) (undo-tree-id393 . -41) (undo-tree-id394 . -41) (undo-tree-id395 . -41) (undo-tree-id396 . -41) (undo-tree-id397 . -41) (undo-tree-id398 . -41) (undo-tree-id399 . -41) (undo-tree-id400 . -41) (undo-tree-id401 . -41) (undo-tree-id402 . 1) (undo-tree-id403 . -40) (undo-tree-id404 . -40) (undo-tree-id405 . -40) (undo-tree-id406 . -40) (undo-tree-id407 . -40) (undo-tree-id408 . -40) (undo-tree-id409 . -40) (undo-tree-id410 . -40) (undo-tree-id411 . -40) (undo-tree-id412 . -42) (undo-tree-id413 . -41) 173) nil (25919 51469 115324 714000) 0 nil])
([nil nil ((nil rear-nonsticky nil 66 . 67) (#("
" 0 1 (fontified nil)) . -100) (58 . 101) 44) nil (25919 51469 115303 458000) 0 nil])
([nil nil ((59 . 63) (#("        " 0 7 (fontified t) 7 8 (fontified t rear-nonsticky t)) . 59) (undo-tree-id371 . -8) (undo-tree-id372 . -8) (undo-tree-id373 . -8) (undo-tree-id374 . -8) (undo-tree-id375 . -8) (undo-tree-id376 . -8) (undo-tree-id377 . -8) (undo-tree-id378 . -8) (undo-tree-id379 . -8) (undo-tree-id380 . -8) (undo-tree-id381 . -8) (undo-tree-id382 . -8) (undo-tree-id383 . -8) (undo-tree-id384 . -8) (undo-tree-id385 . -8) 67) nil (25919 51469 115283 219000) 0 nil])
([nil nil ((#("def load_balton():
" 0 3 (fontified t face py-def-class-face) 3 4 (fontified t) 4 15 (fontified t face py-def-face) 15 16 (fontified t face (rainbow-delimiters-depth-1-face)) 16 17 (fontified t face (rainbow-delimiters-depth-1-face)) 17 19 (fontified t)) . 21) (undo-tree-id358 . -18) (undo-tree-id359 . -18) (undo-tree-id360 . -3) (undo-tree-id361 . -18) (undo-tree-id362 . -18) (undo-tree-id363 . -18) (undo-tree-id364 . -18) (undo-tree-id365 . -18) (undo-tree-id366 . -17) (undo-tree-id367 . -14) (undo-tree-id368 . -9) (undo-tree-id369 . -4) (undo-tree-id370 . -19)) nil (25919 51469 115272 201000) 0 nil])
([nil nil ((nil rear-nonsticky nil 82 . 83) (#("
" 0 1 (fontified nil)) . -101) (82 . 102) 78) nil (25919 51469 115263 183000) 0 nil])
([nil nil ((102 . 106)) nil (25919 51469 115261 548000) 0 nil])
([nil nil ((131 . 135) (#("        " 0 8 (fontified t)) . 131) (undo-tree-id349 . -4) (undo-tree-id350 . -4) (undo-tree-id351 . -4) (undo-tree-id352 . -4) (undo-tree-id353 . -4) (undo-tree-id354 . -4) (undo-tree-id355 . -4) (undo-tree-id356 . -4) (undo-tree-id357 . -4) 135) nil (25919 51469 115260 123000) 0 nil])
([nil nil ((171 . 175) (#("        " 0 8 (fontified t)) . 171) (undo-tree-id339 . -4) (undo-tree-id340 . 8) (undo-tree-id341 . -8) (undo-tree-id342 . -4) (undo-tree-id343 . -4) (undo-tree-id344 . -4) (undo-tree-id345 . -4) (undo-tree-id346 . -4) (undo-tree-id347 . -4) (undo-tree-id348 . -4) 175) nil (25919 51469 115251 616000) 0 nil])
([nil nil ((201 . 205) (#("        " 0 8 (fontified t)) . 201) (undo-tree-id331 . -4) (undo-tree-id332 . -8) (undo-tree-id333 . -4) (undo-tree-id334 . -4) (undo-tree-id335 . -4) (undo-tree-id336 . -4) (undo-tree-id337 . -4) (undo-tree-id338 . -4) 205) nil (25919 51469 115244 290000) 0 nil])
([nil nil ((230 . 234) (#("        " 0 8 (fontified t)) . 230) (undo-tree-id324 . -4) (undo-tree-id325 . -4) (undo-tree-id326 . -4) (undo-tree-id327 . -4) (undo-tree-id328 . -4) (undo-tree-id329 . -4) (undo-tree-id330 . -4) 234) nil (25919 51469 115236 553000) 0 nil])
([nil nil ((291 . 295) (#("        " 0 8 (match-data (0 1 0 1) fontified t)) . 291) (undo-tree-id316 . -4) (undo-tree-id317 . -8) (undo-tree-id318 . -4) (undo-tree-id319 . -4) (undo-tree-id320 . -4) (undo-tree-id321 . -4) (undo-tree-id322 . -4) (undo-tree-id323 . -4) 295) nil (25919 51469 115222 392000) 0 nil])
([nil nil ((351 . 355) (#("        " 0 8 (fontified t)) . 351) (undo-tree-id309 . -4) (undo-tree-id310 . -4) (undo-tree-id311 . -4) (undo-tree-id312 . -4) (undo-tree-id313 . -4) (undo-tree-id314 . -4) (undo-tree-id315 . -4) 355) nil (25919 51469 115215 839000) 0 nil])
([nil nil ((379 . 383) (#("        " 0 8 (fontified t)) . 379) (undo-tree-id302 . -4) (undo-tree-id303 . -4) (undo-tree-id304 . -4) (undo-tree-id305 . -4) (undo-tree-id306 . -4) (undo-tree-id307 . -4) (undo-tree-id308 . -4) 383) nil (25919 51469 115209 349000) 0 nil])
([nil nil ((466 . 470) (#("        " 0 8 (match-data (0 3 0 1 1 2 2 3) fontified t)) . 466) (undo-tree-id293 . -4) (undo-tree-id294 . -4) (undo-tree-id295 . -4) (undo-tree-id296 . -4) (undo-tree-id297 . -4) (undo-tree-id298 . -4) (undo-tree-id299 . -4) (undo-tree-id300 . -4) (undo-tree-id301 . -4) 470) nil (25919 51469 115203 600000) 0 nil])
([nil nil ((552 . 556) (#("        " 0 5 (fontified t) 5 6 (fontified t) 6 8 (fontified t)) . 552) (undo-tree-id284 . -4) (undo-tree-id285 . -4) (undo-tree-id286 . -4) (undo-tree-id287 . -4) (undo-tree-id288 . -4) (undo-tree-id289 . -4) (undo-tree-id290 . -4) (undo-tree-id291 . -4) (undo-tree-id292 . -4) 556) nil (25919 51469 115196 271000) 0 nil])
([nil nil ((637 . 641) (#("        " 0 8 (fontified t)) . 637) (undo-tree-id275 . -4) (undo-tree-id276 . -4) (undo-tree-id277 . -4) (undo-tree-id278 . -4) (undo-tree-id279 . -4) (undo-tree-id280 . -4) (undo-tree-id281 . -4) (undo-tree-id282 . -4) (undo-tree-id283 . -4) 641) nil (25919 51469 115188 17000) 0 nil])
([nil nil ((726 . 730) (#("        " 0 8 (fontified t)) . 726) (undo-tree-id266 . -4) (undo-tree-id267 . -4) (undo-tree-id268 . -4) (undo-tree-id269 . -4) (undo-tree-id270 . -4) (undo-tree-id271 . -4) (undo-tree-id272 . -4) (undo-tree-id273 . -4) (undo-tree-id274 . -4) 730) nil (25919 51469 115181 110000) 0 nil])
([nil nil ((810 . 814) (#("        " 0 8 (fontified t)) . 810) (undo-tree-id257 . -4) (undo-tree-id258 . -4) (undo-tree-id259 . -4) (undo-tree-id260 . -4) (undo-tree-id261 . -4) (undo-tree-id262 . -4) (undo-tree-id263 . -4) (undo-tree-id264 . -4) (undo-tree-id265 . -4) 814) nil (25919 51469 115172 879000) 0 nil])
([nil nil ((903 . 907) (#("        " 0 8 (fontified t)) . 903) (undo-tree-id248 . -4) (undo-tree-id249 . -4) (undo-tree-id250 . -4) (undo-tree-id251 . -4) (undo-tree-id252 . -4) (undo-tree-id253 . -4) (undo-tree-id254 . -4) (undo-tree-id255 . -4) (undo-tree-id256 . -4) 907) nil (25919 51469 115165 972000) 0 nil])
([nil nil ((1148 . 1152) (#("        " 0 8 (fontified t)) . 1148) (undo-tree-id231 . -4) (undo-tree-id232 . -4) (undo-tree-id233 . -4) (undo-tree-id234 . -4) (undo-tree-id235 . -4) (undo-tree-id236 . -4) (undo-tree-id237 . -8) (undo-tree-id238 . -4) (undo-tree-id239 . -4) (undo-tree-id240 . -4) (undo-tree-id241 . -4) (undo-tree-id242 . -4) (undo-tree-id243 . -4) (undo-tree-id244 . -4) (undo-tree-id245 . -4) (undo-tree-id246 . -4) (undo-tree-id247 . -4) 1152) nil (25919 51469 115158 124000) 0 nil])
([nil nil ((995 . 999) (#("        " 0 8 (fontified t)) . 995) (undo-tree-id220 . -4) (undo-tree-id221 . -4) (undo-tree-id222 . -4) (undo-tree-id223 . -4) (undo-tree-id224 . -4) (undo-tree-id225 . -4) (undo-tree-id226 . -4) (undo-tree-id227 . -4) (undo-tree-id228 . -4) (undo-tree-id229 . -4) (undo-tree-id230 . -4) 999) nil (25919 51469 115146 592000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . 995) (undo-tree-id206 . -4) (undo-tree-id207 . -4) (undo-tree-id208 . -4) (undo-tree-id209 . -4) (undo-tree-id210 . -4) (undo-tree-id211 . -4) (undo-tree-id212 . -4) (undo-tree-id213 . -4) (undo-tree-id214 . -4) (undo-tree-id215 . -4) (undo-tree-id216 . -4) (undo-tree-id217 . -4) (undo-tree-id218 . -4) (undo-tree-id219 . -4) 999) nil (25919 51469 115137 130000) 0 nil])
([nil nil ((#("        " 0 7 (match-data (0 3 0 1 1 2 2 3) fontified t) 7 8 (match-data (0 3 0 1 1 2 2 3) rear-nonsticky t fontified t)) . 1079) (undo-tree-id194 . -4) (undo-tree-id195 . -4) (undo-tree-id196 . -4) (undo-tree-id197 . -4) (undo-tree-id198 . -4) (undo-tree-id199 . -4) (undo-tree-id200 . -4) (undo-tree-id201 . -4) (undo-tree-id202 . -4) (undo-tree-id203 . -4) (undo-tree-id204 . -8) (undo-tree-id205 . -8)) nil (25919 51469 115118 20000) 0 nil])
([nil nil ((995 . 999)) nil (25919 51469 115109 782000) 0 nil])
([nil nil ((1083 . 1087) 1087) nil (25919 51469 115108 576000) 0 nil])
([nil nil ((1110 . 1114) (#("        " 0 3 (fontified t) 3 8 (fontified t)) . 1110) (undo-tree-id165 . -8) (undo-tree-id166 . -8) (undo-tree-id167 . -4) (undo-tree-id168 . -4) (undo-tree-id169 . -4) (undo-tree-id170 . -4) (undo-tree-id171 . -4) (undo-tree-id172 . -4) (undo-tree-id173 . -4) (undo-tree-id174 . -4) (undo-tree-id175 . -4) (undo-tree-id176 . -4) (undo-tree-id177 . -4) (undo-tree-id178 . -8) (undo-tree-id179 . -8) (undo-tree-id180 . -8) (undo-tree-id181 . -8) (undo-tree-id182 . -8) (undo-tree-id183 . -8) (undo-tree-id184 . -8) (undo-tree-id185 . -8) (undo-tree-id186 . -8) (undo-tree-id187 . -8) (undo-tree-id188 . -8) (undo-tree-id189 . -8) (undo-tree-id190 . -8) (undo-tree-id191 . -8) (undo-tree-id192 . -8) (undo-tree-id193 . -8) 1118) nil (25919 51469 115105 642000) 0 nil])
([nil nil ((1162 . 1166) (#("        " 0 5 (fontified t) 5 8 (fontified t)) . 1162) (undo-tree-id149 . -4) (undo-tree-id150 . -4) (undo-tree-id151 . -4) (undo-tree-id152 . -4) (undo-tree-id153 . -8) (undo-tree-id154 . -8) (undo-tree-id155 . -4) (undo-tree-id156 . -4) (undo-tree-id157 . -4) (undo-tree-id158 . -4) (undo-tree-id159 . -4) (undo-tree-id160 . -4) (undo-tree-id161 . -4) (undo-tree-id162 . -4) (undo-tree-id163 . -4) (undo-tree-id164 . -4) 1166) nil (25919 51469 115084 319000) 0 nil])
([nil nil ((1189 . 1193) (#("        " 0 5 (fontified t) 5 8 (fontified t)) . 1189) (undo-tree-id130 . -4) (undo-tree-id131 . -4) (undo-tree-id132 . -4) (undo-tree-id133 . -4) (undo-tree-id134 . -4) (undo-tree-id135 . -4) (undo-tree-id136 . -4) (undo-tree-id137 . -4) (undo-tree-id138 . -4) (undo-tree-id139 . -8) (undo-tree-id140 . -8) (undo-tree-id141 . -4) (undo-tree-id142 . -4) (undo-tree-id143 . -4) (undo-tree-id144 . -4) (undo-tree-id145 . -4) (undo-tree-id146 . -4) (undo-tree-id147 . -4) (undo-tree-id148 . -4) 1193) nil (25919 51469 115068 413000) 0 nil])
([nil nil ((1216 . 1220) (#("        " 0 8 (fontified t)) . 1216) (undo-tree-id119 . -4) (undo-tree-id120 . -8) (undo-tree-id121 . -4) (undo-tree-id122 . -4) (undo-tree-id123 . -4) (undo-tree-id124 . -4) (undo-tree-id125 . -4) (undo-tree-id126 . -4) (undo-tree-id127 . -4) (undo-tree-id128 . -4) (undo-tree-id129 . -4) 1220) nil (25919 51469 114997 735000) 0 nil])
([nil nil ((1241 . 1245) (#("        " 0 2 (fontified t) 2 8 (fontified t)) . 1241) (undo-tree-id111 . -4) (undo-tree-id112 . -8) (undo-tree-id113 . -4) (undo-tree-id114 . -4) (undo-tree-id115 . -4) (undo-tree-id116 . -4) (undo-tree-id117 . -4) (undo-tree-id118 . -4) 1245) nil (25919 51469 114989 128000) 0 nil])
([nil nil ((1270 . 1274) (#("        " 0 8 (fontified t)) . 1270) (undo-tree-id102 . -4) (undo-tree-id103 . -8) (undo-tree-id104 . -8) (undo-tree-id105 . -4) (undo-tree-id106 . -4) (undo-tree-id107 . -4) (undo-tree-id108 . -4) (undo-tree-id109 . -4) (undo-tree-id110 . -4) 1274) nil (25919 51469 114981 836000) 0 nil])
([nil nil ((1296 . 1300) (#("        " 0 8 (match-data (0 2 0 1 1 2) fontified t)) . 1296) (undo-tree-id95 . -4) (undo-tree-id96 . -4) (undo-tree-id97 . -4) (undo-tree-id98 . -4) (undo-tree-id99 . -4) (undo-tree-id100 . -4) (undo-tree-id101 . -4) 1300) nil (25919 51469 114971 110000) 0 nil])
([nil nil ((1331 . 1335) (#("        " 0 8 (match-data (0 3 0 1 1 2 2 3) fontified t)) . 1331) (undo-tree-id86 . -4) (undo-tree-id87 . -4) (undo-tree-id88 . -4) (undo-tree-id89 . -4) (undo-tree-id90 . -4) (undo-tree-id91 . -4) (undo-tree-id92 . -4) (undo-tree-id93 . -4) (undo-tree-id94 . -4) 1335) nil (25919 51469 114539 508000) 0 nil])
([nil nil ((1336 . 1340) (#("        " 0 8 (match-data (0 3 0 1 1 2 2 3) fontified t)) . 1336) (undo-tree-id76 . -3) (undo-tree-id77 . -3) (undo-tree-id78 . -3) (undo-tree-id79 . -3) (undo-tree-id80 . -3) (undo-tree-id81 . -3) (undo-tree-id82 . -3) (undo-tree-id83 . -3) (undo-tree-id84 . -3) (undo-tree-id85 . -3) 1339) nil (25919 51469 114535 581000) 0 nil])
([nil nil ((#("    " 0 4 (match-data (0 3 0 1 1 2 2 3) fontified t)) . 1336) (undo-tree-id65 . -3) (undo-tree-id66 . -4) (undo-tree-id67 . -3) (undo-tree-id68 . -3) (undo-tree-id69 . -3) (undo-tree-id70 . -3) (undo-tree-id71 . -3) (undo-tree-id72 . -3) (undo-tree-id73 . -3) (undo-tree-id74 . -3) (undo-tree-id75 . -3) 1339) nil (25919 51469 114531 29000) 0 nil])
([nil nil ((1337 . 1341) (#("        " 0 8 (match-data (0 3 0 1 1 2 2 3) fontified t)) . 1337) (undo-tree-id64 . -8)) nil (25919 51469 114525 852000) 0 nil])
([nil nil ((1361 . 1365) (#("        " 0 8 (match-data (0 3 0 1 1 2 2 3) fontified t)) . 1361) (undo-tree-id56 . -4) (undo-tree-id57 . -4) (undo-tree-id58 . -4) (undo-tree-id59 . -4) (undo-tree-id60 . -4) (undo-tree-id61 . -4) (undo-tree-id62 . -4) (undo-tree-id63 . -4) 1365) nil (25919 51469 114524 529000) 0 nil])
([nil nil ((#("    DEEGO =  Player.query.filter_by(name = \"Deego\").first()
" 0 4 (match-data (0 1 0 1) fontified t) 4 9 (match-data (0 1 0 1) fontified t face py-variable-name-face) 9 10 (match-data (0 1 0 1) fontified t) 10 11 (match-data (0 1 0 1) fontified t face font-lock-operator-face) 11 12 (match-data (0 1 0 1) fontified t) 12 20 (fontified t) 20 26 (match-data (0 1 0 1) fontified t) 26 35 (match-data (0 3 0 1 1 2 2 3) fontified t) 35 36 (match-data (0 1 0 1) fontified t face (rainbow-delimiters-depth-1-face)) 36 43 (match-data (0 1 0 1) fontified t) 43 50 (match-data (0 1 0 1) fontified t face font-lock-string-face) 50 51 (match-data (0 1 0 1) fontified t face (rainbow-delimiters-depth-1-face)) 51 57 (match-data (0 1 0 1) fontified t) 57 58 (match-data (0 1 0 1) fontified t face (rainbow-delimiters-depth-1-face)) 58 59 (match-data (0 1 0 1) rear-nonsticky t fontified t face (rainbow-delimiters-depth-1-face)) 59 60 (fontified t)) . 291) (undo-tree-id19 . -11) (undo-tree-id20 . -11) (undo-tree-id21 . -59) (undo-tree-id22 . -4) (undo-tree-id23 . -60) (undo-tree-id24 . -60) (undo-tree-id25 . -60) (undo-tree-id26 . -60) (undo-tree-id27 . -60) (undo-tree-id28 . -60) (undo-tree-id29 . -60) (undo-tree-id30 . -60) (undo-tree-id31 . -60) (undo-tree-id32 . -60) (undo-tree-id33 . -60) (undo-tree-id34 . -60) (undo-tree-id35 . -60) (undo-tree-id36 . -60) (undo-tree-id37 . -60) (undo-tree-id38 . -13) (undo-tree-id39 . -19) (undo-tree-id40 . -4) (undo-tree-id41 . -9) (undo-tree-id42 . -11) (undo-tree-id43 . -11) (undo-tree-id44 . -11) (undo-tree-id45 . -11) (undo-tree-id46 . -11) (undo-tree-id47 . -11) (undo-tree-id48 . -11) (undo-tree-id49 . -11) (undo-tree-id50 . -11) (undo-tree-id51 . -11) (undo-tree-id52 . -11) (undo-tree-id53 . -11) (undo-tree-id54 . -11) (undo-tree-id55 . -60) 302) nil (25919 51469 114520 135000) 0 nil])
([nil nil ((nil rear-nonsticky nil 81 . 82) (#("
" 0 1 (fontified nil)) . -137) (77 . 138) 58) nil (25919 51469 115734 93000) 0 nil])
([nil nil ((#("    db.session.add(newDeego)
" 0 4 (fontified t) 4 7 (fontified t) 7 14 (fontified t) 14 18 (fontified t) 18 19 (fontified t face (rainbow-delimiters-depth-1-face)) 19 26 (fontified t) 26 27 (rear-nonsticky t fontified t) 27 28 (fontified t face (rainbow-delimiters-depth-1-face)) 28 29 (fontified t)) . 261) (undo-tree-id708 . -13) (undo-tree-id709 . -13) (undo-tree-id710 . -13) (undo-tree-id711 . -28) (undo-tree-id712 . -7) (undo-tree-id713 . 15) (undo-tree-id714 . -7) (undo-tree-id715 . -13) (undo-tree-id716 . -29) (undo-tree-id717 . -29) (undo-tree-id718 . -29) (undo-tree-id719 . -29) (undo-tree-id720 . -29) (undo-tree-id721 . -12) (undo-tree-id722 . -12) (undo-tree-id723 . -12) (undo-tree-id724 . -12) (undo-tree-id725 . -13) (undo-tree-id726 . -13) (undo-tree-id727 . -13) (undo-tree-id728 . -13) (undo-tree-id729 . -13) (undo-tree-id730 . -13) (undo-tree-id731 . -13) (undo-tree-id732 . -13) (undo-tree-id733 . -13) (undo-tree-id734 . -7) (undo-tree-id735 . -14) (undo-tree-id736 . -13) (undo-tree-id737 . -13) (undo-tree-id738 . -13) (undo-tree-id739 . -13) (undo-tree-id740 . -4) (undo-tree-id741 . -6) (undo-tree-id742 . -19) (undo-tree-id743 . -27) (undo-tree-id744 . -13) (undo-tree-id745 . -13) (undo-tree-id746 . -13) (undo-tree-id747 . -13) (undo-tree-id748 . -13) (undo-tree-id749 . -29) 274) nil (25919 51570 765908 810000) 0 nil] [nil nil ((#("session" 0 7 (fontified t)) . 268) (undo-tree-id0 . -6) (undo-tree-id1 . -6) (undo-tree-id2 . -6) (undo-tree-id3 . -6) (undo-tree-id4 . -5) (undo-tree-id5 . -5) (undo-tree-id6 . -5) (undo-tree-id7 . -5) (undo-tree-id8 . -7) (undo-tree-id9 . -6) (undo-tree-id10 . -6) (undo-tree-id11 . -6) (undo-tree-id12 . -6) (undo-tree-id13 . -6) (undo-tree-id14 . -7) (undo-tree-id15 . -6) (undo-tree-id16 . -6) (undo-tree-id17 . -6) (undo-tree-id18 . -7) 274) ((268 . 275)) (25919 51469 114502 639000) 0 nil])
([nil nil ((nil rear-nonsticky nil 81 . 82) (#("
" 0 1 (fontified nil)) . -106) (77 . 107) 68) nil (25919 51570 765787 786000) 0 nil])
nil
([nil nil ((350 . 355) 349) nil (25919 51570 765787 50000) 0 nil])
([nil nil ((1087 . 1092)) nil (25919 51570 765786 450000) 0 nil])
([nil nil ((1 . 9)) nil (25919 51570 765786 26000) 0 nil])
([nil nil ((6 . 12) (#("mod" 0 3 (fontified nil)) . -6) (6 . 9) (#("models" 0 6 (fontified nil)) . -6) (6 . 12) (#("mod" 0 3 (fontified t)) . -6) (undo-tree-id697 . -3) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -2) (undo-tree-id702 . -2) (undo-tree-id703 . -2) (undo-tree-id704 . -2) (undo-tree-id705 . -2) (undo-tree-id706 . -3) (undo-tree-id707 . -3) 9) nil (25919 51570 765784 958000) 0 nil])
([nil nil ((12 . 22)) nil (25919 51570 765780 18000) 0 nil])
([nil nil ((20 . 26) (#("Pl" 0 2 (fontified nil)) . -20) (20 . 22) (#("Player" 0 6 (fontified nil)) . -20) (20 . 26) (#("Pl" 0 2 (match-data (0 3 0 1 1 2 2 3) fontified t)) . -20) (undo-tree-id692 . -2) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -2) (undo-tree-id696 . -2) 22) nil (25919 51570 765779 113000) 0 nil])
([nil nil ((26 . 31)) nil (25919 51570 765775 746000) 0 nil])
([nil nil ((28 . 37) (#("Cha" 0 3 (fontified nil)) . -28) (28 . 31) (#("Character" 0 9 (fontified nil)) . -28) (28 . 37) (#("Cha" 0 3 (match-data (0 2 0 1 1 2) fontified t)) . -28) (undo-tree-id686 . -3) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -2) (undo-tree-id690 . -3) (undo-tree-id691 . -3) 31) nil (25919 51570 765773 942000) 0 nil])
([nil nil ((37 . 41)) nil (25919 51570 765471 905000) 0 nil])
([nil nil ((39 . 53) (#("Sp" 0 2 (fontified nil)) . -39) (39 . 41) (#("Specialization" 0 14 (fontified nil)) . -39) (39 . 53) (#("Sp" 0 2 (match-data (0 3 0 1 1 2 2 3) fontified t)) . -39) (undo-tree-id677 . -2) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -2) (undo-tree-id681 . -2) (undo-tree-id682 . -2) (undo-tree-id683 . -2) (undo-tree-id684 . -2) (undo-tree-id685 . -2) 41) nil (25919 51570 765470 865000) 0 nil])
([nil nil ((53 . 57)) nil (25919 51570 765466 230000) 0 nil])
([nil nil ((55 . 59) (#("Bu" 0 2 (fontified nil)) . -55) (55 . 57) (#("Buff" 0 4 (fontified nil)) . -55) (55 . 59) (#("Bu" 0 2 (match-data (0 2 0 1 1 2) fontified t)) . -55) (undo-tree-id672 . -2) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -2) (undo-tree-id676 . -2) 57) nil (25919 51570 765465 345000) 0 nil])
([nil nil ((78 . 82)) nil (25919 51570 765462 637000) 0 nil])
([nil nil ((82 . 86)) nil (25919 51570 765462 131000) 0 nil])
([nil nil ((82 . 93) (#("loa" 0 3 (fontified nil)) . -82) (82 . 85) (#("load_balton" 0 11 (fontified nil)) . -82) (82 . 93) (#("load" 0 4 (fontified t)) . -82) (undo-tree-id665 . -4) (undo-tree-id666 . -1) (undo-tree-id667 . -2) (undo-tree-id668 . -2) (undo-tree-id669 . -3) (undo-tree-id670 . -4) (undo-tree-id671 . -4) 86) nil (25919 51570 765461 15000) 0 nil])
([nil nil ((93 . 95)) nil (25919 51570 765457 79000) 0 nil])
([nil nil ((95 . 100)) nil (25919 51570 765456 588000) 0 nil])
([nil nil ((100 . 103)) nil (25919 51570 765455 988000) 0 nil])
([nil nil ((100 . 110) (#("lo" 0 2 (fontified nil)) . -100) (100 . 102) (#("load_deego" 0 10 (fontified nil)) . -100) (100 . 110) (#("lo" 0 2 (match-data (0 4 0 1 1 2 2 3 3 4) fontified t)) . -100) (undo-tree-id659 . -2) (undo-tree-id660 . -2) (undo-tree-id661 . -1) (undo-tree-id662 . -2) (undo-tree-id663 . -2) (undo-tree-id664 . -2) 102) nil (25919 51570 765454 875000) 0 nil])
([nil nil ((110 . 112)) nil (25919 51570 765451 496000) 0 nil])
([nil nil ((#("a" 0 1 (match-data (0 4 0 1 1 2 2 3 3 4) fontified t)) . 112) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1)) nil (25919 51570 765450 792000) 0 nil])
([nil nil ((258 . 263)) nil (25919 51570 765447 14000) 0 nil])
([nil nil ((263 . 264)) nil (25919 51570 765446 543000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -263) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) 264) nil (25919 51570 765445 798000) 0 nil])
([nil nil ((nil fontified nil 989 . 990) (nil fontified nil 985 . 989) (nil fontified nil 968 . 985) (nil fontified nil 967 . 968) (nil fontified nil 966 . 967) (nil fontified nil 960 . 966) (nil fontified nil 958 . 960) (nil fontified nil 945 . 958) (nil fontified nil 943 . 945) (nil fontified nil 936 . 943) (nil fontified nil 933 . 936) (nil fontified nil 926 . 933) (nil fontified nil 925 . 926) (nil fontified nil 916 . 925) (nil fontified nil 915 . 916) (nil fontified nil 914 . 915) (nil fontified nil 913 . 914) (nil fontified nil 912 . 913) (nil fontified nil 908 . 912) (nil fontified nil 907 . 908) (nil fontified nil 903 . 907) (nil fontified nil 902 . 903) (nil fontified nil 901 . 902) (nil fontified nil 897 . 901) (nil fontified nil 880 . 897) (nil fontified nil 879 . 880) (nil fontified nil 878 . 879) (nil fontified nil 874 . 878) (nil fontified nil 871 . 874) (nil fontified nil 858 . 871) (nil fontified nil 856 . 858) (nil fontified nil 850 . 856) (nil fontified nil 844 . 850) (nil fontified nil 837 . 844) (nil fontified nil 836 . 837) (nil fontified nil 827 . 836) (nil fontified nil 826 . 827) (nil fontified nil 825 . 826) (nil fontified nil 824 . 825) (nil fontified nil 823 . 824) (nil fontified nil 815 . 823) (nil fontified nil 811 . 815) (nil fontified nil 810 . 811) (nil fontified nil 809 . 810) (nil fontified nil 805 . 809) (nil fontified nil 788 . 805) (nil fontified nil 787 . 788) (nil fontified nil 786 . 787) (nil fontified nil 782 . 786) (nil fontified nil 772 . 782) (nil fontified nil 768 . 772) (nil fontified nil 763 . 768) (nil fontified nil 759 . 763) (nil fontified nil 757 . 759) (nil fontified nil 747 . 757) (nil fontified nil 741 . 747) (nil fontified nil 740 . 741) (nil fontified nil 739 . 740) (nil fontified nil 730 . 739) (nil fontified nil 729 . 730) (nil fontified nil 728 . 729) (nil fontified nil 727 . 728) (nil fontified nil 726 . 727) (nil fontified nil 722 . 726) (nil fontified nil 718 . 722) (nil fontified nil 717 . 718) (nil fontified nil 716 . 717) (nil fontified nil 712 . 716) (nil fontified nil 698 . 712) (nil fontified nil 695 . 698) (nil fontified nil 694 . 695) (nil fontified nil 693 . 694) (nil fontified nil 685 . 693) (nil fontified nil 672 . 685) (nil fontified nil 670 . 672) (nil fontified nil 663 . 670) (nil fontified nil 656 . 663) (nil fontified nil 655 . 656) (nil fontified nil 654 . 655) (nil fontified nil 646 . 654) (nil fontified nil 645 . 646) (nil fontified nil 644 . 645) (nil fontified nil 643 . 644) (nil fontified nil 641 . 643) (nil fontified nil 640 . 641) (nil fontified nil 638 . 640) (nil fontified nil 634 . 638) (nil fontified nil 633 . 634) (nil fontified nil 632 . 633) (nil fontified nil 629 . 632) (nil fontified nil 628 . 629) (nil fontified nil 611 . 628) (nil fontified nil 610 . 611) (nil fontified nil 609 . 610) (nil fontified nil 601 . 609) (nil fontified nil 588 . 601) (nil fontified nil 586 . 588) (nil fontified nil 581 . 586) (nil fontified nil 577 . 581) (nil fontified nil 575 . 577) (nil fontified nil 568 . 575) (nil fontified nil 567 . 568) (nil fontified nil 564 . 567) (nil fontified nil 558 . 564) (nil fontified nil 557 . 558) (nil fontified nil 556 . 557) (nil fontified nil 555 . 556) (nil fontified nil 549 . 555) (nil fontified nil 546 . 549) (nil fontified nil 545 . 546) (nil fontified nil 544 . 545) (nil fontified nil 543 . 544) (nil fontified nil 539 . 543) (nil fontified nil 522 . 539) (nil fontified nil 521 . 522) (nil fontified nil 520 . 521) (nil fontified nil 515 . 520) (nil fontified nil 514 . 515) (nil fontified nil 503 . 514) (nil fontified nil 501 . 503) (nil fontified nil 499 . 501) (nil fontified nil 491 . 499) (nil fontified nil 484 . 491) (nil fontified nil 483 . 484) (nil fontified nil 478 . 483) (nil fontified nil 474 . 478) (nil fontified nil 473 . 474) (nil fontified nil 472 . 473) (nil fontified nil 471 . 472) (nil fontified nil 470 . 471) (nil fontified nil 464 . 470) (nil fontified nil 460 . 464) (nil fontified nil 459 . 460) (nil fontified nil 458 . 459) (nil fontified nil 454 . 458) (nil fontified nil 440 . 454) (nil fontified nil 437 . 440) (nil fontified nil 436 . 437) (nil fontified nil 435 . 436) (nil fontified nil 433 . 435) (nil fontified nil 426 . 433) (nil fontified nil 425 . 426) (nil fontified nil 424 . 425) (nil fontified nil 421 . 424) (nil fontified nil 415 . 421) (nil fontified nil 413 . 415) (nil fontified nil 411 . 413) (nil fontified nil 405 . 411) (nil fontified nil 404 . 405) (nil fontified nil 397 . 404) (nil fontified nil 396 . 397) (nil fontified nil 387 . 396) (nil fontified nil 386 . 387) (nil fontified nil 385 . 386) (nil fontified nil 384 . 385) (nil fontified nil 383 . 384) (nil fontified nil 378 . 383) (nil fontified nil 374 . 378) (nil fontified nil 373 . 374) (nil fontified nil 372 . 373) (nil fontified nil 368 . 372) (nil fontified nil 351 . 368) (nil fontified nil 350 . 351) (nil fontified nil 349 . 350) (nil fontified nil 340 . 349) (nil fontified nil 327 . 340) (nil fontified nil 325 . 327) (nil fontified nil 317 . 325) (nil fontified nil 310 . 317) (nil fontified nil 309 . 310) (nil fontified nil 300 . 309) (nil fontified nil 299 . 300) (nil fontified nil 298 . 299) (nil fontified nil 297 . 298) (nil fontified nil 291 . 297) (nil fontified nil 287 . 291) (nil fontified nil 286 . 287) (nil fontified nil 263 . 286) (263 . 990)) nil (25919 51570 765438 156000) 0 nil])
([nil nil ((#("Balton" 0 6 (fontified t face font-lock-comment-face)) . -269) (undo-tree-id626 . -6) (undo-tree-id627 . -6) (undo-tree-id628 . -4) (undo-tree-id629 . 6) (undo-tree-id630 . -6) (undo-tree-id631 . -4) (undo-tree-id632 . -4) (undo-tree-id633 . -4) (undo-tree-id634 . -4) (undo-tree-id635 . -4) (undo-tree-id636 . -6) (undo-tree-id637 . -6) (undo-tree-id638 . -6) (undo-tree-id639 . -6) (undo-tree-id640 . -6) (undo-tree-id641 . -6) (undo-tree-id642 . -6) (undo-tree-id643 . -6) 275) nil (25919 51570 765418 888000) 0 nil])
([nil nil ((269 . 274)) nil (25919 51570 765411 825000) 0 nil])
([nil nil ((#("BALTON" 0 5 (match-data (0 3 0 1 1 2 2 3) fontified t) 5 6 (match-data (0 3 0 1 1 2 2 3) fontified t)) . -362) (undo-tree-id608 . -6) (undo-tree-id609 . -6) (undo-tree-id610 . -6) (undo-tree-id611 . -2) (undo-tree-id612 . -2) (undo-tree-id613 . -2) (undo-tree-id614 . -2) (undo-tree-id615 . -2) (undo-tree-id616 . -2) (undo-tree-id617 . -6) (undo-tree-id618 . -6) (undo-tree-id619 . -6) (undo-tree-id620 . -6) (undo-tree-id621 . -6) (undo-tree-id622 . -6) (undo-tree-id623 . -6) (undo-tree-id624 . -6) (undo-tree-id625 . -6) 368) nil (25919 51570 765410 811000) 0 nil])
([nil nil ((362 . 365)) nil (25919 51570 765403 47000) 0 nil])
([nil nil ((365 . 367)) nil (25919 51570 765402 575000) 0 nil])
([nil nil ((#("BALTON" 0 5 (match-data (0 3 0 1 1 2 2 3) fontified t) 5 6 (match-data (0 3 0 1 1 2 2 3) fontified t)) . -447) (undo-tree-id591 . -6) (undo-tree-id592 . -6) (undo-tree-id593 . -6) (undo-tree-id594 . -2) (undo-tree-id595 . -2) (undo-tree-id596 . -2) (undo-tree-id597 . -2) (undo-tree-id598 . -2) (undo-tree-id599 . -6) (undo-tree-id600 . -6) (undo-tree-id601 . -6) (undo-tree-id602 . -6) (undo-tree-id603 . -6) (undo-tree-id604 . -6) (undo-tree-id605 . -6) (undo-tree-id606 . -6) (undo-tree-id607 . -6) 453) nil (25919 51570 765401 575000) 0 nil])
([nil nil ((nil rear-nonsticky nil 451 . 452) (nil fontified nil 447 . 452) (447 . 452)) nil (25919 51570 765394 538000) 0 nil])
([nil nil ((#("BALTON" 0 5 (match-data (0 3 0 1 1 2 2 3) fontified t) 5 6 (match-data (0 3 0 1 1 2 2 3) fontified t)) . -531) (undo-tree-id572 . -6) (undo-tree-id573 . -6) (undo-tree-id574 . -6) (undo-tree-id575 . -3) (undo-tree-id576 . -3) (undo-tree-id577 . -3) (undo-tree-id578 . -3) (undo-tree-id579 . -3) (undo-tree-id580 . -6) (undo-tree-id581 . -6) (undo-tree-id582 . -6) (undo-tree-id583 . -6) (undo-tree-id584 . -6) (undo-tree-id585 . -6) (undo-tree-id586 . -6) (undo-tree-id587 . -6) (undo-tree-id588 . -6) (undo-tree-id589 . -6) (undo-tree-id590 . -6) 537) nil (25919 51570 765393 396000) 0 nil])
([nil nil ((nil rear-nonsticky nil 535 . 536) (nil fontified nil 531 . 536) (531 . 536)) nil (25919 51570 765384 720000) 0 nil])
([nil nil ((#("BALTON" 0 5 (match-data (0 3 0 1 1 2 2 3) fontified t) 5 6 (match-data (0 3 0 1 1 2 2 3) fontified t)) . -619) (undo-tree-id553 . -6) (undo-tree-id554 . -6) (undo-tree-id555 . -6) (undo-tree-id556 . -3) (undo-tree-id557 . -3) (undo-tree-id558 . -3) (undo-tree-id559 . -3) (undo-tree-id560 . -3) (undo-tree-id561 . -6) (undo-tree-id562 . -6) (undo-tree-id563 . -6) (undo-tree-id564 . -6) (undo-tree-id565 . -6) (undo-tree-id566 . -6) (undo-tree-id567 . -6) (undo-tree-id568 . -6) (undo-tree-id569 . -6) (undo-tree-id570 . -6) (undo-tree-id571 . -6) 625) nil (25919 51570 765382 998000) 0 nil])
([nil nil ((nil rear-nonsticky nil 623 . 624) (nil fontified nil 619 . 624) (619 . 624)) nil (25919 51570 765373 828000) 0 nil])
([nil nil ((#("BALTON" 0 5 (match-data (0 3 0 1 1 2 2 3) fontified t) 5 6 (match-data (0 3 0 1 1 2 2 3) fontified t)) . -702) (undo-tree-id534 . -6) (undo-tree-id535 . -6) (undo-tree-id536 . -6) (undo-tree-id537 . -3) (undo-tree-id538 . -3) (undo-tree-id539 . -3) (undo-tree-id540 . -3) (undo-tree-id541 . -3) (undo-tree-id542 . -6) (undo-tree-id543 . -6) (undo-tree-id544 . -6) (undo-tree-id545 . -6) (undo-tree-id546 . -6) (undo-tree-id547 . -6) (undo-tree-id548 . -6) (undo-tree-id549 . -6) (undo-tree-id550 . -6) (undo-tree-id551 . -6) (undo-tree-id552 . -6) 708) nil (25919 51570 765370 596000) 0 nil])
([nil nil ((nil rear-nonsticky nil 706 . 707) (nil fontified nil 702 . 707) (702 . 707)) nil (25919 51570 762560 385000) 0 nil])
([nil nil ((#("BALTON" 0 5 (match-data (0 3 0 1 1 2 2 3) fontified t) 5 6 (match-data (0 3 0 1 1 2 2 3) fontified t)) . -794) (undo-tree-id502 . -6) (undo-tree-id503 . -6) (undo-tree-id504 . -6) (undo-tree-id505 . -2) (undo-tree-id506 . -2) (undo-tree-id507 . -2) (undo-tree-id508 . -2) (undo-tree-id509 . -2) (undo-tree-id510 . -2) (undo-tree-id511 . -2) (undo-tree-id512 . -2) (undo-tree-id513 . -2) (undo-tree-id514 . -2) (undo-tree-id515 . -2) (undo-tree-id516 . -2) (undo-tree-id517 . -2) (undo-tree-id518 . -2) (undo-tree-id519 . -2) (undo-tree-id520 . -2) (undo-tree-id521 . -2) (undo-tree-id522 . -2) (undo-tree-id523 . -6) (undo-tree-id524 . -6) (undo-tree-id525 . -6) (undo-tree-id526 . -6) (undo-tree-id527 . -6) (undo-tree-id528 . -6) (undo-tree-id529 . -6) (undo-tree-id530 . -6) (undo-tree-id531 . -6) (undo-tree-id532 . -6) (undo-tree-id533 . -6) 800) nil (25919 51570 762558 795000) 0 nil])
([nil nil ((nil rear-nonsticky nil 798 . 799) (nil fontified nil 794 . 799) (794 . 799)) nil (25919 51570 762546 757000) 0 nil])
([nil nil ((#("BALTON" 0 5 (match-data (0 3 0 1 1 2 2 3) fontified t) 5 6 (match-data (0 3 0 1 1 2 2 3) fontified t)) . -885) (undo-tree-id483 . -6) (undo-tree-id484 . -6) (undo-tree-id485 . -6) (undo-tree-id486 . -3) (undo-tree-id487 . -3) (undo-tree-id488 . -3) (undo-tree-id489 . -3) (undo-tree-id490 . -3) (undo-tree-id491 . -6) (undo-tree-id492 . -6) (undo-tree-id493 . -6) (undo-tree-id494 . -6) (undo-tree-id495 . -6) (undo-tree-id496 . -6) (undo-tree-id497 . -6) (undo-tree-id498 . -6) (undo-tree-id499 . -6) (undo-tree-id500 . -6) (undo-tree-id501 . -6) 891) nil (25919 51570 762545 280000) 0 nil])
([nil nil ((nil rear-nonsticky nil 889 . 890) (nil fontified nil 885 . 890) (885 . 890)) nil (25919 51570 762537 623000) 0 nil])
([nil nil ((#("BALTON" 0 5 (match-data (0 3 0 1 1 2 2 3) fontified t) 5 6 (match-data (0 3 0 1 1 2 2 3) fontified t)) . -972) (undo-tree-id466 . -6) (undo-tree-id467 . -6) (undo-tree-id468 . -6) (undo-tree-id469 . -2) (undo-tree-id470 . -2) (undo-tree-id471 . -2) (undo-tree-id472 . -2) (undo-tree-id473 . -2) (undo-tree-id474 . -6) (undo-tree-id475 . -6) (undo-tree-id476 . -6) (undo-tree-id477 . -6) (undo-tree-id478 . -6) (undo-tree-id479 . -6) (undo-tree-id480 . -6) (undo-tree-id481 . -6) (undo-tree-id482 . -6) 978) nil (25919 51570 762536 49000) 0 nil])
([nil nil ((nil rear-nonsticky nil 976 . 977) (nil fontified nil 972 . 977) (972 . 977)) nil (25919 51570 762521 790000) 0 nil])
([nil nil ((59 . 60)) nil (25919 51570 762521 82000) 0 nil])
([nil nil ((60 . 78)) nil (25919 51570 762520 545000) 0 nil])
([nil nil ((78 . 79)) nil (25919 51570 762519 860000) 0 nil])
([nil nil ((2235 . 2236) 1125) nil (25919 51570 762515 904000) 0 nil])
([nil nil ((941 . 945) (#("        " 0 8 (fontified t)) . 941) (undo-tree-id1053 . -8) (undo-tree-id1054 . -8) (undo-tree-id1055 . -8) (undo-tree-id1056 . -8) (undo-tree-id1057 . -8) 971 (#("    " 0 4 (fontified nil)) . -949) (undo-tree-id1058 . -4) (undo-tree-id1059 . -4) (undo-tree-id1060 . -4) (undo-tree-id1061 . -4) (941 . 949) 967 (966 . 967) (960 . 966) (#("ci" 0 2 (fontified nil)) . -960) (960 . 962) (#("cities" 0 6 (fontified nil)) . -960) (960 . 966) (#("ci" 0 2 (match-data (0 1 0 1) fontified t)) . -960) (undo-tree-id1062 . -2) (undo-tree-id1063 . -2) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) (undo-tree-id1066 . -1) (undo-tree-id1067 . -2) (undo-tree-id1068 . -2) (undo-tree-id1069 . -2) (undo-tree-id1070 . -2) (undo-tree-id1071 . -2) (undo-tree-id1072 . -2) (undo-tree-id1073 . -2) (undo-tree-id1074 . -2) 962 (959 . 962) (956 . 959) (#("a" 0 1 (fontified nil)) . -956) (956 . 957) (#("add" 0 3 (fontified nil)) . -956) (956 . 959) (#("a" 0 1 (match-data (0 0) fontified t)) . -956) (undo-tree-id1075 . -1) (undo-tree-id1076 . -1) (undo-tree-id1077 . -1) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) (undo-tree-id1080 . -1) (undo-tree-id1081 . -1) 957 (955 . 957) (948 . 955) (#("session" 0 7 (fontified nil)) . -948) (948 . 955) (945 . 948) (940 . 945) (#("
" 0 1 (fontified t face font-lock-comment-face)) . -329) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) (undo-tree-id1087 . -1) (undo-tree-id1088 . -1) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) (undo-tree-id1093 . -1) (undo-tree-id1094 . -1) (undo-tree-id1095 . -1) (undo-tree-id1096 . -1) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) (undo-tree-id1099 . -1) (undo-tree-id1100 . -1) (undo-tree-id1101 . -1) (undo-tree-id1102 . -1) (undo-tree-id1103 . -1) (undo-tree-id1104 . -1) (undo-tree-id1105 . -1) (undo-tree-id1106 . -1) (undo-tree-id1107 . -1) (undo-tree-id1108 . -1) (undo-tree-id1109 . -1) (undo-tree-id1110 . -1) (undo-tree-id1111 . -1) (undo-tree-id1112 . -1) (undo-tree-id1113 . -1) (undo-tree-id1114 . -1) (undo-tree-id1115 . -1) (undo-tree-id1116 . -1) (undo-tree-id1117 . -1) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) (undo-tree-id1120 . -1) (undo-tree-id1121 . -1) (undo-tree-id1122 . -1) (undo-tree-id1123 . -1) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) 330 (#("    deego = Character(name = \"Deego\", class_name = \"Warrior\", player_id = DEEGO.id)" 0 4 (fontified t) 4 9 (fontified t face py-variable-name-face) 9 10 (fontified t) 10 11 (fontified t face font-lock-operator-face) 11 12 (fontified t) 12 21 (match-data (0 3 0 1 1 2 2 3) fontified t) 21 22 (match-data (0 3 0 1 1 2 2 3) fontified t face (rainbow-delimiters-depth-1-face)) 22 29 (match-data (0 3 0 1 1 2 2 3) fontified t) 29 36 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-string-face) 36 38 (match-data (0 3 0 1 1 2 2 3) fontified t) 38 51 (match-data (0 3 0 1 1 2 2 3) fontified t) 51 60 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-string-face) 60 61 (match-data (0 3 0 1 1 2 2 3) fontified t) 61 62 (fontified t) 62 79 (match-data (0 3 0 1 1 2 2 3) fontified t) 79 82 (match-data (0 3 0 1 1 2 2 3) fontified t) 82 83 (match-data (0 3 0 1 1 2 2 3) fontified t face (rainbow-delimiters-depth-1-face))) . 330) (undo-tree-id1126 . -83) (undo-tree-id1127 . 53) (undo-tree-id1128 . -35) (undo-tree-id1129 . -80) (undo-tree-id1130 . -82) (undo-tree-id1131 . -4) (undo-tree-id1132 . -9) (undo-tree-id1133 . -46) (undo-tree-id1134 . -46) (undo-tree-id1135 . -46) (undo-tree-id1136 . -46) (undo-tree-id1137 . -46) (undo-tree-id1138 . -46) (undo-tree-id1139 . -46) (undo-tree-id1140 . -46) (undo-tree-id1141 . -46) (undo-tree-id1142 . -46) (undo-tree-id1143 . -46) (undo-tree-id1144 . -46) (undo-tree-id1145 . -46) (undo-tree-id1146 . -46) (undo-tree-id1147 . -46) (undo-tree-id1148 . -83) (undo-tree-id1149 . -83) (undo-tree-id1150 . -83) (undo-tree-id1151 . -83) (undo-tree-id1152 . -83) (undo-tree-id1153 . -83) (undo-tree-id1154 . -83) (undo-tree-id1155 . -83) (undo-tree-id1156 . -83) (undo-tree-id1157 . -83) (undo-tree-id1158 . -83) (undo-tree-id1159 . -83) (undo-tree-id1160 . -83) (851 . 855) (#("d" 0 1 (fontified t face py-variable-name-face)) . -851) (undo-tree-id1161 . -1) (undo-tree-id1162 . -1) (undo-tree-id1163 . -1) (undo-tree-id1164 . -1) (undo-tree-id1165 . -1) (undo-tree-id1166 . -1) (undo-tree-id1167 . -1) (undo-tree-id1168 . -1) (undo-tree-id1169 . -1) (undo-tree-id1170 . -1) (undo-tree-id1171 . -1) (undo-tree-id1172 . -1) (undo-tree-id1173 . -1) (undo-tree-id1174 . -1) (undo-tree-id1175 . -1) (undo-tree-id1176 . -1) (undo-tree-id1177 . -1) (undo-tree-id1178 . -1) (undo-tree-id1179 . -1) (undo-tree-id1180 . -1) (undo-tree-id1181 . -1) (undo-tree-id1182 . -1) (undo-tree-id1183 . -1) (undo-tree-id1184 . -1) (undo-tree-id1185 . -1) (undo-tree-id1186 . -1) (undo-tree-id1187 . -1) (undo-tree-id1188 . -1) (undo-tree-id1189 . -1) (undo-tree-id1190 . -1) (undo-tree-id1191 . -1) (undo-tree-id1192 . -1) (undo-tree-id1193 . -1) (undo-tree-id1194 . -1) (undo-tree-id1195 . -1) (undo-tree-id1196 . -1) (undo-tree-id1197 . -1) (undo-tree-id1198 . -1) (undo-tree-id1199 . -1) (undo-tree-id1200 . -1) (undo-tree-id1201 . -1) (undo-tree-id1202 . -1) (undo-tree-id1203 . -1) (undo-tree-id1204 . -1) (undo-tree-id1205 . -1) (undo-tree-id1206 . -1) (undo-tree-id1207 . -1) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) (undo-tree-id1210 . -1) (undo-tree-id1211 . -1) (#("e" 0 1 (fontified t face py-variable-name-face)) . -852) (undo-tree-id1212 . -1) (undo-tree-id1213 . -1) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) (undo-tree-id1216 . -1) (undo-tree-id1217 . -1) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) (undo-tree-id1224 . -1) (undo-tree-id1225 . -1) (undo-tree-id1226 . -1) (undo-tree-id1227 . -1) (undo-tree-id1228 . -1) (undo-tree-id1229 . -1) (undo-tree-id1230 . -1) (undo-tree-id1231 . -1) (undo-tree-id1232 . -1) (undo-tree-id1233 . -1) (undo-tree-id1234 . -1) (undo-tree-id1235 . -1) (undo-tree-id1236 . -1) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1) (undo-tree-id1239 . -1) (undo-tree-id1240 . -1) (undo-tree-id1241 . -1) (undo-tree-id1242 . -1) (undo-tree-id1243 . -1) (undo-tree-id1244 . -1) (undo-tree-id1245 . -1) (undo-tree-id1246 . -1) (undo-tree-id1247 . -1) (undo-tree-id1248 . -1) (undo-tree-id1249 . -1) (undo-tree-id1250 . -1) (undo-tree-id1251 . -1) (undo-tree-id1252 . -1) (undo-tree-id1253 . -1) (undo-tree-id1254 . -1) (undo-tree-id1255 . -1) (undo-tree-id1256 . -1) (undo-tree-id1257 . -1) (undo-tree-id1258 . -1) (undo-tree-id1259 . -1) (#("a" 0 1 (fontified t face py-variable-name-face)) . -853) (undo-tree-id1260 . -1) (undo-tree-id1261 . -1) (undo-tree-id1262 . -1) (undo-tree-id1263 . -1) (undo-tree-id1264 . -1) (undo-tree-id1265 . -1) (undo-tree-id1266 . -1) (undo-tree-id1267 . -1) (undo-tree-id1268 . -1) (undo-tree-id1269 . -1) (undo-tree-id1270 . -1) (undo-tree-id1271 . -1) (undo-tree-id1272 . -1) (undo-tree-id1273 . -1) (undo-tree-id1274 . -1) (undo-tree-id1275 . -1) (undo-tree-id1276 . -1) (undo-tree-id1277 . -1) (undo-tree-id1278 . -1) (undo-tree-id1279 . -1) (undo-tree-id1280 . -1) (undo-tree-id1281 . -1) (undo-tree-id1282 . -1) (undo-tree-id1283 . -1) (undo-tree-id1284 . -1) (undo-tree-id1285 . -1) (undo-tree-id1286 . -1) (undo-tree-id1287 . -1) (undo-tree-id1288 . -1) (undo-tree-id1289 . -1) (undo-tree-id1290 . -1) (undo-tree-id1291 . -1) (undo-tree-id1292 . -1) (undo-tree-id1293 . -1) (undo-tree-id1294 . -1) (undo-tree-id1295 . -1) (undo-tree-id1296 . -1) (undo-tree-id1297 . -1) (undo-tree-id1298 . -1) (undo-tree-id1299 . -1) (undo-tree-id1300 . -1) (undo-tree-id1301 . -1) (undo-tree-id1302 . -1) (undo-tree-id1303 . -1) (undo-tree-id1304 . -1) (#("t" 0 1 (fontified t face py-variable-name-face)) . -854) (undo-tree-id1305 . -1) (undo-tree-id1306 . -1) (undo-tree-id1307 . -1) (undo-tree-id1308 . -1) (undo-tree-id1309 . -1) (undo-tree-id1310 . -1) (undo-tree-id1311 . -1) (undo-tree-id1312 . -1) (undo-tree-id1313 . -1) (undo-tree-id1314 . -1) (undo-tree-id1315 . -1) (undo-tree-id1316 . -1) (undo-tree-id1317 . -1) (undo-tree-id1318 . -1) (undo-tree-id1319 . -1) (undo-tree-id1320 . -1) (undo-tree-id1321 . -1) (undo-tree-id1322 . -1) (undo-tree-id1323 . -1) (undo-tree-id1324 . -1) (undo-tree-id1325 . -1) (undo-tree-id1326 . -1) (undo-tree-id1327 . -1) (undo-tree-id1328 . -1) (undo-tree-id1329 . -1) (undo-tree-id1330 . -1) (undo-tree-id1331 . -1) (undo-tree-id1332 . -1) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) (undo-tree-id1337 . -1) (undo-tree-id1338 . -1) (undo-tree-id1339 . -1) (undo-tree-id1340 . -1) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1) (undo-tree-id1343 . -1) (undo-tree-id1344 . -1) (undo-tree-id1345 . -1) (undo-tree-id1346 . -1) (#("h" 0 1 (fontified t face py-variable-name-face)) . -855) (undo-tree-id1347 . -1) (undo-tree-id1348 . -1) (undo-tree-id1349 . -1) (undo-tree-id1350 . -1) (undo-tree-id1351 . -1) (undo-tree-id1352 . -1) (undo-tree-id1353 . -1) (undo-tree-id1354 . -1) (undo-tree-id1355 . -1) (undo-tree-id1356 . -1) (undo-tree-id1357 . -1) (undo-tree-id1358 . -1) (undo-tree-id1359 . -1) (undo-tree-id1360 . -1) (undo-tree-id1361 . -1) (undo-tree-id1362 . -1) (undo-tree-id1363 . -1) (undo-tree-id1364 . -1) (undo-tree-id1365 . -1) (undo-tree-id1366 . -1) (undo-tree-id1367 . -1) (undo-tree-id1368 . -1) (undo-tree-id1369 . -1) (undo-tree-id1370 . -1) (undo-tree-id1371 . -1) (undo-tree-id1372 . -1) (undo-tree-id1373 . -1) (undo-tree-id1374 . -1) (undo-tree-id1375 . -1) (undo-tree-id1376 . -1) (undo-tree-id1377 . -1) (undo-tree-id1378 . -1) (undo-tree-id1379 . -1) (undo-tree-id1380 . -1) (undo-tree-id1381 . -1) (undo-tree-id1382 . -1) (undo-tree-id1383 . -1) (undo-tree-id1384 . -1) (undo-tree-id1385 . -1) (#("t" 0 1 (fontified t face py-variable-name-face)) . -856) (undo-tree-id1386 . -1) (undo-tree-id1387 . -1) (undo-tree-id1388 . -1) (undo-tree-id1389 . -1) (undo-tree-id1390 . -1) (undo-tree-id1391 . -1) (undo-tree-id1392 . -1) (undo-tree-id1393 . -1) (undo-tree-id1394 . -1) (undo-tree-id1395 . -1) (undo-tree-id1396 . -1) (undo-tree-id1397 . -1) (undo-tree-id1398 . -1) (undo-tree-id1399 . -1) (undo-tree-id1400 . -1) (undo-tree-id1401 . -1) (undo-tree-id1402 . -1) (undo-tree-id1403 . -1) (undo-tree-id1404 . -1) (undo-tree-id1405 . -1) (undo-tree-id1406 . -1) (undo-tree-id1407 . -1) (undo-tree-id1408 . -1) (undo-tree-id1409 . -1) (undo-tree-id1410 . -1) (undo-tree-id1411 . -1) (undo-tree-id1412 . -1) (undo-tree-id1413 . -1) (undo-tree-id1414 . -1) (undo-tree-id1415 . -1) (undo-tree-id1416 . -1) (undo-tree-id1417 . -1) (undo-tree-id1418 . -1) (undo-tree-id1419 . -1) (undo-tree-id1420 . -1) (undo-tree-id1421 . -1) (#("o" 0 1 (fontified t face py-variable-name-face)) . -857) (undo-tree-id1422 . -1) (undo-tree-id1423 . -1) (undo-tree-id1424 . -1) (undo-tree-id1425 . -1) (undo-tree-id1426 . -1) (undo-tree-id1427 . -1) (undo-tree-id1428 . -1) (undo-tree-id1429 . -1) (undo-tree-id1430 . -1) (undo-tree-id1431 . -1) (undo-tree-id1432 . -1) (undo-tree-id1433 . -1) (undo-tree-id1434 . -1) (undo-tree-id1435 . -1) (undo-tree-id1436 . -1) (undo-tree-id1437 . -1) (undo-tree-id1438 . -1) (undo-tree-id1439 . -1) (undo-tree-id1440 . -1) (undo-tree-id1441 . -1) (undo-tree-id1442 . -1) (undo-tree-id1443 . -1) (undo-tree-id1444 . -1) (undo-tree-id1445 . -1) (undo-tree-id1446 . -1) (undo-tree-id1447 . -1) (undo-tree-id1448 . -1) (undo-tree-id1449 . -1) (#("k" 0 1 (fontified t face py-variable-name-face)) . -858) (undo-tree-id1450 . -1) (undo-tree-id1451 . -1) (undo-tree-id1452 . -1) (undo-tree-id1453 . -1) (undo-tree-id1454 . -1) (undo-tree-id1455 . -1) (undo-tree-id1456 . -1) (undo-tree-id1457 . -1) (undo-tree-id1458 . -1) (undo-tree-id1459 . -1) (undo-tree-id1460 . -1) (undo-tree-id1461 . -1) (undo-tree-id1462 . -1) (undo-tree-id1463 . -1) (undo-tree-id1464 . -1) (undo-tree-id1465 . -1) (undo-tree-id1466 . -1) (undo-tree-id1467 . -1) (undo-tree-id1468 . -1) (undo-tree-id1469 . -1) (undo-tree-id1470 . -1) (undo-tree-id1471 . -1) (undo-tree-id1472 . -1) (undo-tree-id1473 . -1) (undo-tree-id1474 . -1) (#("h" 0 1 (fontified t face py-variable-name-face)) . -859) (undo-tree-id1475 . -1) (undo-tree-id1476 . -1) (undo-tree-id1477 . -1) (undo-tree-id1478 . -1) (undo-tree-id1479 . -1) (undo-tree-id1480 . -1) (undo-tree-id1481 . -1) (undo-tree-id1482 . -1) (undo-tree-id1483 . -1) (undo-tree-id1484 . -1) (undo-tree-id1485 . -1) (undo-tree-id1486 . -1) (undo-tree-id1487 . -1) (undo-tree-id1488 . -1) 860 (#("a" 0 1 (fontified t face py-variable-name-face)) . -860) (undo-tree-id1489 . -1) (undo-tree-id1490 . -1) (undo-tree-id1491 . -1) (undo-tree-id1492 . -1) (undo-tree-id1493 . -1) (undo-tree-id1494 . -1) (undo-tree-id1495 . -1) (undo-tree-id1496 . -1) (undo-tree-id1497 . -1) (undo-tree-id1498 . -1) (#("m" 0 1 (fontified t face py-variable-name-face)) . -861) (undo-tree-id1499 . -1) (undo-tree-id1500 . -1) (undo-tree-id1501 . -1) 862 (859 . 862) (881 . 892) (898 . 903) (#("Rogue" 0 2 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-string-face) 2 5 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-string-face)) . -898) (undo-tree-id1502 . -5) (undo-tree-id1503 . -5) (undo-tree-id1504 . -3) (undo-tree-id1505 . -3) (undo-tree-id1506 . -5) (undo-tree-id1507 . -5) (undo-tree-id1508 . -5) (undo-tree-id1509 . -5) (undo-tree-id1510 . -5) (undo-tree-id1511 . -5) (undo-tree-id1512 . -5) (undo-tree-id1513 . -5) (undo-tree-id1514 . -5) (undo-tree-id1515 . -5) 903 (932 . 937) (#("renge" 0 1 (fontified t face py-variable-name-face) 1 5 (fontified t face py-variable-name-face)) . -932) (undo-tree-id1516 . -5) (undo-tree-id1517 . -5) (undo-tree-id1518 . -5) (undo-tree-id1519 . -2) (undo-tree-id1520 . -2) (undo-tree-id1521 . -2) (undo-tree-id1522 . -2) (undo-tree-id1523 . -2) (undo-tree-id1524 . -5) (undo-tree-id1525 . -5) (undo-tree-id1526 . -5) (undo-tree-id1527 . -5) (undo-tree-id1528 . -5) (undo-tree-id1529 . -5) (undo-tree-id1530 . -5) (undo-tree-id1531 . -5) 937 (959 . 970) (#("R" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-string-face)) . -959) (undo-tree-id1532 . -1) (undo-tree-id1533 . -1) (undo-tree-id1534 . -1) (undo-tree-id1535 . -1) (undo-tree-id1536 . -1) (undo-tree-id1537 . -1) (undo-tree-id1538 . -1) (undo-tree-id1539 . -1) (undo-tree-id1540 . -1) (undo-tree-id1541 . -1) (undo-tree-id1542 . -1) (undo-tree-id1543 . -1) (undo-tree-id1544 . -1) (undo-tree-id1545 . -1) (undo-tree-id1546 . -1) (undo-tree-id1547 . -1) (undo-tree-id1548 . -1) (undo-tree-id1549 . -1) (undo-tree-id1550 . -1) (undo-tree-id1551 . -1) (undo-tree-id1552 . -1) (undo-tree-id1553 . -1) (undo-tree-id1554 . -1) (undo-tree-id1555 . -1) (undo-tree-id1556 . -1) (undo-tree-id1557 . -1) (undo-tree-id1558 . -1) (undo-tree-id1559 . -1) (undo-tree-id1560 . -1) (undo-tree-id1561 . -1) (undo-tree-id1562 . -1) (undo-tree-id1563 . -1) (undo-tree-id1564 . -1) (undo-tree-id1565 . -1) (undo-tree-id1566 . -1) (undo-tree-id1567 . -1) (undo-tree-id1568 . -1) (undo-tree-id1569 . -1) (undo-tree-id1570 . -1) (undo-tree-id1571 . -1) (undo-tree-id1572 . -1) (undo-tree-id1573 . -1) (undo-tree-id1574 . -1) (undo-tree-id1575 . -1) (undo-tree-id1576 . -1) (undo-tree-id1577 . -1) (undo-tree-id1578 . -1) (undo-tree-id1579 . -1) (undo-tree-id1580 . -1) (undo-tree-id1581 . -1) (undo-tree-id1582 . -1) (undo-tree-id1583 . -1) (undo-tree-id1584 . -1) (undo-tree-id1585 . -1) (undo-tree-id1586 . -1) (#("e" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-string-face)) . -960) (undo-tree-id1587 . -1) (undo-tree-id1588 . -1) (undo-tree-id1589 . -1) (undo-tree-id1590 . -1) (undo-tree-id1591 . -1) (undo-tree-id1592 . -1) (undo-tree-id1593 . -1) (undo-tree-id1594 . -1) (undo-tree-id1595 . -1) (undo-tree-id1596 . -1) (undo-tree-id1597 . -1) (undo-tree-id1598 . -1) (undo-tree-id1599 . -1) (undo-tree-id1600 . -1) (undo-tree-id1601 . -1) (undo-tree-id1602 . -1) (undo-tree-id1603 . -1) (undo-tree-id1604 . -1) (undo-tree-id1605 . -1) (undo-tree-id1606 . -1) (undo-tree-id1607 . -1) (undo-tree-id1608 . -1) (undo-tree-id1609 . -1) (undo-tree-id1610 . -1) (undo-tree-id1611 . -1) (undo-tree-id1612 . -1) (undo-tree-id1613 . -1) (undo-tree-id1614 . -1) (undo-tree-id1615 . -1) (undo-tree-id1616 . -1) (undo-tree-id1617 . -1) (undo-tree-id1618 . -1) (undo-tree-id1619 . -1) (undo-tree-id1620 . -1) (undo-tree-id1621 . -1) (undo-tree-id1622 . -1) (undo-tree-id1623 . -1) (undo-tree-id1624 . -1) (undo-tree-id1625 . -1) (undo-tree-id1626 . -1) (undo-tree-id1627 . -1) (undo-tree-id1628 . -1) (undo-tree-id1629 . -1) (undo-tree-id1630 . -1) (undo-tree-id1631 . -1) (undo-tree-id1632 . -1) (undo-tree-id1633 . -1) (undo-tree-id1634 . -1) (undo-tree-id1635 . -1) (undo-tree-id1636 . -1) (undo-tree-id1637 . -1) (undo-tree-id1638 . -1) (#("n" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-string-face)) . -961) (undo-tree-id1639 . -1) (undo-tree-id1640 . -1) (undo-tree-id1641 . -1) (undo-tree-id1642 . -1) (undo-tree-id1643 . -1) (undo-tree-id1644 . -1) (undo-tree-id1645 . -1) (undo-tree-id1646 . -1) (undo-tree-id1647 . -1) (undo-tree-id1648 . -1) (undo-tree-id1649 . -1) (undo-tree-id1650 . -1) (undo-tree-id1651 . -1) (undo-tree-id1652 . -1) (undo-tree-id1653 . -1) (undo-tree-id1654 . -1) (undo-tree-id1655 . -1) (undo-tree-id1656 . -1) (undo-tree-id1657 . -1) (undo-tree-id1658 . -1) (undo-tree-id1659 . -1) (undo-tree-id1660 . -1) (undo-tree-id1661 . -1) (undo-tree-id1662 . -1) (undo-tree-id1663 . -1) (undo-tree-id1664 . -1) (undo-tree-id1665 . -1) (undo-tree-id1666 . -1) (undo-tree-id1667 . -1) (undo-tree-id1668 . -1) (undo-tree-id1669 . -1) (undo-tree-id1670 . -1) (undo-tree-id1671 . -1) (undo-tree-id1672 . -1) (undo-tree-id1673 . -1) (undo-tree-id1674 . -1) (undo-tree-id1675 . -1) (undo-tree-id1676 . -1) (undo-tree-id1677 . -1) (undo-tree-id1678 . -1) (undo-tree-id1679 . -1) (undo-tree-id1680 . -1) (undo-tree-id1681 . -1) (undo-tree-id1682 . -1) (undo-tree-id1683 . -1) (undo-tree-id1684 . -1) (undo-tree-id1685 . -1) (undo-tree-id1686 . -1) (undo-tree-id1687 . -1) (undo-tree-id1688 . -1) (#("g" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-string-face)) . -962) (undo-tree-id1689 . -1) (undo-tree-id1690 . -1) (undo-tree-id1691 . -1) (undo-tree-id1692 . -1) (undo-tree-id1693 . -1) (undo-tree-id1694 . -1) (undo-tree-id1695 . -1) (undo-tree-id1696 . -1) (undo-tree-id1697 . -1) (undo-tree-id1698 . -1) (undo-tree-id1699 . -1) (undo-tree-id1700 . -1) (undo-tree-id1701 . -1) (undo-tree-id1702 . -1) (undo-tree-id1703 . -1) (undo-tree-id1704 . -1) (undo-tree-id1705 . -1) (undo-tree-id1706 . -1) (undo-tree-id1707 . -1) (undo-tree-id1708 . -1) (undo-tree-id1709 . -1) (undo-tree-id1710 . -1) (undo-tree-id1711 . -1) (undo-tree-id1712 . -1) (undo-tree-id1713 . -1) (undo-tree-id1714 . -1) (undo-tree-id1715 . -1) (undo-tree-id1716 . -1) (undo-tree-id1717 . -1) (undo-tree-id1718 . -1) (undo-tree-id1719 . -1) (undo-tree-id1720 . -1) (undo-tree-id1721 . -1) (undo-tree-id1722 . -1) (undo-tree-id1723 . -1) (undo-tree-id1724 . -1) (undo-tree-id1725 . -1) (undo-tree-id1726 . -1) (undo-tree-id1727 . -1) (undo-tree-id1728 . -1) (undo-tree-id1729 . -1) (undo-tree-id1730 . -1) (undo-tree-id1731 . -1) (undo-tree-id1732 . -1) (undo-tree-id1733 . -1) (undo-tree-id1734 . -1) (undo-tree-id1735 . -1) (#("e" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-string-face)) . -963) (undo-tree-id1736 . -1) (undo-tree-id1737 . -1) (undo-tree-id1738 . -1) (undo-tree-id1739 . -1) (undo-tree-id1740 . -1) (undo-tree-id1741 . -1) (undo-tree-id1742 . -1) (undo-tree-id1743 . -1) (undo-tree-id1744 . -1) (undo-tree-id1745 . -1) (undo-tree-id1746 . -1) (undo-tree-id1747 . -1) (undo-tree-id1748 . -1) (undo-tree-id1749 . -1) (undo-tree-id1750 . -1) (undo-tree-id1751 . -1) (undo-tree-id1752 . -1) (undo-tree-id1753 . -1) (undo-tree-id1754 . -1) (undo-tree-id1755 . -1) (undo-tree-id1756 . -1) (undo-tree-id1757 . -1) (undo-tree-id1758 . -1) (undo-tree-id1759 . -1) (undo-tree-id1760 . -1) (undo-tree-id1761 . -1) (undo-tree-id1762 . -1) (undo-tree-id1763 . -1) (undo-tree-id1764 . -1) (undo-tree-id1765 . -1) (undo-tree-id1766 . -1) (undo-tree-id1767 . -1) (undo-tree-id1768 . -1) (undo-tree-id1769 . -1) (undo-tree-id1770 . -1) (undo-tree-id1771 . -1) (undo-tree-id1772 . -1) (undo-tree-id1773 . -1) (undo-tree-id1774 . -1) (#("k" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-string-face)) . -964) (undo-tree-id1775 . -1) (undo-tree-id1776 . -1) (undo-tree-id1777 . -1) (undo-tree-id1778 . -1) (undo-tree-id1779 . -1) (undo-tree-id1780 . -1) (undo-tree-id1781 . -1) (undo-tree-id1782 . -1) (undo-tree-id1783 . -1) (undo-tree-id1784 . -1) (undo-tree-id1785 . -1) (undo-tree-id1786 . -1) (undo-tree-id1787 . -1) (undo-tree-id1788 . -1) (undo-tree-id1789 . -1) (undo-tree-id1790 . -1) (undo-tree-id1791 . -1) (undo-tree-id1792 . -1) (undo-tree-id1793 . -1) (undo-tree-id1794 . -1) (undo-tree-id1795 . -1) (undo-tree-id1796 . -1) (undo-tree-id1797 . -1) (undo-tree-id1798 . -1) (undo-tree-id1799 . -1) (undo-tree-id1800 . -1) (undo-tree-id1801 . -1) (undo-tree-id1802 . -1) (undo-tree-id1803 . -1) (undo-tree-id1804 . -1) (undo-tree-id1805 . -1) (undo-tree-id1806 . -1) (undo-tree-id1807 . -1) (undo-tree-id1808 . -1) (undo-tree-id1809 . -1) (undo-tree-id1810 . -1) (#("y" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-string-face)) . -965) (undo-tree-id1811 . -1) (undo-tree-id1812 . -1) (undo-tree-id1813 . -1) (undo-tree-id1814 . -1) (undo-tree-id1815 . -1) (undo-tree-id1816 . -1) (undo-tree-id1817 . -1) (undo-tree-id1818 . -1) (undo-tree-id1819 . -1) (undo-tree-id1820 . -1) (undo-tree-id1821 . -1) (undo-tree-id1822 . -1) (undo-tree-id1823 . -1) (undo-tree-id1824 . -1) (undo-tree-id1825 . -1) (undo-tree-id1826 . -1) (undo-tree-id1827 . -1) (undo-tree-id1828 . -1) (undo-tree-id1829 . -1) (undo-tree-id1830 . -1) (undo-tree-id1831 . -1) (undo-tree-id1832 . -1) (undo-tree-id1833 . -1) (undo-tree-id1834 . -1) (undo-tree-id1835 . -1) (undo-tree-id1836 . -1) (undo-tree-id1837 . -1) (undo-tree-id1838 . -1) (undo-tree-id1839 . -1) (undo-tree-id1840 . -1) (undo-tree-id1841 . -1) (undo-tree-id1842 . -1) (undo-tree-id1843 . -1) (#("o" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-string-face)) . -966) (undo-tree-id1844 . -1) (undo-tree-id1845 . -1) (undo-tree-id1846 . -1) (undo-tree-id1847 . -1) (undo-tree-id1848 . -1) (undo-tree-id1849 . -1) (undo-tree-id1850 . -1) (undo-tree-id1851 . -1) (undo-tree-id1852 . -1) (undo-tree-id1853 . -1) (undo-tree-id1854 . -1) (undo-tree-id1855 . -1) (undo-tree-id1856 . -1) (undo-tree-id1857 . -1) (undo-tree-id1858 . -1) (undo-tree-id1859 . -1) (undo-tree-id1860 . -1) (undo-tree-id1861 . -1) (undo-tree-id1862 . -1) (undo-tree-id1863 . -1) (undo-tree-id1864 . -1) (undo-tree-id1865 . -1) (undo-tree-id1866 . -1) (undo-tree-id1867 . -1) (undo-tree-id1868 . -1) (undo-tree-id1869 . -1) (undo-tree-id1870 . -1) (undo-tree-id1871 . -1) (undo-tree-id1872 . -1) (undo-tree-id1873 . -1) (#("S" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-string-face)) . -967) (undo-tree-id1874 . -1) (undo-tree-id1875 . -1) (undo-tree-id1876 . -1) (undo-tree-id1877 . -1) (undo-tree-id1878 . -1) (undo-tree-id1879 . -1) (undo-tree-id1880 . -1) (undo-tree-id1881 . -1) (undo-tree-id1882 . -1) (#("a" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-string-face)) . -968) (undo-tree-id1883 . -1) (undo-tree-id1884 . -1) (undo-tree-id1885 . -1) (undo-tree-id1886 . -1) 969 (967 . 969) (#("Deathtoken" 0 5 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-string-face) 5 10 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-string-face)) . -881) (undo-tree-id1887 . -10) (undo-tree-id1888 . -10) (undo-tree-id1889 . -4) (undo-tree-id1890 . 10) (undo-tree-id1891 . -10) (undo-tree-id1892 . -4) (undo-tree-id1893 . -4) (undo-tree-id1894 . -4) (undo-tree-id1895 . -4) (undo-tree-id1896 . -10) (undo-tree-id1897 . -10) (undo-tree-id1898 . -10) (undo-tree-id1899 . -10) (undo-tree-id1900 . -10) (undo-tree-id1901 . -10) (undo-tree-id1902 . -10) (undo-tree-id1903 . -10) (undo-tree-id1904 . -10) (undo-tree-id1905 . -10) 891 (755 . 761) (#("m" 0 1 (fontified t face py-variable-name-face)) . -755) (undo-tree-id1906 . -1) (undo-tree-id1907 . -1) (undo-tree-id1908 . -1) (undo-tree-id1909 . -1) (undo-tree-id1910 . -1) (undo-tree-id1911 . -1) (undo-tree-id1912 . -1) (undo-tree-id1913 . -1) (undo-tree-id1914 . -1) (undo-tree-id1915 . -1) (undo-tree-id1916 . -1) (undo-tree-id1917 . -1) (undo-tree-id1918 . -1) (undo-tree-id1919 . -1) (undo-tree-id1920 . -1) (undo-tree-id1921 . -1) (undo-tree-id1922 . -1) (undo-tree-id1923 . -1) (undo-tree-id1924 . -1) (undo-tree-id1925 . -1) (undo-tree-id1926 . -1) (undo-tree-id1927 . -1) (undo-tree-id1928 . -1) (undo-tree-id1929 . -1) (undo-tree-id1930 . -1) (undo-tree-id1931 . -1) (undo-tree-id1932 . -1) (undo-tree-id1933 . -1) (undo-tree-id1934 . -1) (undo-tree-id1935 . -1) (undo-tree-id1936 . -1) (undo-tree-id1937 . -1) (undo-tree-id1938 . -1) (undo-tree-id1939 . -1) (undo-tree-id1940 . -1) (undo-tree-id1941 . -1) (undo-tree-id1942 . -1) (undo-tree-id1943 . -1) (undo-tree-id1944 . -1) (undo-tree-id1945 . -1) (undo-tree-id1946 . -1) (undo-tree-id1947 . -1) (undo-tree-id1948 . -1) (undo-tree-id1949 . -1) (undo-tree-id1950 . -1) (undo-tree-id1951 . -1) (undo-tree-id1952 . -1) (undo-tree-id1953 . -1) (undo-tree-id1954 . -1) (undo-tree-id1955 . -1) (#("i" 0 1 (fontified t face py-variable-name-face)) . -756) (undo-tree-id1956 . -1) (undo-tree-id1957 . -1) (undo-tree-id1958 . -1) (undo-tree-id1959 . -1) (undo-tree-id1960 . -1) (undo-tree-id1961 . -1) (undo-tree-id1962 . -1) (undo-tree-id1963 . -1) (undo-tree-id1964 . -1) (undo-tree-id1965 . -1) (undo-tree-id1966 . -1) (undo-tree-id1967 . -1) (undo-tree-id1968 . -1) (undo-tree-id1969 . -1) (undo-tree-id1970 . -1) (undo-tree-id1971 . -1) (undo-tree-id1972 . -1) (undo-tree-id1973 . -1) (undo-tree-id1974 . -1) (undo-tree-id1975 . -1) (undo-tree-id1976 . -1) (undo-tree-id1977 . -1) (undo-tree-id1978 . -1) (undo-tree-id1979 . -1) (undo-tree-id1980 . -1) (undo-tree-id1981 . -1) (undo-tree-id1982 . -1) (undo-tree-id1983 . -1) (undo-tree-id1984 . -1) (undo-tree-id1985 . -1) (undo-tree-id1986 . -1) (undo-tree-id1987 . -1) (undo-tree-id1988 . -1) (undo-tree-id1989 . -1) (undo-tree-id1990 . -1) (undo-tree-id1991 . -1) (undo-tree-id1992 . -1) (undo-tree-id1993 . -1) (undo-tree-id1994 . -1) (undo-tree-id1995 . -1) (undo-tree-id1996 . -1) (undo-tree-id1997 . -1) (undo-tree-id1998 . -1) (undo-tree-id1999 . -1) (undo-tree-id2000 . -1) (undo-tree-id2001 . -1) (undo-tree-id2002 . -1) (#("l" 0 1 (fontified t face py-variable-name-face)) . -757) (undo-tree-id2003 . -1) (undo-tree-id2004 . -1) (undo-tree-id2005 . -1) (undo-tree-id2006 . -1) (undo-tree-id2007 . -1) (undo-tree-id2008 . -1) (undo-tree-id2009 . -1) (undo-tree-id2010 . -1) (undo-tree-id2011 . -1) (undo-tree-id2012 . -1) (undo-tree-id2013 . -1) (undo-tree-id2014 . -1) (undo-tree-id2015 . -1) (undo-tree-id2016 . -1) (undo-tree-id2017 . -1) (undo-tree-id2018 . -1) (undo-tree-id2019 . -1) (undo-tree-id2020 . -1) (undo-tree-id2021 . -1) (undo-tree-id2022 . -1) (undo-tree-id2023 . -1) (undo-tree-id2024 . -1) (undo-tree-id2025 . -1) (undo-tree-id2026 . -1) (undo-tree-id2027 . -1) (undo-tree-id2028 . -1) (undo-tree-id2029 . -1) (undo-tree-id2030 . -1) (undo-tree-id2031 . -1) (undo-tree-id2032 . -1) (undo-tree-id2033 . -1) (undo-tree-id2034 . -1) (undo-tree-id2035 . -1) (undo-tree-id2036 . -1) (undo-tree-id2037 . -1) (undo-tree-id2038 . -1) (undo-tree-id2039 . -1) (undo-tree-id2040 . -1) (undo-tree-id2041 . -1) (#("a" 0 1 (fontified t face py-variable-name-face)) . -758) (undo-tree-id2042 . -1) (undo-tree-id2043 . -1) (undo-tree-id2044 . -1) (undo-tree-id2045 . -1) (undo-tree-id2046 . -1) (undo-tree-id2047 . -1) (undo-tree-id2048 . -1) (undo-tree-id2049 . -1) (undo-tree-id2050 . -1) (undo-tree-id2051 . -1) (undo-tree-id2052 . -1) (undo-tree-id2053 . -1) (undo-tree-id2054 . -1) (undo-tree-id2055 . -1) (undo-tree-id2056 . -1) (undo-tree-id2057 . -1) (undo-tree-id2058 . -1) (undo-tree-id2059 . -1) (undo-tree-id2060 . -1) (undo-tree-id2061 . -1) (undo-tree-id2062 . -1) (undo-tree-id2063 . -1) (undo-tree-id2064 . -1) (undo-tree-id2065 . -1) (undo-tree-id2066 . -1) (undo-tree-id2067 . -1) (undo-tree-id2068 . -1) (undo-tree-id2069 . -1) (undo-tree-id2070 . -1) (undo-tree-id2071 . -1) (undo-tree-id2072 . -1) (undo-tree-id2073 . -1) (undo-tree-id2074 . -1) (undo-tree-id2075 . -1) (undo-tree-id2076 . -1) (undo-tree-id2077 . -1) (#("b" 0 1 (fontified t face py-variable-name-face)) . -759) (undo-tree-id2078 . -1) (undo-tree-id2079 . -1) (undo-tree-id2080 . -1) (undo-tree-id2081 . -1) (undo-tree-id2082 . -1) (undo-tree-id2083 . -1) (undo-tree-id2084 . -1) (undo-tree-id2085 . -1) (undo-tree-id2086 . -1) (undo-tree-id2087 . -1) (undo-tree-id2088 . -1) (undo-tree-id2089 . -1) (undo-tree-id2090 . -1) (undo-tree-id2091 . -1) (undo-tree-id2092 . -1) (undo-tree-id2093 . -1) (undo-tree-id2094 . -1) (undo-tree-id2095 . -1) (undo-tree-id2096 . -1) (undo-tree-id2097 . -1) (undo-tree-id2098 . -1) (undo-tree-id2099 . -1) (undo-tree-id2100 . -1) (undo-tree-id2101 . -1) (#("l" 0 1 (fontified t face py-variable-name-face)) . -760) (undo-tree-id2102 . -1) (undo-tree-id2103 . -1) (undo-tree-id2104 . -1) (undo-tree-id2105 . -1) (undo-tree-id2106 . -1) (undo-tree-id2107 . -1) (undo-tree-id2108 . -1) (undo-tree-id2109 . -1) (undo-tree-id2110 . -1) (undo-tree-id2111 . -1) (undo-tree-id2112 . -1) (undo-tree-id2113 . -1) (undo-tree-id2114 . -1) (undo-tree-id2115 . -1) (undo-tree-id2116 . -1) (undo-tree-id2117 . -1) (undo-tree-id2118 . -1) (undo-tree-id2119 . -1) (undo-tree-id2120 . -1) (undo-tree-id2121 . -1) (#("a" 0 1 (fontified t face py-variable-name-face)) . -761) (undo-tree-id2122 . -1) (undo-tree-id2123 . -1) (undo-tree-id2124 . -1) (undo-tree-id2125 . -1) (undo-tree-id2126 . -1) (undo-tree-id2127 . -1) (undo-tree-id2128 . -1) (undo-tree-id2129 . -1) (undo-tree-id2130 . -1) (undo-tree-id2131 . -1) (undo-tree-id2132 . -1) (undo-tree-id2133 . -1) (undo-tree-id2134 . -1) (undo-tree-id2135 . -1) (undo-tree-id2136 . -1) (#("c" 0 1 (fontified t face py-variable-name-face)) . -762) (undo-tree-id2137 . -1) (undo-tree-id2138 . -1) (undo-tree-id2139 . -1) (undo-tree-id2140 . -1) (undo-tree-id2141 . -1) (undo-tree-id2142 . -1) (undo-tree-id2143 . -1) (undo-tree-id2144 . -1) (undo-tree-id2145 . -1) (undo-tree-id2146 . -1) (undo-tree-id2147 . -1) (#("k" 0 1 (fontified t face py-variable-name-face)) . -763) (undo-tree-id2148 . -1) (undo-tree-id2149 . -1) (undo-tree-id2150 . -1) (undo-tree-id2151 . -1) (undo-tree-id2152 . -1) (undo-tree-id2153 . -1) (undo-tree-id2154 . -1) (#("y" 0 1 (fontified t face py-variable-name-face)) . -764) (undo-tree-id2155 . -1) (undo-tree-id2156 . -1) (undo-tree-id2157 . -1) 765 (759 . 765) (781 . 791) (#("Milarepa" 0 8 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-string-face)) . -781) (undo-tree-id2158 . -8) (undo-tree-id2159 . -8) (undo-tree-id2160 . -4) (undo-tree-id2161 . 8) (undo-tree-id2162 . -8) (undo-tree-id2163 . -4) (undo-tree-id2164 . -4) (undo-tree-id2165 . -4) (undo-tree-id2166 . -4) (undo-tree-id2167 . -4) (undo-tree-id2168 . -4) (undo-tree-id2169 . -4) (undo-tree-id2170 . -4) (undo-tree-id2171 . -8) (undo-tree-id2172 . -8) (undo-tree-id2173 . -8) (undo-tree-id2174 . -8) (undo-tree-id2175 . -8) (undo-tree-id2176 . -8) (undo-tree-id2177 . -8) (undo-tree-id2178 . -8) (undo-tree-id2179 . -8) (undo-tree-id2180 . -8) 789 (672 . 677) (#("quhzx" 0 2 (fontified t face py-variable-name-face) 2 3 (fontified t face py-variable-name-face) 3 5 (fontified t face py-variable-name-face)) . -672) (undo-tree-id2181 . -5) (undo-tree-id2182 . -5) (undo-tree-id2183 . -5) (undo-tree-id2184 . -5) 677 (698 . 703) (#("Quhzx" 0 5 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-string-face)) . -698) (undo-tree-id2185 . -5) (undo-tree-id2186 . -5) (undo-tree-id2187 . -5) 703 (585 . 592) (#("hunton" 0 6 (fontified t face py-variable-name-face)) . -585) (undo-tree-id2188 . -6) (undo-tree-id2189 . -6) (undo-tree-id2190 . -6) 591 (616 . 619) (#("p" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-string-face)) . -616) (undo-tree-id2191 . -1) 617 (612 . 617) (#("Huntondis" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-string-face) 1 5 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-string-face) 5 9 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-string-face)) . -612) (undo-tree-id2192 . -9) (undo-tree-id2193 . -9) (undo-tree-id2194 . -9) 621 (505 . 509) (#("bouton" 0 6 (match-data (0 3 0 1 1 2 2 3) fontified t face py-variable-name-face)) . -505) (undo-tree-id2195 . -6) (undo-tree-id2196 . -6) (undo-tree-id2197 . -6) 511 (533 . 537) (#("Bouton" 0 6 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-string-face)) . -533) (undo-tree-id2198 . -6) (undo-tree-id2199 . -6) (undo-tree-id2200 . -6) 539 (418 . 424) (#("ohval" 0 5 (match-data (0 3 0 1 1 2 2 3) fontified t face py-variable-name-face)) . -418) (undo-tree-id2201 . -5) (undo-tree-id2202 . -5) (undo-tree-id2203 . -5) 423 (445 . 451) (#("Ohval" 0 5 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-string-face)) . -445) (undo-tree-id2204 . -5) (undo-tree-id2205 . -5) (undo-tree-id2206 . -5) 450 (360 . 365) (#("Balton" 0 6 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-string-face)) . -360) (undo-tree-id2207 . -6) (undo-tree-id2208 . -6) (undo-tree-id2209 . -6) 366 (334 . 339) (#("balton" 0 6 (fontified t face py-variable-name-face)) . -334) (undo-tree-id2210 . -6) (undo-tree-id2211 . -6) (undo-tree-id2212 . -6) 340 (#("
    # print(\"Database seeded!\")" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t) 1 5 (match-data (0 3 0 1 1 2 2 3) fontified t) 5 7 (fontified t face font-lock-comment-face) 7 12 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-comment-face) 12 13 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-comment-face) 13 21 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-comment-face) 21 31 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-comment-face) 31 32 (match-data (0 3 0 1 1 2 2 3) rear-nonsticky t fontified t face font-lock-comment-face)) . 2170) (undo-tree-id2213 . -32) (undo-tree-id2214 . -32) (#("    # db.session.add(balton_spec1)
    

    db.session.commit()" 0 4 (match-data (0 2 0 1 1 2) fontified t) 4 6 (fontified t face font-lock-comment-face) 6 9 (match-data (0 2 0 1 1 2) fontified t face font-lock-comment-face) 9 14 (match-data (0 0) fontified t face font-lock-comment-face) 14 17 (match-data (0 0) fontified t face font-lock-comment-face) 17 20 (match-data (0 0) fontified t face font-lock-comment-face) 20 21 (match-data (0 0) fontified t face font-lock-comment-face) 21 33 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-comment-face) 33 34 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-comment-face) 34 35 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-comment-face) 35 39 (match-data (0 3 0 1 1 2 2 3) fontified t) 39 40 (match-data (0 3 0 1 1 2 2 3) fontified t) 40 41 (match-data (0 3 0 1 1 2 2 3) fontified t) 41 45 (match-data (0 3 0 1 1 2 2 3) fontified t) 45 47 (match-data (0 3 0 1 1 2 2 3) fontified t) 47 48 (match-data (0 3 0 1 1 2 2 3) fontified t) 48 56 (match-data (0 0) fontified t) 56 62 (match-data (0 3 0 1 1 2 2 3) fontified t) 62 63 (match-data (0 3 0 1 1 2 2 3) fontified t face (rainbow-delimiters-depth-1-face)) 63 64 (match-data (0 3 0 1 1 2 2 3) fontified t face (rainbow-delimiters-depth-1-face))) . 2170) (undo-tree-id2215 . -64) (undo-tree-id2216 . -64) (#("
" 0 1 (fontified t)) . -1030) (undo-tree-id2217 . -1) (undo-tree-id2218 . -1) (undo-tree-id2219 . -1) 1031 (#("    db.session.commit()" 0 7 (fontified t) 7 15 (match-data (0 1 0 1) fontified t) 15 21 (match-data (0 2 0 1 1 2) fontified t) 21 22 (match-data (0 2 0 1 1 2) fontified t face (rainbow-delimiters-depth-1-face)) 22 23 (match-data (0 2 0 1 1 2) fontified t face (rainbow-delimiters-depth-1-face))) . 1031) (undo-tree-id2220 . -23) (undo-tree-id2221 . -23) (137 . 156) (132 . 137) (1001 . 1006) (1023 . 1025) (1017 . 1023) (#("co" 0 2 (fontified nil)) . -1017) (1017 . 1019) (#("commit" 0 6 (fontified nil)) . -1017) (1017 . 1023) (#("co" 0 2 (match-data (0 1 0 1) fontified t)) . -1017) (undo-tree-id2222 . -2) 1019 (1016 . 1019) (1009 . 1016) (#("s" 0 1 (fontified nil)) . -1009) (1009 . 1010) (#("session" 0 7 (fontified nil)) . -1009) (1009 . 1016) (#("s" 0 1 (fontified t)) . -1009) (undo-tree-id2223 . -1) 1010 (1006 . 1010) (1001 . 1006) (apply -2 2206 2237 undo--wrap-and-run-primitive-undo 2206 2237 ((2210 . 2212) 2235)) (t 25919 51570 759727 171000)) nil (25919 51782 947181 320000) 0 nil])
([nil nil ((nil rear-nonsticky nil 994 . 995) (nil fontified nil 994 . 995) (nil fontified nil 993 . 994) (nil fontified nil 987 . 993) (nil fontified nil 986 . 987) (nil fontified nil 983 . 986) (nil fontified nil 975 . 983) (nil fontified nil 972 . 975) (nil fontified nil 971 . 972) (nil fontified nil 968 . 971) (968 . 995) (nil rear-nonsticky nil 967 . 968) (nil fontified nil 967 . 968) (nil fontified nil 966 . 967) (nil fontified nil 960 . 966) (nil fontified nil 959 . 960) (nil fontified nil 956 . 959) (nil fontified nil 948 . 956) (nil fontified nil 945 . 948) (nil fontified nil 944 . 945) (nil fontified nil 941 . 944) (941 . 968) (#(" db.session.add(cities)
" 0 1 (fontified nil) 1 4 (fontified nil) 4 12 (match-data (0 0) fontified nil) 12 15 (match-data (0 1 0 1) fontified nil) 15 16 (match-data (0 1 0 1) fontified nil face (rainbow-delimiters-depth-1-face)) 16 22 (match-data (0 2 0 1 1 2) fontified nil) 22 23 (match-data (0 2 0 1 1 2) fontified nil face (rainbow-delimiters-depth-1-face)) 23 24 (fontified nil)) . 941) (undo-tree-id949 . 23) (undo-tree-id950 . -23) (undo-tree-id951 . -23) (undo-tree-id952 . -2) (undo-tree-id953 . -3) (undo-tree-id954 . -3) (undo-tree-id955 . -4) (undo-tree-id956 . -4) (undo-tree-id957 . -11) (undo-tree-id958 . -11) (undo-tree-id959 . -11) (undo-tree-id960 . -11) (undo-tree-id961 . -12) (undo-tree-id962 . -12) (undo-tree-id963 . -12) (undo-tree-id964 . -12) (undo-tree-id965 . -12) (undo-tree-id966 . -12) (undo-tree-id967 . -12) (undo-tree-id968 . -12) (undo-tree-id969 . -12) (undo-tree-id970 . -15) (undo-tree-id971 . -15) (undo-tree-id972 . -15) (undo-tree-id973 . -15) (undo-tree-id974 . -15) (undo-tree-id975 . -15) (undo-tree-id976 . -15) (undo-tree-id977 . -15) (undo-tree-id978 . -15) (undo-tree-id979 . -15) (undo-tree-id980 . -15) (undo-tree-id981 . -15) (undo-tree-id982 . -16) (undo-tree-id983 . -16) (undo-tree-id984 . -16) (undo-tree-id985 . -16) (undo-tree-id986 . -16) (undo-tree-id987 . -16) (undo-tree-id988 . -16) (undo-tree-id989 . -16) (undo-tree-id990 . -16) (undo-tree-id991 . -16) (undo-tree-id992 . -16) (undo-tree-id993 . -16) (undo-tree-id994 . -16) (undo-tree-id995 . -16) (undo-tree-id996 . -16) (undo-tree-id997 . -16) (undo-tree-id998 . -16) (undo-tree-id999 . -16) (undo-tree-id1000 . -16) (undo-tree-id1001 . -16) (undo-tree-id1002 . -16) (undo-tree-id1003 . -16) (undo-tree-id1004 . -16) (undo-tree-id1005 . -16) (undo-tree-id1006 . -22) (undo-tree-id1007 . -22) (undo-tree-id1008 . -22) (undo-tree-id1009 . -22) (undo-tree-id1010 . -22) (undo-tree-id1011 . -22) (undo-tree-id1012 . -22) (undo-tree-id1013 . -22) (undo-tree-id1014 . -23) (undo-tree-id1015 . -23) (undo-tree-id1016 . -23) (undo-tree-id1017 . -23) (undo-tree-id1018 . -23) (undo-tree-id1019 . -23) (undo-tree-id1020 . -23) (undo-tree-id1021 . -23) (undo-tree-id1022 . -23) (undo-tree-id1023 . -23) (undo-tree-id1024 . -24) (undo-tree-id1025 . -23) (undo-tree-id1026 . -23) (undo-tree-id1027 . -23) (undo-tree-id1028 . -23) (undo-tree-id1029 . -23) (undo-tree-id1030 . -23) (undo-tree-id1031 . -23) (undo-tree-id1032 . -23) (undo-tree-id1033 . -23) (undo-tree-id1034 . -23) (undo-tree-id1035 . -23) (undo-tree-id1036 . -23) (undo-tree-id1037 . -1) (undo-tree-id1038 . -1) (undo-tree-id1039 . -1) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) (undo-tree-id1042 . -1) (undo-tree-id1043 . -1) (undo-tree-id1044 . -24) (#("   " 0 3 (fontified t)) . -941) (undo-tree-id1045 . -3) (undo-tree-id1046 . -3) (undo-tree-id1047 . -3) (undo-tree-id1048 . -3) (undo-tree-id1049 . -3) (undo-tree-id1050 . -3) (undo-tree-id1051 . -3) (undo-tree-id1052 . -3) 944) nil (25919 51782 946338 788000) 0 nil])
([nil nil ((nil fontified nil 994 . 995) (nil fontified nil 993 . 994) (nil fontified nil 987 . 993) (nil fontified nil 986 . 987) (nil fontified nil 983 . 986) (nil fontified nil 975 . 983) (nil fontified nil 972 . 975) (nil fontified nil 971 . 972) (nil fontified nil 968 . 971) (968 . 995) (nil fontified nil 967 . 968) (nil fontified nil 966 . 967) (nil fontified nil 960 . 966) (nil fontified nil 959 . 960) (nil fontified nil 956 . 959) (nil fontified nil 948 . 956) (nil fontified nil 945 . 948) (nil fontified nil 944 . 945) (nil fontified nil 941 . 944) (941 . 968) (#("    db.session.add(cities)
" 0 3 (fontified t) 3 4 (fontified t) 4 7 (fontified t) 7 15 (match-data (0 0) fontified t) 15 18 (match-data (0 1 0 1) fontified t) 18 19 (match-data (0 1 0 1) fontified t face (rainbow-delimiters-depth-1-face)) 19 25 (match-data (0 2 0 1 1 2) fontified t) 25 26 (match-data (0 2 0 1 1 2) fontified t face (rainbow-delimiters-depth-1-face)) 26 27 (fontified t rear-nonsticky t)) . 941) (undo-tree-id944 . -27) (undo-tree-id945 . -27) (undo-tree-id946 . -27) (undo-tree-id947 . -27) (undo-tree-id948 . -27)) nil (25919 51782 946295 956000) 0 nil])
([nil nil ((nil fontified nil 1048 . 1049) (nil fontified nil 1047 . 1048) (nil fontified nil 1041 . 1047) (nil fontified nil 1040 . 1041) (nil fontified nil 1037 . 1040) (nil fontified nil 1029 . 1037) (nil fontified nil 1026 . 1029) (nil fontified nil 1025 . 1026) (nil fontified nil 1022 . 1025) (1022 . 1049) (nil fontified nil 1021 . 1022) (nil fontified nil 1020 . 1021) (nil fontified nil 1014 . 1020) (nil fontified nil 1013 . 1014) (nil fontified nil 1010 . 1013) (nil fontified nil 1002 . 1010) (nil fontified nil 999 . 1002) (nil fontified nil 998 . 999) (nil fontified nil 995 . 998) (995 . 1022) (#("    db.session.add(cities)
" 0 3 (fontified t) 3 4 (fontified t) 4 7 (fontified t) 7 15 (match-data (0 0) fontified t) 15 18 (match-data (0 1 0 1) fontified t) 18 19 (match-data (0 1 0 1) fontified t face (rainbow-delimiters-depth-1-face)) 19 25 (match-data (0 2 0 1 1 2) fontified t) 25 26 (match-data (0 2 0 1 1 2) fontified t face (rainbow-delimiters-depth-1-face)) 26 27 (fontified t rear-nonsticky t)) . 995) (undo-tree-id935 . -27) (undo-tree-id936 . -27) (undo-tree-id937 . -27) (undo-tree-id938 . -27) (undo-tree-id939 . -27) (undo-tree-id940 . -27) (undo-tree-id941 . -27) (undo-tree-id942 . -27) (undo-tree-id943 . -27)) nil (25919 51782 946290 719000) 0 nil])
([nil nil ((nil fontified nil 1021 . 1022) (nil fontified nil 1020 . 1021) (nil fontified nil 1014 . 1020) (nil fontified nil 1013 . 1014) (nil fontified nil 1010 . 1013) (nil fontified nil 1002 . 1010) (nil fontified nil 999 . 1002) (nil fontified nil 998 . 999) (nil fontified nil 995 . 998) (995 . 1022) (nil fontified nil 994 . 995) (nil fontified nil 993 . 994) (nil fontified nil 987 . 993) (nil fontified nil 986 . 987) (nil fontified nil 983 . 986) (nil fontified nil 975 . 983) (nil fontified nil 972 . 975) (nil fontified nil 971 . 972) (nil fontified nil 968 . 971) (968 . 995) (#("    db.session.add(cities)
" 0 3 (fontified t) 3 4 (fontified t) 4 7 (fontified t) 7 15 (match-data (0 0) fontified t) 15 18 (match-data (0 1 0 1) fontified t) 18 19 (match-data (0 1 0 1) fontified t face (rainbow-delimiters-depth-1-face)) 19 25 (match-data (0 2 0 1 1 2) fontified t) 25 26 (match-data (0 2 0 1 1 2) fontified t face (rainbow-delimiters-depth-1-face)) 26 27 (rear-nonsticky t fontified t)) . 968) (undo-tree-id918 . -27) (undo-tree-id919 . -27) (undo-tree-id920 . -27) (undo-tree-id921 . -27) (undo-tree-id922 . -27) (undo-tree-id923 . -27) (undo-tree-id924 . -27) (undo-tree-id925 . -27) (undo-tree-id926 . -27) (undo-tree-id927 . -27) (undo-tree-id928 . -27) (undo-tree-id929 . -27) (undo-tree-id930 . -27) (undo-tree-id931 . -27) (undo-tree-id932 . -27) (undo-tree-id933 . -27) (undo-tree-id934 . -27)) nil (25919 51782 946284 535000) 0 nil])
([nil nil ((nil fontified nil 1075 . 1076) (nil fontified nil 1074 . 1075) (nil fontified nil 1068 . 1074) (nil fontified nil 1067 . 1068) (nil fontified nil 1064 . 1067) (nil fontified nil 1056 . 1064) (nil fontified nil 1053 . 1056) (nil fontified nil 1052 . 1053) (nil fontified nil 1049 . 1052) (1049 . 1076) (nil fontified nil 1048 . 1049) (nil fontified nil 1047 . 1048) (nil fontified nil 1041 . 1047) (nil fontified nil 1040 . 1041) (nil fontified nil 1037 . 1040) (nil fontified nil 1029 . 1037) (nil fontified nil 1026 . 1029) (nil fontified nil 1025 . 1026) (nil fontified nil 1022 . 1025) (1022 . 1049) (#("    db.session.add(cities)
" 0 3 (fontified t) 3 4 (fontified t) 4 7 (fontified t) 7 15 (match-data (0 0) fontified t) 15 18 (match-data (0 1 0 1) fontified t) 18 19 (match-data (0 1 0 1) fontified t face (rainbow-delimiters-depth-1-face)) 19 25 (match-data (0 2 0 1 1 2) fontified t) 25 26 (match-data (0 2 0 1 1 2) fontified t face (rainbow-delimiters-depth-1-face)) 26 27 (rear-nonsticky t fontified t)) . 1022) (undo-tree-id913 . -27) (undo-tree-id914 . -27) (undo-tree-id915 . -27) (undo-tree-id916 . -27) (undo-tree-id917 . -27)) nil (25919 51782 946275 311000) 0 nil])
([nil nil ((#("cities" 0 6 (match-data (0 2 0 1 1 2) fontified t)) . 987) (undo-tree-id895 . -5) (undo-tree-id896 . -5) (undo-tree-id897 . -5) (undo-tree-id898 . -5) (undo-tree-id899 . -5) (undo-tree-id900 . -2) (undo-tree-id901 . -2) (undo-tree-id902 . -2) (undo-tree-id903 . -2) (undo-tree-id904 . -6) (undo-tree-id905 . -5) (undo-tree-id906 . -5) (undo-tree-id907 . -5) (undo-tree-id908 . -5) (undo-tree-id909 . -5) (undo-tree-id910 . -6) (undo-tree-id911 . -5) (undo-tree-id912 . -6) 992) nil (25919 51782 946270 286000) 0 nil])
([nil nil ((1019 . 1023) (#("    " 0 4 (fontified t)) . 1019) (undo-tree-id799 . -4) (undo-tree-id800 . -4) (undo-tree-id801 . -4) (undo-tree-id802 . -4) (undo-tree-id803 . -4) (undo-tree-id804 . -4) (undo-tree-id805 . -4) (undo-tree-id806 . -4) (undo-tree-id807 . -4) (undo-tree-id808 . -4) (undo-tree-id809 . -4) 1023 (1019 . 1023) (#("            " 0 12 (fontified t)) . 1019) (undo-tree-id810 . -8) (undo-tree-id811 . -8) (undo-tree-id812 . -12) (undo-tree-id813 . -12) (undo-tree-id814 . -12) (undo-tree-id815 . -12) (undo-tree-id816 . -12) (undo-tree-id817 . -12) (undo-tree-id818 . -12) (undo-tree-id819 . -12) (undo-tree-id820 . -12) (undo-tree-id821 . -12) (undo-tree-id822 . -12) (undo-tree-id823 . -8) (undo-tree-id824 . -8) (undo-tree-id825 . -8) (undo-tree-id826 . -8) (undo-tree-id827 . -8) (undo-tree-id828 . -12) (undo-tree-id829 . -8) (undo-tree-id830 . -8) (undo-tree-id831 . -8) (undo-tree-id832 . -8) (undo-tree-id833 . -8) (undo-tree-id834 . -8) (undo-tree-id835 . -8) (undo-tree-id836 . -8) 1027 (#("        " 0 8 (fontified nil)) . -1031) (undo-tree-id837 . -4) (undo-tree-id838 . -4) (undo-tree-id839 . -4) (undo-tree-id840 . -4) (undo-tree-id841 . -4) (undo-tree-id842 . -4) (undo-tree-id843 . -4) (undo-tree-id844 . -4) (undo-tree-id845 . -4) (undo-tree-id846 . -8) (undo-tree-id847 . -4) (undo-tree-id848 . -4) (undo-tree-id849 . -4) (undo-tree-id850 . -4) (undo-tree-id851 . -4) (undo-tree-id852 . -4) (1019 . 1031) 1023 (#("    " 0 3 (fontified nil) 3 4 (fontified nil)) . -1027) (1019 . 1027) (1012 . 1017) (#("cities" 0 6 (match-data (0 2 0 1 1 2) fontified t)) . -1012) (undo-tree-id853 . -6) (undo-tree-id854 . -6) (undo-tree-id855 . -3) (undo-tree-id856 . -3) (undo-tree-id857 . -6) (undo-tree-id858 . -6) (undo-tree-id859 . -6) (undo-tree-id860 . -6) (undo-tree-id861 . -6) (undo-tree-id862 . -6) (undo-tree-id863 . -6) (undo-tree-id864 . -6) (undo-tree-id865 . -6) (undo-tree-id866 . -6) (undo-tree-id867 . -6) (undo-tree-id868 . -6) (undo-tree-id869 . -6) (undo-tree-id870 . -6) (undo-tree-id871 . -6) 1018 (1039 . 1045) (#("cities" 0 6 (match-data (0 2 0 1 1 2) fontified t)) . -1039) (undo-tree-id872 . -6) (undo-tree-id873 . -6) (undo-tree-id874 . -6) 1045 (1066 . 1070) (#("c" 0 1 (match-data (0 2 0 1 1 2) fontified t)) . -1066) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (#("i" 0 1 (match-data (0 2 0 1 1 2) fontified t)) . -1067) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (#("t" 0 1 (match-data (0 2 0 1 1 2) fontified t)) . -1068) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (#("i" 0 1 (match-data (0 2 0 1 1 2) fontified t)) . -1069) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (#("e" 0 1 (match-data (0 2 0 1 1 2) fontified t)) . -1070) (undo-tree-id883 . -1) (undo-tree-id884 . -1) (#("s" 0 1 (match-data (0 2 0 1 1 2) fontified t)) . -1071) (undo-tree-id885 . -1) (undo-tree-id886 . -1) (#("h" 0 1 (match-data (0 2 0 1 1 2) fontified t)) . -1072) (undo-tree-id887 . -1) (#("a" 0 1 (match-data (0 2 0 1 1 2) fontified t)) . -1073) (undo-tree-id888 . -1) (#("m" 0 1 (match-data (0 2 0 1 1 2) fontified t)) . -1074) (undo-tree-id889 . -1) 1075 (1072 . 1075) (1093 . 1098) (#("cities" 0 6 (match-data (0 2 0 1 1 2) fontified t)) . -1093) (undo-tree-id890 . -6) (undo-tree-id891 . -6) (undo-tree-id892 . -6) 1099 (988 . 991) (#("i" 0 1 (match-data (0 1 0 1) fontified t)) . -988) (undo-tree-id893 . -1) (#("n" 0 1 (match-data (0 1 0 1) fontified t)) . -989) (undo-tree-id894 . -1) 990 (987 . 990)) nil (25919 51782 946254 886000) 0 nil])
([nil nil ((nil fontified nil 1072 . 1073) (nil fontified nil 1071 . 1072) (nil fontified nil 1065 . 1071) (nil fontified nil 1064 . 1065) (nil fontified nil 1061 . 1064) (nil fontified nil 1053 . 1061) (nil fontified nil 1050 . 1053) (nil fontified nil 1049 . 1050) (nil fontified nil 1046 . 1049) (1046 . 1073) (nil fontified nil 1045 . 1046) (nil fontified nil 1044 . 1045) (nil fontified nil 1038 . 1044) (nil fontified nil 1037 . 1038) (nil fontified nil 1034 . 1037) (nil fontified nil 1026 . 1034) (nil fontified nil 1023 . 1026) (nil fontified nil 1022 . 1023) (nil fontified nil 1019 . 1022) (1019 . 1046) (#(" db.session.add(blacky)
" 0 1 (fontified nil) 1 4 (fontified nil) 4 12 (match-data (0 0) fontified nil) 12 15 (match-data (0 1 0 1) fontified nil) 15 16 (match-data (0 1 0 1) fontified nil face (rainbow-delimiters-depth-1-face)) 16 22 (match-data (0 1 0 1) fontified nil) 22 23 (match-data (0 2 0 1 1 2) fontified nil face (rainbow-delimiters-depth-1-face)) 23 24 (rear-nonsticky t fontified nil)) . 1019) (undo-tree-id770 . 23) (undo-tree-id771 . -23) (undo-tree-id772 . -16) (undo-tree-id773 . -19) (undo-tree-id774 . -21) (undo-tree-id775 . -22) (undo-tree-id776 . -22) (undo-tree-id777 . -22) (undo-tree-id778 . -16) (undo-tree-id779 . -24) (undo-tree-id780 . -24) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (undo-tree-id788 . -1) (undo-tree-id789 . -1) (undo-tree-id790 . -24) (#("   " 0 3 (fontified t)) . -1019) (undo-tree-id791 . -3) (undo-tree-id792 . -3) (undo-tree-id793 . -3) (undo-tree-id794 . -3) (undo-tree-id795 . -3) (undo-tree-id796 . -3) (undo-tree-id797 . -3) (undo-tree-id798 . -3) 1022) nil (25919 51782 945492 523000) 0 nil])
([nil nil ((#("blacky" 0 6 (match-data (0 1 0 1) fontified t)) . 1038) (undo-tree-id750 . -5) (undo-tree-id751 . -5) (undo-tree-id752 . -5) (undo-tree-id753 . -5) (undo-tree-id754 . -5) (undo-tree-id755 . -4) (undo-tree-id756 . -4) (undo-tree-id757 . -4) (undo-tree-id758 . -4) (undo-tree-id759 . -6) (undo-tree-id760 . -5) (undo-tree-id761 . -5) (undo-tree-id762 . -5) (undo-tree-id763 . -5) (undo-tree-id764 . -5) (undo-tree-id765 . -6) (undo-tree-id766 . -5) (undo-tree-id767 . -5) (undo-tree-id768 . -5) (undo-tree-id769 . -6) 1043) nil (25919 51782 945478 752000) 0 nil])
([nil nil ((1038 . 1045)) nil (25919 51782 945458 681000) 0 nil])
([nil nil ((6 . 7) (t 25919 51782 939675 26000)) nil (25919 51832 135601 906000) 0 nil])
([nil nil ((2271 . 2275) (#("    " 0 4 (match-data (0 2 0 1 1 2) fontified nil)) . 2270) (undo-tree-id2468 . -4) (undo-tree-id2469 . -4) (undo-tree-id2470 . -4) (undo-tree-id2471 . -4) (undo-tree-id2472 . -4) (undo-tree-id2473 . -4) (undo-tree-id2474 . -4) (undo-tree-id2475 . -4) (undo-tree-id2476 . -4) (undo-tree-id2477 . -4) (2269 . 2275) (t 25919 51832 129663 916000)) nil (25919 51923 425295 289000) 0 nil])
([nil nil ((2275 . 2280)) nil (25919 51923 425290 106000) 0 nil])
([nil nil ((#("b" 0 1 (match-data (0 2 0 1 1 2) fontified t)) . -2275) (undo-tree-id2413 . -1) (undo-tree-id2414 . -1) (undo-tree-id2415 . -1) (undo-tree-id2416 . -1) (undo-tree-id2417 . -1) (undo-tree-id2418 . -1) (undo-tree-id2419 . -1) (undo-tree-id2420 . -1) (undo-tree-id2421 . -1) (undo-tree-id2422 . -1) (undo-tree-id2423 . -1) (undo-tree-id2424 . -1) (undo-tree-id2425 . -1) (undo-tree-id2426 . -1) (undo-tree-id2427 . -1) (#("a" 0 1 (match-data (0 2 0 1 1 2) fontified t)) . -2276) (undo-tree-id2428 . -1) (undo-tree-id2429 . -1) (undo-tree-id2430 . -1) (undo-tree-id2431 . -1) (undo-tree-id2432 . -1) (undo-tree-id2433 . -1) (undo-tree-id2434 . -1) (undo-tree-id2435 . -1) (undo-tree-id2436 . -1) (undo-tree-id2437 . -1) (undo-tree-id2438 . -1) (undo-tree-id2439 . -1) (undo-tree-id2440 . -1) (#("l" 0 1 (match-data (0 2 0 1 1 2) fontified t)) . -2277) (undo-tree-id2441 . -1) (undo-tree-id2442 . -1) (undo-tree-id2443 . -1) (undo-tree-id2444 . -1) (undo-tree-id2445 . -1) (undo-tree-id2446 . -1) (undo-tree-id2447 . -1) (undo-tree-id2448 . -1) (undo-tree-id2449 . -1) (undo-tree-id2450 . -1) (undo-tree-id2451 . -1) (#("t" 0 1 (match-data (0 2 0 1 1 2) fontified t)) . -2278) (undo-tree-id2452 . -1) (undo-tree-id2453 . -1) (undo-tree-id2454 . -1) (undo-tree-id2455 . -1) (undo-tree-id2456 . -1) (undo-tree-id2457 . -1) (undo-tree-id2458 . -1) (undo-tree-id2459 . -1) (undo-tree-id2460 . -1) (#("s" 0 1 (match-data (0 2 0 1 1 2) fontified t)) . -2279) (undo-tree-id2461 . -1) (undo-tree-id2462 . -1) (undo-tree-id2463 . -1) (undo-tree-id2464 . -1) (undo-tree-id2465 . -1) (undo-tree-id2466 . -1) (undo-tree-id2467 . -1) 2280) nil (25919 51923 425287 829000) 0 nil])
([nil nil ((2275 . 2276)) nil (25919 51923 425267 714000) 0 nil])
([nil nil ((2276 . 2283)) nil (25919 51923 425267 192000) 0 nil])
([nil nil ((#("t" 0 1 (match-data (0 2 0 1 1 2) fontified t face font-lock-comment-face)) . -2281) (undo-tree-id2403 . -1) (undo-tree-id2404 . -1) (undo-tree-id2405 . -1) (undo-tree-id2406 . -1) (undo-tree-id2407 . -1) (undo-tree-id2408 . -1) (undo-tree-id2409 . -1) (#("a" 0 1 (match-data (0 2 0 1 1 2) fontified t face font-lock-comment-face)) . -2282) (undo-tree-id2410 . -1) (undo-tree-id2411 . -1) (undo-tree-id2412 . -1) 2283) nil (25919 51923 425266 333000) 0 nil])
([nil nil ((2281 . 2302)) nil (25919 51923 425261 162000) 0 nil])
([nil nil ((2302 . 2307)) nil (25919 51923 425260 681000) 0 nil])
([nil nil ((#(" " 0 1 (match-data (0 2 0 1 1 2) fontified t face font-lock-comment-face)) . 2306) (undo-tree-id2390 . -1) (undo-tree-id2391 . -1) (undo-tree-id2392 . -1) (undo-tree-id2393 . -1) (undo-tree-id2394 . -1) (undo-tree-id2395 . -1) (undo-tree-id2396 . -1) (undo-tree-id2397 . -1) (undo-tree-id2398 . -1) (undo-tree-id2399 . -1) (undo-tree-id2400 . -1) (undo-tree-id2401 . -1) (undo-tree-id2402 . -1) 2307) nil (25919 51923 425259 755000) 0 nil])
([nil nil ((#("a" 0 1 (match-data (0 2 0 1 1 2) fontified t face font-lock-comment-face)) . -2303) (undo-tree-id2330 . -1) (undo-tree-id2331 . -1) (undo-tree-id2332 . -1) (undo-tree-id2333 . -1) (undo-tree-id2334 . -1) (undo-tree-id2335 . -1) (undo-tree-id2336 . -1) (undo-tree-id2337 . -1) (undo-tree-id2338 . -1) (undo-tree-id2339 . -1) (undo-tree-id2340 . -1) (undo-tree-id2341 . -1) (undo-tree-id2342 . -1) (undo-tree-id2343 . -1) (undo-tree-id2344 . -1) (undo-tree-id2345 . -1) (undo-tree-id2346 . -1) (undo-tree-id2347 . -1) (undo-tree-id2348 . -1) (undo-tree-id2349 . -1) (undo-tree-id2350 . -1) (undo-tree-id2351 . -1) (undo-tree-id2352 . -1) (undo-tree-id2353 . -1) (#("n" 0 1 (match-data (0 2 0 1 1 2) fontified t face font-lock-comment-face)) . -2304) (undo-tree-id2354 . -1) (undo-tree-id2355 . -1) (undo-tree-id2356 . -1) (undo-tree-id2357 . -1) (undo-tree-id2358 . -1) (undo-tree-id2359 . -1) (undo-tree-id2360 . -1) (undo-tree-id2361 . -1) (undo-tree-id2362 . -1) (undo-tree-id2363 . -1) (undo-tree-id2364 . -1) (undo-tree-id2365 . -1) (undo-tree-id2366 . -1) (undo-tree-id2367 . -1) (undo-tree-id2368 . -1) (undo-tree-id2369 . -1) (undo-tree-id2370 . -1) (undo-tree-id2371 . -1) (undo-tree-id2372 . -1) (undo-tree-id2373 . -1) (#("d" 0 1 (match-data (0 2 0 1 1 2) fontified t face font-lock-comment-face)) . -2305) (undo-tree-id2374 . -1) (undo-tree-id2375 . -1) (undo-tree-id2376 . -1) (undo-tree-id2377 . -1) (undo-tree-id2378 . -1) (undo-tree-id2379 . -1) (undo-tree-id2380 . -1) (undo-tree-id2381 . -1) (undo-tree-id2382 . -1) (undo-tree-id2383 . -1) (undo-tree-id2384 . -1) (undo-tree-id2385 . -1) (undo-tree-id2386 . -1) (undo-tree-id2387 . -1) (undo-tree-id2388 . -1) (undo-tree-id2389 . -1) 2306) nil (25919 51923 425252 559000) 0 nil])
([nil nil ((#(" " 0 1 (match-data (0 2 0 1 1 2) fontified t face font-lock-comment-face)) . 2302) (undo-tree-id2301 . -1) (undo-tree-id2302 . -1) (undo-tree-id2303 . -1) (undo-tree-id2304 . -1) (undo-tree-id2305 . -1) (undo-tree-id2306 . -1) (undo-tree-id2307 . -1) (undo-tree-id2308 . -1) (undo-tree-id2309 . -1) (undo-tree-id2310 . -1) (undo-tree-id2311 . -1) (undo-tree-id2312 . -1) (undo-tree-id2313 . -1) (undo-tree-id2314 . -1) (undo-tree-id2315 . -1) (undo-tree-id2316 . -1) (undo-tree-id2317 . -1) (undo-tree-id2318 . -1) (undo-tree-id2319 . -1) (undo-tree-id2320 . -1) (undo-tree-id2321 . -1) (undo-tree-id2322 . -1) (undo-tree-id2323 . -1) (undo-tree-id2324 . -1) (undo-tree-id2325 . -1) (undo-tree-id2326 . -1) (undo-tree-id2327 . -1) (undo-tree-id2328 . -1) (undo-tree-id2329 . -1) 2303) nil (25919 51923 425227 898000) 0 nil])
([nil nil ((2302 . 2307)) nil (25919 51923 425213 675000) 0 nil])
([nil nil ((2307 . 2315)) nil (25919 51923 425212 939000) 0 nil])
([nil nil ((#("    balts = " 0 4 (match-data (0 2 0 1 1 2) fontified t) 4 9 (match-data (0 2 0 1 1 2) fontified t face py-variable-name-face) 9 10 (match-data (0 2 0 1 1 2) fontified t) 10 11 (match-data (0 2 0 1 1 2) fontified t face font-lock-operator-face) 11 12 (match-data (0 2 0 1 1 2) fontified t)) . 2303) (undo-tree-id2248 . -12) (undo-tree-id2249 . -4) (undo-tree-id2250 . -4) (undo-tree-id2251 . -4) (undo-tree-id2252 . -4) (undo-tree-id2253 . -4) (undo-tree-id2254 . -4) (undo-tree-id2255 . -4) (undo-tree-id2256 . -4) (undo-tree-id2257 . -4) (undo-tree-id2258 . -4) (undo-tree-id2259 . -4) (undo-tree-id2260 . -4) (undo-tree-id2261 . -4) (undo-tree-id2262 . -4) (undo-tree-id2263 . -5) (undo-tree-id2264 . -5) (undo-tree-id2265 . -5) (undo-tree-id2266 . -6) (undo-tree-id2267 . -6) (undo-tree-id2268 . -6) (undo-tree-id2269 . -6) (undo-tree-id2270 . -7) (undo-tree-id2271 . -7) (undo-tree-id2272 . -8) (undo-tree-id2273 . -9) (undo-tree-id2274 . -10) (undo-tree-id2275 . -10) (undo-tree-id2276 . -10) (undo-tree-id2277 . -10) (undo-tree-id2278 . -10) (undo-tree-id2279 . -10) (undo-tree-id2280 . -11) (undo-tree-id2281 . -12) (undo-tree-id2282 . -12) (undo-tree-id2283 . -12) (undo-tree-id2284 . -12) (undo-tree-id2285 . -12) (undo-tree-id2286 . -12) (undo-tree-id2287 . -12) (undo-tree-id2288 . -12) (undo-tree-id2289 . -12) (undo-tree-id2290 . -12) (undo-tree-id2291 . -12) (undo-tree-id2292 . -12) (undo-tree-id2293 . -12) (undo-tree-id2294 . -12) (undo-tree-id2295 . -4) (undo-tree-id2296 . -9) (undo-tree-id2297 . -12) (undo-tree-id2298 . -12) (undo-tree-id2299 . -12) (undo-tree-id2300 . -12)) nil (25919 51923 425209 537000) 0 nil])
([nil nil ((2303 . 2307)) nil (25919 51923 423112 109000) 0 nil])
([nil nil ((2307 . 2317)) nil (25919 51923 423111 592000) 0 nil])
([nil nil ((#("_" 0 1 (match-data (0 2 0 1 1 2) fontified t)) . -2316) (undo-tree-id2238 . -1) (undo-tree-id2239 . -1) (undo-tree-id2240 . -1) (undo-tree-id2241 . -1) (undo-tree-id2242 . -1) (undo-tree-id2243 . -1) (undo-tree-id2244 . -1) (undo-tree-id2245 . -1) (undo-tree-id2246 . -1) (undo-tree-id2247 . -1) 2317) nil (25919 51923 423110 690000) 0 nil])
([nil nil ((2316 . 2317)) nil (25919 51923 423105 940000) 0 nil])
([nil nil ((2303 . 2309)) nil (25919 51923 423105 447000) 0 nil])
([nil nil ((2303 . 2307) 2309) nil (25919 51923 423104 912000) 0 nil])
([nil nil ((#("    " 0 4 (match-data (0 2 0 1 1 2) fontified nil)) . -2311) (2303 . 2311) 2313) nil (25919 51923 423104 158000) 0 nil])
([nil nil ((#(" " 0 1 (match-data (0 2 0 1 1 2) fontified t)) . 2317) (undo-tree-id2237 . 1)) nil (25919 51923 423103 177000) 0 nil])
([nil nil ((2303 . 2307) (#("        " 0 8 (match-data (0 2 0 1 1 2) fontified t)) . 2303) (undo-tree-id2236 . -8)) nil (25919 51923 423101 975000) 0 nil])
([nil nil ((#(" " 0 1 (match-data (0 2 0 1 1 2) fontified t)) . 2313) (undo-tree-id2224 . -1) (undo-tree-id2225 . -1) (undo-tree-id2226 . -1) (undo-tree-id2227 . -1) (undo-tree-id2228 . -1) (undo-tree-id2229 . -1) (undo-tree-id2230 . -1) (undo-tree-id2231 . -1) (undo-tree-id2232 . -1) (undo-tree-id2233 . 1) (#(" " 0 1 (match-data (0 2 0 1 1 2) fontified t)) . 2313) (undo-tree-id2234 . 1) (#(" " 0 1 (match-data (0 2 0 1 1 2) fontified t)) . 2313) (undo-tree-id2235 . 1)) nil (25919 51923 423098 535000) 0 nil])
([nil nil ((2385 . 2394) (#(", class_name = \"Warrior\", player_id = BALTON.id)" 0 2 (match-data (0 3 0 1 1 2 2 3) fontified t) 2 15 (match-data (0 3 0 1 1 2 2 3) fontified t) 15 24 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-string-face) 24 25 (match-data (0 3 0 1 1 2 2 3) fontified t) 25 26 (fontified t) 26 43 (match-data (0 3 0 1 1 2 2 3) fontified t) 43 47 (match-data (0 3 0 1 1 2 2 3) fontified t) 47 48 (match-data (0 3 0 1 1 2 2 3) fontified t face (rainbow-delimiters-depth-1-face))) . -2385) (undo-tree-id3324 . -48) (undo-tree-id3325 . -48) (undo-tree-id3326 . -48) 2433 (2360 . 2369) (#("fi" 0 2 (fontified nil)) . -2360) (2360 . 2362) (#("filter_by" 0 9 (fontified nil)) . -2360) (2360 . 2369) (#("fil" 0 3 (match-data (0 1 0 1) fontified t)) . -2360) (undo-tree-id3327 . -3) (undo-tree-id3328 . -3) 2363 (2359 . 2363) (2354 . 2359) (#("q" 0 1 (fontified nil)) . -2354) (2354 . 2355) (#("query" 0 5 (fontified nil)) . -2354) (2354 . 2359) (#("q" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t)) . -2354) (undo-tree-id3329 . -1) 2355 (2353 . 2355) (nil fontified nil 3033 . 3034) (nil fontified nil 3029 . 3033) (nil fontified nil 3012 . 3029) (nil fontified nil 3011 . 3012) (nil fontified nil 3010 . 3011) (nil fontified nil 3004 . 3010) (nil fontified nil 3002 . 3004) (nil fontified nil 2989 . 3002) (nil fontified nil 2987 . 2989) (nil fontified nil 2980 . 2987) (nil fontified nil 2977 . 2980) (nil fontified nil 2970 . 2977) (nil fontified nil 2969 . 2970) (nil fontified nil 2960 . 2969) (nil fontified nil 2959 . 2960) (nil fontified nil 2958 . 2959) (nil fontified nil 2957 . 2958) (nil fontified nil 2956 . 2957) (nil fontified nil 2952 . 2956) (nil fontified nil 2951 . 2952) (nil fontified nil 2947 . 2951) (nil fontified nil 2946 . 2947) (nil fontified nil 2945 . 2946) (nil fontified nil 2941 . 2945) (nil fontified nil 2924 . 2941) (nil fontified nil 2923 . 2924) (nil fontified nil 2922 . 2923) (nil fontified nil 2918 . 2922) (nil fontified nil 2915 . 2918) (nil fontified nil 2902 . 2915) (nil fontified nil 2900 . 2902) (nil fontified nil 2894 . 2900) (nil fontified nil 2888 . 2894) (nil fontified nil 2881 . 2888) (nil fontified nil 2880 . 2881) (nil fontified nil 2871 . 2880) (nil fontified nil 2870 . 2871) (nil fontified nil 2869 . 2870) (nil fontified nil 2868 . 2869) (nil fontified nil 2867 . 2868) (nil fontified nil 2859 . 2867) (nil fontified nil 2855 . 2859) (nil fontified nil 2854 . 2855) (nil fontified nil 2853 . 2854) (nil fontified nil 2849 . 2853) (nil fontified nil 2832 . 2849) (nil fontified nil 2831 . 2832) (nil fontified nil 2830 . 2831) (nil fontified nil 2826 . 2830) (nil fontified nil 2816 . 2826) (nil fontified nil 2812 . 2816) (nil fontified nil 2807 . 2812) (nil fontified nil 2803 . 2807) (nil fontified nil 2801 . 2803) (nil fontified nil 2798 . 2801) (nil fontified nil 2791 . 2798) (nil fontified nil 2785 . 2791) (nil fontified nil 2784 . 2785) (nil fontified nil 2783 . 2784) (nil fontified nil 2774 . 2783) (nil fontified nil 2773 . 2774) (nil fontified nil 2772 . 2773) (nil fontified nil 2771 . 2772) (nil fontified nil 2770 . 2771) (nil fontified nil 2766 . 2770) (nil fontified nil 2762 . 2766) (nil fontified nil 2761 . 2762) (nil fontified nil 2760 . 2761) (nil fontified nil 2756 . 2760) (nil fontified nil 2742 . 2756) (nil fontified nil 2739 . 2742) (nil fontified nil 2738 . 2739) (nil fontified nil 2737 . 2738) (nil fontified nil 2729 . 2737) (nil fontified nil 2716 . 2729) (nil fontified nil 2714 . 2716) (nil fontified nil 2707 . 2714) (nil fontified nil 2700 . 2707) (nil fontified nil 2699 . 2700) (nil fontified nil 2698 . 2699) (nil fontified nil 2690 . 2698) (nil fontified nil 2689 . 2690) (nil fontified nil 2688 . 2689) (nil fontified nil 2687 . 2688) (nil fontified nil 2685 . 2687) (nil fontified nil 2684 . 2685) (nil fontified nil 2682 . 2684) (nil fontified nil 2678 . 2682) (nil fontified nil 2677 . 2678) (nil fontified nil 2676 . 2677) (nil fontified nil 2673 . 2676) (nil fontified nil 2672 . 2673) (nil fontified nil 2655 . 2672) (nil fontified nil 2654 . 2655) (nil fontified nil 2653 . 2654) (nil fontified nil 2645 . 2653) (nil fontified nil 2632 . 2645) (nil fontified nil 2630 . 2632) (nil fontified nil 2625 . 2630) (nil fontified nil 2621 . 2625) (nil fontified nil 2619 . 2621) (nil fontified nil 2614 . 2619) (nil fontified nil 2612 . 2614) (nil fontified nil 2611 . 2612) (nil fontified nil 2609 . 2611) (nil fontified nil 2608 . 2609) (nil fontified nil 2607 . 2608) (nil fontified nil 2603 . 2607) (nil fontified nil 2602 . 2603) (nil fontified nil 2601 . 2602) (nil fontified nil 2600 . 2601) (nil fontified nil 2599 . 2600) (nil fontified nil 2593 . 2599) (nil fontified nil 2590 . 2593) (nil fontified nil 2589 . 2590) (nil fontified nil 2588 . 2589) (nil fontified nil 2587 . 2588) (nil fontified nil 2583 . 2587) (nil fontified nil 2566 . 2583) (nil fontified nil 2565 . 2566) (nil fontified nil 2564 . 2565) (nil fontified nil 2559 . 2564) (nil fontified nil 2558 . 2559) (nil fontified nil 2547 . 2558) (nil fontified nil 2545 . 2547) (nil fontified nil 2543 . 2545) (nil fontified nil 2535 . 2543) (nil fontified nil 2531 . 2535) (nil fontified nil 2528 . 2531) (nil fontified nil 2527 . 2528) (nil fontified nil 2526 . 2527) (nil fontified nil 2522 . 2526) (nil fontified nil 2519 . 2522) (nil fontified nil 2518 . 2519) (nil fontified nil 2517 . 2518) (nil fontified nil 2516 . 2517) (nil fontified nil 2515 . 2516) (nil fontified nil 2514 . 2515) (nil fontified nil 2508 . 2514) (nil fontified nil 2504 . 2508) (nil fontified nil 2503 . 2504) (nil fontified nil 2502 . 2503) (nil fontified nil 2501 . 2502) (nil fontified nil 2498 . 2501) (nil fontified nil 2484 . 2498) (nil fontified nil 2481 . 2484) (nil fontified nil 2480 . 2481) (nil fontified nil 2479 . 2480) (nil fontified nil 2477 . 2479) (nil fontified nil 2470 . 2477) (nil fontified nil 2469 . 2470) (nil fontified nil 2468 . 2469) (nil fontified nil 2465 . 2468) (nil fontified nil 2459 . 2465) (nil fontified nil 2457 . 2459) (nil fontified nil 2455 . 2457) (nil fontified nil 2449 . 2455) (nil fontified nil 2448 . 2449) (nil fontified nil 2441 . 2448) (nil fontified nil 2440 . 2441) (nil fontified nil 2434 . 2440) (nil fontified nil 2431 . 2434) (nil fontified nil 2430 . 2431) (nil fontified nil 2429 . 2430) (nil fontified nil 2428 . 2429) (nil fontified nil 2427 . 2428) (nil fontified nil 2422 . 2427) (nil fontified nil 2418 . 2422) (nil fontified nil 2417 . 2418) (nil fontified nil 2416 . 2417) (nil fontified nil 2412 . 2416) (nil fontified nil 2395 . 2412) (nil fontified nil 2394 . 2395) (nil fontified nil 2393 . 2394) (nil fontified nil 2384 . 2393) (nil fontified nil 2371 . 2384) (nil fontified nil 2369 . 2371) (nil fontified nil 2361 . 2369) (nil fontified nil 2354 . 2361) (nil fontified nil 2353 . 2354) (nil fontified nil 2344 . 2353) (nil fontified nil 2343 . 2344) (nil fontified nil 2342 . 2343) (nil fontified nil 2341 . 2342) (nil fontified nil 2339 . 2341) (nil fontified nil 2335 . 2339) (nil fontified nil 2331 . 2335) (nil fontified nil 2330 . 2331) (nil fontified nil 2307 . 2330) (2307 . 3034) (#("print(balton.id)" 0 5 (match-data (0 2 0 1 1 2) fontified t face py-builtins-face) 5 6 (match-data (0 2 0 1 1 2) fontified t face (rainbow-delimiters-depth-1-face)) 6 15 (match-data (0 2 0 1 1 2) fontified t) 15 16 (match-data (0 2 0 1 1 2) fontified t face (rainbow-delimiters-depth-1-face))) . 2307) (undo-tree-id3330 . -16) (undo-tree-id3331 . -16) (undo-tree-id3332 . -16) (t 25919 51923 419640 913000)) nil (25919 52463 694721 496000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2458 . 2459) (nil fontified nil 2458 . 2459) (nil fontified nil 2457 . 2458) (nil fontified nil 2456 . 2457) (nil fontified nil 2450 . 2456) (nil fontified nil 2449 . 2450) (nil fontified nil 2441 . 2449) (nil fontified nil 2434 . 2441) (nil fontified nil 2433 . 2434) (nil fontified nil 2424 . 2433) (nil fontified nil 2418 . 2424) (nil fontified nil 2408 . 2418) (nil fontified nil 2407 . 2408) (nil fontified nil 2406 . 2407) (nil fontified nil 2405 . 2406) (nil fontified nil 2403 . 2405) (nil fontified nil 2399 . 2403) (nil fontified nil 2395 . 2399) (2395 . 2459) (nil rear-nonsticky nil 2394 . 2395) (nil fontified nil 2394 . 2395) (nil fontified nil 2393 . 2394) (nil fontified nil 2392 . 2393) (nil fontified nil 2386 . 2392) (nil fontified nil 2385 . 2386) (nil fontified nil 2377 . 2385) (nil fontified nil 2370 . 2377) (nil fontified nil 2369 . 2370) (nil fontified nil 2360 . 2369) (nil fontified nil 2354 . 2360) (nil fontified nil 2344 . 2354) (nil fontified nil 2343 . 2344) (nil fontified nil 2342 . 2343) (nil fontified nil 2341 . 2342) (nil fontified nil 2339 . 2341) (nil fontified nil 2335 . 2339) (nil fontified nil 2331 . 2335) (2331 . 2395) (#(")
" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face (rainbow-delimiters-depth-1-face)) 1 2 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 2331) (undo-tree-id3319 . 1) (undo-tree-id3320 . -1) (#("    balton = Character.query.filter_by(name = \"Balton\").first(" 0 4 (fontified t) 4 8 (fontified t face py-variable-name-face) 8 10 (fontified t face py-variable-name-face) 10 11 (fontified t) 11 12 (fontified t face font-lock-operator-face) 12 13 (fontified t) 13 23 (match-data (0 3 0 1 1 2 2 3) fontified t) 23 29 (match-data (0 1 0 1) fontified t) 29 38 (match-data (0 3 0 1 1 2 2 3) fontified t) 38 39 (match-data (0 3 0 1 1 2 2 3) fontified t face (rainbow-delimiters-depth-1-face)) 39 46 (match-data (0 3 0 1 1 2 2 3) fontified t) 46 54 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-string-face) 54 55 (match-data (0 3 0 1 1 2 2 3) fontified t face (rainbow-delimiters-depth-1-face)) 55 61 (match-data (0 3 0 1 1 2 2 3) fontified t) 61 62 (match-data (0 3 0 1 1 2 2 3) fontified t face (rainbow-delimiters-depth-1-face))) . -2331) (undo-tree-id3321 . -62) (undo-tree-id3322 . -62) (undo-tree-id3323 . -54) 2393) nil (25919 52463 694697 714000) 0 nil])
([nil nil ((#("balton = Character.query.filter_by(name = \"Balton\").first()
" 0 4 (fontified t face py-variable-name-face) 4 6 (fontified t face py-variable-name-face) 6 7 (fontified t) 7 8 (fontified t face font-lock-operator-face) 8 9 (fontified t) 9 19 (match-data (0 3 0 1 1 2 2 3) fontified t) 19 25 (match-data (0 1 0 1) fontified t) 25 34 (match-data (0 3 0 1 1 2 2 3) fontified t) 34 35 (match-data (0 3 0 1 1 2 2 3) fontified t face (rainbow-delimiters-depth-1-face)) 35 42 (match-data (0 3 0 1 1 2 2 3) fontified t) 42 50 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-string-face) 50 51 (match-data (0 3 0 1 1 2 2 3) fontified t face (rainbow-delimiters-depth-1-face)) 51 57 (match-data (0 3 0 1 1 2 2 3) fontified t) 57 58 (match-data (0 3 0 1 1 2 2 3) fontified t face (rainbow-delimiters-depth-1-face)) 58 59 (match-data (0 3 0 1 1 2 2 3) fontified t face (rainbow-delimiters-depth-1-face)) 59 60 (match-data (0 3 0 1 1 2 2 3) fontified t rear-nonsticky t)) . -2399) (undo-tree-id3315 . -59) (undo-tree-id3316 . -59) (undo-tree-id3317 . -59) (undo-tree-id3318 . -59) 2459) nil (25919 52463 694691 566000) 0 nil])
([nil nil ((2395 . 2399) (#("        " 0 4 (fontified t) 4 8 (match-data (0 3 0 1 1 2 2 3) fontified t)) . 2395) (undo-tree-id3307 . -4) (undo-tree-id3308 . -4) (undo-tree-id3309 . -4) (undo-tree-id3310 . 4) (undo-tree-id3311 . -4) (undo-tree-id3312 . 3) (undo-tree-id3313 . -4) (undo-tree-id3314 . -4) 2399) nil (25919 52463 694688 630000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2433 . 2434) (nil fontified nil 2433 . 2434) (nil fontified nil 2424 . 2433) (nil fontified nil 2418 . 2424) (nil fontified nil 2417 . 2418) (2417 . 2434)) nil (25919 52463 694685 202000) 0 nil])
([nil nil ((#("(" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t rear-nonsticky t face (rainbow-delimiters-depth-1-face))) . 2433)) nil (25919 52463 694684 74000) 0 nil])
([nil nil ((2466 . 2470) (2460 . 2466) (#("bal" 0 3 (fontified nil)) . -2460) (2460 . 2463) (#("balton" 0 6 (fontified nil)) . -2460) (2460 . 2466) (#("bal" 0 3 (fontified t)) . -2460) (undo-tree-id3263 . -3) (undo-tree-id3264 . -3) 2463 (2461 . 2463) (2460 . 2461) (2447 . 2460) (#("ch" 0 2 (fontified nil)) . -2447) (2447 . 2449) (#("character_id=" 0 13 (fontified nil)) . -2447) (2447 . 2460) (#("ch" 0 2 (fontified t)) . -2447) (undo-tree-id3265 . -2) (undo-tree-id3266 . -2) 2449 (2441 . 2449) (2431 . 2441) (#("gea" 0 3 (fontified nil)) . -2431) (2431 . 2434) (#("gearscore=" 0 10 (fontified nil)) . -2431) (2431 . 2441) (#("gea" 0 3 (fontified t)) . -2431) (undo-tree-id3267 . -3) (undo-tree-id3268 . -3) 2434 (2423 . 2434) (2415 . 2423) (#("rol" 0 3 (fontified nil)) . -2415) (2415 . 2418) (#("role_id=" 0 8 (fontified nil)) . -2415) (2415 . 2423) (#("rol" 0 3 (match-data (0 2 0 1 1 2) fontified t)) . -2415) (undo-tree-id3269 . -3) (undo-tree-id3270 . -3) 2418 (2416 . 2418) (2395 . 2416) (2381 . 2395) (#("Sp" 0 2 (fontified nil)) . -2381) (2381 . 2383) (#("Specialization" 0 14 (fontified nil)) . -2381) (2381 . 2395) (#("Sp" 0 2 (match-data (0 3 0 1 1 2 2 3) fontified t)) . -2381) (undo-tree-id3271 . -2) 2383 (2371 . 2383) (2366 . 2371) (#("
" 0 1 (match-data (0 2 0 1 1 2) fontified t face font-lock-comment-face)) . -2302) (undo-tree-id3272 . -1) (undo-tree-id3273 . -1) (undo-tree-id3274 . -1) 2303 (#("    # Add Balton Characters" 0 4 (match-data (0 2 0 1 1 2) fontified t) 4 27 (fontified t face font-lock-comment-face)) . 2303) (undo-tree-id3275 . -27) (undo-tree-id3276 . -27) (nil rear-nonsticky nil 2852 . 2853) (nil fontified nil 2852 . 2853) (nil fontified nil 2851 . 2852) (nil fontified nil 2845 . 2851) (nil fontified nil 2844 . 2845) (2844 . 2853) (#(", class_name = \"Priest\", player_id = BALTON.id)
" 0 2 (match-data (0 3 0 1 1 2 2 3) fontified t) 2 15 (match-data (0 3 0 1 1 2 2 3) fontified t) 15 17 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-string-face) 17 22 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-string-face) 22 23 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-string-face) 23 24 (match-data (0 3 0 1 1 2 2 3) fontified t) 24 25 (fontified t) 25 42 (match-data (0 3 0 1 1 2 2 3) fontified t) 42 46 (match-data (0 3 0 1 1 2 2 3) fontified t) 46 47 (rear-nonsticky t match-data (0 3 0 1 1 2 2 3) fontified t face (rainbow-delimiters-depth-1-face)) 47 48 (match-data (0 2 0 1 1 2) fontified t)) . -2844) (undo-tree-id3277 . -48) (undo-tree-id3278 . -48) (undo-tree-id3279 . -48) 2892 (nil rear-nonsticky nil 2786 . 2787) (nil fontified nil 2786 . 2787) (nil fontified nil 2785 . 2786) (nil fontified nil 2779 . 2785) (nil fontified nil 2778 . 2779) (2778 . 2787) (#(", class_name = \"Rogue\", player_id = BALTON.id)" 0 2 (match-data (0 3 0 1 1 2 2 3) fontified t) 2 15 (match-data (0 3 0 1 1 2 2 3) fontified t) 15 18 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-string-face) 18 22 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-string-face) 22 23 (match-data (0 3 0 1 1 2 2 3) fontified t) 23 24 (fontified t) 24 41 (match-data (0 3 0 1 1 2 2 3) fontified t) 41 45 (match-data (0 3 0 1 1 2 2 3) fontified t) 45 46 (rear-nonsticky t match-data (0 3 0 1 1 2 2 3) fontified t face (rainbow-delimiters-depth-1-face))) . -2778) (undo-tree-id3280 . -46) (undo-tree-id3281 . -46) (undo-tree-id3282 . -46) 2824 (nil rear-nonsticky nil 2715 . 2716) (nil fontified nil 2715 . 2716) (nil fontified nil 2714 . 2715) (nil fontified nil 2708 . 2714) (nil fontified nil 2707 . 2708) (2707 . 2716) (#(", class_name = \"Death Knight\", player_id = BALTON.id)" 0 2 (match-data (0 3 0 1 1 2 2 3) fontified t) 2 6 (match-data (0 3 0 1 1 2 2 3) fontified t) 6 11 (match-data (0 3 0 1 1 2 2 3) fontified t) 11 15 (match-data (0 3 0 1 1 2 2 3) fontified t) 15 25 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-string-face) 25 29 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-string-face) 29 30 (match-data (0 3 0 1 1 2 2 3) fontified t) 30 31 (fontified t) 31 48 (match-data (0 3 0 1 1 2 2 3) fontified t) 48 52 (match-data (0 3 0 1 1 2 2 3) fontified t) 52 53 (match-data (0 3 0 1 1 2 2 3) rear-nonsticky t fontified t face (rainbow-delimiters-depth-1-face))) . 2707) (undo-tree-id3283 . -53) (undo-tree-id3284 . -53) (nil rear-nonsticky nil 2650 . 2651) (nil fontified nil 2650 . 2651) (nil fontified nil 2649 . 2650) (nil fontified nil 2643 . 2649) (nil fontified nil 2642 . 2643) (2642 . 2651) (#(", class_name = \"Shaman\", player_id = BALTON.id)" 0 2 (match-data (0 3 0 1 1 2 2 3) fontified t) 2 15 (match-data (0 3 0 1 1 2 2 3) fontified t) 15 23 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-string-face) 23 24 (match-data (0 3 0 1 1 2 2 3) fontified t) 24 25 (fontified t) 25 28 (match-data (0 3 0 1 1 2 2 3) fontified t) 28 42 (match-data (0 3 0 1 1 2 2 3) fontified t) 42 46 (match-data (0 3 0 1 1 2 2 3) fontified t) 46 47 (match-data (0 3 0 1 1 2 2 3) rear-nonsticky t fontified t face (rainbow-delimiters-depth-1-face))) . -2642) (undo-tree-id3285 . -47) (undo-tree-id3286 . -47) (undo-tree-id3287 . -47) 2689 (nil rear-nonsticky nil 2588 . 2589) (nil fontified nil 2588 . 2589) (nil fontified nil 2587 . 2588) (nil fontified nil 2581 . 2587) (nil fontified nil 2580 . 2581) (2580 . 2589) (#(", class_name = \"Hunter\", player_id = BALTON.id)" 0 2 (match-data (0 3 0 1 1 2 2 3) fontified t) 2 15 (match-data (0 3 0 1 1 2 2 3) fontified t) 15 23 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-string-face) 23 24 (match-data (0 3 0 1 1 2 2 3) fontified t) 24 25 (fontified t) 25 42 (match-data (0 3 0 1 1 2 2 3) fontified t) 42 43 (match-data (0 3 0 1 1 2 2 3) fontified t) 43 46 (match-data (0 3 0 1 1 2 2 3) fontified t) 46 47 (match-data (0 3 0 1 1 2 2 3) rear-nonsticky t fontified t face (rainbow-delimiters-depth-1-face))) . -2580) (undo-tree-id3288 . -47) (undo-tree-id3289 . -47) (undo-tree-id3290 . -47) 2627 (nil rear-nonsticky nil 2521 . 2522) (nil fontified nil 2521 . 2522) (nil fontified nil 2520 . 2521) (nil fontified nil 2514 . 2520) (nil fontified nil 2513 . 2514) (2513 . 2522) (#(", class_name = \"Mage\", player_id = BALTON.id)" 0 2 (match-data (0 3 0 1 1 2 2 3) fontified t) 2 4 (match-data (0 3 0 1 1 2 2 3) fontified t) 4 15 (match-data (0 3 0 1 1 2 2 3) fontified t) 15 16 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-string-face) 16 21 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-string-face) 21 22 (match-data (0 3 0 1 1 2 2 3) fontified t) 22 23 (fontified t) 23 40 (match-data (0 3 0 1 1 2 2 3) fontified t) 40 44 (match-data (0 3 0 1 1 2 2 3) fontified t) 44 45 (match-data (0 3 0 1 1 2 2 3) rear-nonsticky t fontified t face (rainbow-delimiters-depth-1-face))) . -2513) (undo-tree-id3291 . -45) (undo-tree-id3292 . -45) (undo-tree-id3293 . -45) 2558 (nil rear-nonsticky nil 2456 . 2457) (nil fontified nil 2456 . 2457) (nil fontified nil 2455 . 2456) (nil fontified nil 2449 . 2455) (nil fontified nil 2448 . 2449) (2448 . 2457) (#(", class_name = \"Paladin\", player_id = BALTON.id)" 0 2 (match-data (0 3 0 1 1 2 2 3) fontified t) 2 4 (match-data (0 3 0 1 1 2 2 3) fontified t) 4 10 (match-data (0 3 0 1 1 2 2 3) fontified t) 10 13 (match-data (0 3 0 1 1 2 2 3) fontified t) 13 14 (match-data (0 3 0 1 1 2 2 3) fontified t) 14 15 (match-data (0 3 0 1 1 2 2 3) fontified t) 15 22 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-string-face) 22 24 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-string-face) 24 25 (match-data (0 3 0 1 1 2 2 3) fontified t) 25 26 (fontified t) 26 29 (match-data (0 3 0 1 1 2 2 3) fontified t) 29 43 (match-data (0 3 0 1 1 2 2 3) fontified t) 43 46 (match-data (0 3 0 1 1 2 2 3) fontified t) 46 47 (match-data (0 3 0 1 1 2 2 3) fontified t) 47 48 (match-data (0 3 0 1 1 2 2 3) rear-nonsticky t fontified t face (rainbow-delimiters-depth-1-face))) . -2448) (undo-tree-id3294 . -48) (undo-tree-id3295 . -48) (undo-tree-id3296 . -48) 2496 (nil rear-nonsticky nil 3057 . 3058) (nil fontified nil 3049 . 3058) (nil fontified nil 3043 . 3049) (nil fontified nil 3042 . 3043) (3042 . 3058) (nil rear-nonsticky nil 2952 . 2953) (nil fontified nil 2944 . 2953) (nil fontified nil 2938 . 2944) (nil fontified nil 2937 . 2938) (2937 . 2953) (nil rear-nonsticky nil 2839 . 2840) (nil fontified nil 2831 . 2840) (nil fontified nil 2825 . 2831) (nil fontified nil 2824 . 2825) (2824 . 2840) (nil rear-nonsticky nil 2739 . 2740) (nil fontified nil 2731 . 2740) (nil fontified nil 2725 . 2731) (nil fontified nil 2724 . 2725) (2724 . 2740) (2627 . 2636) (#("filter_" 0 7 (fontified nil)) . -2627) (2627 . 2634) (#("filter_by" 0 9 (fontified nil)) . -2627) (2627 . 2636) (#("filter_" 0 7 (match-data (0 2 0 1 1 2) fontified t)) . -2627) (undo-tree-id3297 . -7) (undo-tree-id3298 . -7) 2634 (2633 . 2634) (#("l" 0 1 (match-data (0 1 0 1) fontified t)) . 2633) (#(")" 0 1 (match-data (0 2 0 1 1 2) fontified t face (rainbow-delimiters-unmatched-face))) . -2633) (undo-tree-id3299 . -1) (undo-tree-id3300 . -1) 2634 (2633 . 2634) (2627 . 2633) (#("fi" 0 2 (fontified nil)) . -2627) (2627 . 2629) (#("filter" 0 6 (fontified nil)) . -2627) (2627 . 2633) (#("fi" 0 2 (match-data (0 1 0 1) fontified t)) . -2627) (undo-tree-id3301 . -2) (undo-tree-id3302 . -2) 2629 (2626 . 2630) (2621 . 2626) (#("q" 0 1 (fontified nil)) . -2621) (2621 . 2622) (#("query" 0 5 (fontified nil)) . -2621) (2621 . 2626) (#("q" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t)) . -2621) (undo-tree-id3303 . -1) 2622 (2620 . 2622) (2527 . 2536) (#("fi" 0 2 (fontified nil)) . -2527) (2527 . 2529) (#("filter_by" 0 9 (fontified nil)) . -2527) (2527 . 2536) (#("filter" 0 6 (match-data (0 3 0 1 1 2 2 3) fontified t)) . -2527) (undo-tree-id3304 . -6) 2533 (2520 . 2533) (#("(" 0 1 (match-data (0 3 0 1 1 2 2 3) rear-nonsticky t fontified t face (rainbow-delimiters-depth-1-face))) . -2520) (undo-tree-id3305 . -1) (undo-tree-id3306 . -1) 2521 (nil fontified nil 2520 . 2521) (2520 . 2521)) nil (25919 52463 694675 164000) 0 nil])
([nil nil ((nil fontified nil 2574 . 2575) (nil fontified nil 2573 . 2574) (nil fontified nil 2564 . 2573) (nil fontified nil 2551 . 2564) (nil fontified nil 2549 . 2551) (nil fontified nil 2545 . 2549) (nil fontified nil 2535 . 2545) (nil fontified nil 2533 . 2535) (nil fontified nil 2527 . 2533) (nil fontified nil 2519 . 2527) (nil fontified nil 2517 . 2519) (nil fontified nil 2505 . 2517) (nil fontified nil 2500 . 2505) (nil fontified nil 2499 . 2500) (nil fontified nil 2485 . 2499) (nil fontified nil 2484 . 2485) (nil fontified nil 2483 . 2484) (nil fontified nil 2482 . 2483) (nil fontified nil 2475 . 2482) (nil fontified nil 2471 . 2475) (2471 . 2575) (nil fontified nil 2470 . 2471) (nil fontified nil 2469 . 2470) (nil fontified nil 2460 . 2469) (nil fontified nil 2447 . 2460) (nil fontified nil 2445 . 2447) (nil fontified nil 2441 . 2445) (nil fontified nil 2431 . 2441) (nil fontified nil 2429 . 2431) (nil fontified nil 2423 . 2429) (nil fontified nil 2415 . 2423) (nil fontified nil 2413 . 2415) (nil fontified nil 2401 . 2413) (nil fontified nil 2396 . 2401) (nil fontified nil 2395 . 2396) (nil fontified nil 2381 . 2395) (nil fontified nil 2380 . 2381) (nil fontified nil 2379 . 2380) (nil fontified nil 2378 . 2379) (nil fontified nil 2371 . 2378) (nil fontified nil 2367 . 2371) (2367 . 2471) (#("    balt_s1 = Specialization(name=\"Protection\", role_id=\"Tank\", gearscore=5145, character_id=balton.id)
" 0 4 (match-data (0 3 0 1 1 2 2 3) fontified t) 4 11 (match-data (0 3 0 1 1 2 2 3) fontified t face py-variable-name-face) 11 12 (match-data (0 3 0 1 1 2 2 3) fontified t) 12 13 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-operator-face) 13 14 (match-data (0 3 0 1 1 2 2 3) fontified t) 14 28 (match-data (0 2 0 1 1 2) fontified t) 28 29 (match-data (0 2 0 1 1 2) fontified t face (rainbow-delimiters-depth-1-face)) 29 34 (match-data (0 2 0 1 1 2) fontified t) 34 46 (match-data (0 2 0 1 1 2) fontified t face font-lock-string-face) 46 48 (match-data (0 2 0 1 1 2) fontified t) 48 56 (fontified t) 56 62 (fontified t face font-lock-string-face) 62 64 (fontified t) 64 74 (fontified t) 74 78 (fontified t face py-number-face) 78 80 (fontified t) 80 93 (fontified t) 93 102 (match-data (0 3 0 1 1 2 2 3) fontified t) 102 103 (match-data (0 3 0 1 1 2 2 3) fontified t face (rainbow-delimiters-depth-1-face)) 103 104 (match-data (0 3 0 1 1 2 2 3) rear-nonsticky t fontified t)) . 2367) (undo-tree-id3259 . -103) (undo-tree-id3260 . 104) (undo-tree-id3261 . -103) (undo-tree-id3262 . -103)) nil (25919 52463 694643 41000) 0 nil])
([nil nil ((2481 . 2482) (#("1" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t face py-variable-name-face)) . 2481)) nil (25919 52463 694637 26000) 0 nil])
([nil nil ((#("Protection" 0 10 (match-data (0 2 0 1 1 2) fontified t face font-lock-string-face)) . 2506) (undo-tree-id3257 . -6) (undo-tree-id3258 . -9)) nil (25919 52463 694636 266000) 0 nil])
([nil nil ((3025 . 3031) (#("ohval" 0 5 (fontified t)) . -3025) (undo-tree-id3211 . -5) (undo-tree-id3212 . -5) (undo-tree-id3213 . -5) 3030 (3009 . 3010) (#("9" 0 1 (fontified t face py-number-face)) . 3009) (3007 . 3008) (#("8" 0 1 (fontified t face py-number-face)) . 3007) (2987 . 2993) (#("Heals" 0 5 (fontified t face font-lock-string-face)) . -2987) (undo-tree-id3214 . -5) (undo-tree-id3215 . -5) (undo-tree-id3216 . -5) 2992 (2971 . 2975) (#("Holy" 0 4 (match-data (0 2 0 1 1 2) fontified t face font-lock-string-face)) . -2971) (undo-tree-id3217 . -4) (undo-tree-id3218 . -4) (undo-tree-id3219 . -4) 2975 (nil fontified nil 3142 . 3143) (nil fontified nil 3141 . 3142) (nil fontified nil 3138 . 3141) (nil fontified nil 3120 . 3138) (nil fontified nil 3118 . 3120) (nil fontified nil 3114 . 3118) (nil fontified nil 3104 . 3114) (nil fontified nil 3102 . 3104) (nil fontified nil 3095 . 3102) (nil fontified nil 3087 . 3095) (nil fontified nil 3085 . 3087) (nil fontified nil 3072 . 3085) (nil fontified nil 3067 . 3072) (nil fontified nil 3066 . 3067) (nil fontified nil 3052 . 3066) (nil fontified nil 3051 . 3052) (nil fontified nil 3045 . 3051) (nil fontified nil 3035 . 3045) (nil fontified nil 3034 . 3035) (nil fontified nil 3033 . 3034) (nil fontified nil 3032 . 3033) (nil fontified nil 3029 . 3032) (nil fontified nil 3011 . 3029) (nil fontified nil 3009 . 3011) (nil fontified nil 3005 . 3009) (nil fontified nil 2995 . 3005) (nil fontified nil 2993 . 2995) (nil fontified nil 2986 . 2993) (nil fontified nil 2978 . 2986) (nil fontified nil 2976 . 2978) (nil fontified nil 2970 . 2976) (nil fontified nil 2965 . 2970) (nil fontified nil 2964 . 2965) (nil fontified nil 2950 . 2964) (nil fontified nil 2949 . 2950) (nil fontified nil 2943 . 2949) (nil fontified nil 2937 . 2943) (2937 . 3143) (2932 . 2937) (2797 . 2808) (#("Fury" 0 4 (match-data (0 2 0 1 1 2) fontified t face font-lock-string-face)) . -2797) (undo-tree-id3220 . -4) (undo-tree-id3221 . -4) (undo-tree-id3222 . -4) 2801 (2831 . 2835) (#("4875" 0 4 (fontified t face py-number-face)) . -2831) (undo-tree-id3223 . -4) (undo-tree-id3224 . -4) (undo-tree-id3225 . -4) 2835 (2850 . 2855) (#("balton" 0 6 (match-data (0 3 0 1 1 2 2 3) fontified t)) . -2850) (undo-tree-id3226 . -6) (undo-tree-id3227 . -6) (undo-tree-id3228 . -6) 2856 (2748 . 2753) (#("h" 0 1 (fontified t)) . -2748) (undo-tree-id3229 . -1) 2749 (2748 . 2749) (#("balton" 0 6 (match-data (0 3 0 1 1 2 2 3) fontified t)) . -2748) (undo-tree-id3230 . -6) (undo-tree-id3231 . -6) (undo-tree-id3232 . -6) 2754 (2730 . 2733) (2729 . 2730) (#("5145" 0 4 (fontified t face py-number-face)) . -2729) (undo-tree-id3233 . -4) (undo-tree-id3234 . -4) (undo-tree-id3235 . -4) 2733 (2715 . 2716) (#("e" 0 1 (fontified t face font-lock-string-face)) . -2715) (undo-tree-id3236 . -1) 2716 (2711 . 2716) (#("Tank" 0 4 (fontified t face font-lock-string-face)) . -2711) (undo-tree-id3237 . -4) (undo-tree-id3238 . -4) (undo-tree-id3239 . -4) 2715 (2695 . 2699) (#("Protection" 0 10 (match-data (0 2 0 1 1 2) fontified t face font-lock-string-face)) . -2695) (undo-tree-id3240 . -10) (undo-tree-id3241 . -10) (undo-tree-id3242 . -10) 2705 (nil rear-nonsticky nil 2866 . 2867) (nil fontified nil 2866 . 2867) (nil fontified nil 2865 . 2866) (nil fontified nil 2856 . 2865) (nil fontified nil 2843 . 2856) (nil fontified nil 2841 . 2843) (nil fontified nil 2837 . 2841) (nil fontified nil 2827 . 2837) (nil fontified nil 2825 . 2827) (nil fontified nil 2818 . 2825) (nil fontified nil 2810 . 2818) (nil fontified nil 2808 . 2810) (nil fontified nil 2802 . 2808) (nil fontified nil 2797 . 2802) (nil fontified nil 2796 . 2797) (nil fontified nil 2782 . 2796) (nil fontified nil 2781 . 2782) (nil fontified nil 2775 . 2781) (nil fontified nil 2765 . 2775) (nil fontified nil 2764 . 2765) (nil fontified nil 2763 . 2764) (nil fontified nil 2762 . 2763) (nil fontified nil 2753 . 2762) (nil fontified nil 2740 . 2753) (nil fontified nil 2738 . 2740) (nil fontified nil 2734 . 2738) (nil fontified nil 2724 . 2734) (nil fontified nil 2722 . 2724) (nil fontified nil 2716 . 2722) (nil fontified nil 2708 . 2716) (nil fontified nil 2706 . 2708) (nil fontified nil 2694 . 2706) (nil fontified nil 2689 . 2694) (nil fontified nil 2688 . 2689) (nil fontified nil 2674 . 2688) (nil fontified nil 2673 . 2674) (nil fontified nil 2667 . 2673) (nil fontified nil 2661 . 2667) (2661 . 2867) (2656 . 2661) (#("    db.session.add" 0 7 (match-data (0 3 0 1 1 2 2 3) fontified t) 7 15 (match-data (0 1 0 1) fontified t) 15 18 (match-data (0 1 0 1) fontified t)) . 2593) (undo-tree-id3243 . -18) (undo-tree-id3244 . -17) (undo-tree-id3245 . -18) (2506 . 2507) (2500 . 2506) (#("ap" 0 2 (fontified nil)) . -2500) (2500 . 2502) (#("append" 0 6 (fontified nil)) . -2500) (2500 . 2506) (#("ap" 0 2 (match-data (0 3 0 1 1 2 2 3) fontified t)) . -2500) (undo-tree-id3246 . -2) 2502 (2494 . 2502) (#(" " 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t)) . 2494) (#("=" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t)) . 2494) (#(" " 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t)) . 2494) (#("2" 0 1 (fontified t face py-number-face)) . 2494) (#("s" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t face py-variable-name-face)) . 2494) (#("_" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t face py-variable-name-face)) . 2494) (#("t" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t face py-variable-name-face)) . 2494) (#("l" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t face py-variable-name-face)) . 2494) (#("a" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t face py-variable-name-face)) . 2494) (#("b" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t face py-variable-name-face)) . 2494) (2588 . 2589) (#("_" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t face py-builtins-face)) . -2489) (undo-tree-id3247 . -1) (undo-tree-id3248 . -1) 2490 (2488 . 2490) (#(" " 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t)) . 2399) (2398 . 2399) (2392 . 2398) (#("a" 0 1 (fontified nil)) . -2392) (2392 . 2393) (#("append" 0 6 (fontified nil)) . -2392) (2392 . 2398) (#("a" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t)) . -2392) (undo-tree-id3249 . -1) 2393 (2386 . 2393) (#("balt_s1 =" 0 7 (match-data (0 3 0 1 1 2 2 3) fontified t face py-variable-name-face) 7 8 (match-data (0 3 0 1 1 2 2 3) fontified t) 8 9 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-operator-face)) . 2386) (undo-tree-id3250 . -9) (undo-tree-id3251 . -9) (2307 . 2317) (2302 . 2307) (2585 . 2588) (#("a" 0 1 (fontified nil)) . -2585) (2585 . 2586) (#("add" 0 3 (fontified nil)) . -2585) (2585 . 2588) (#("a" 0 1 (match-data (0 1 0 1) fontified t)) . -2585) (undo-tree-id3252 . -1) 2586 (2584 . 2586) (2577 . 2584) (#("s" 0 1 (fontified nil)) . -2577) (2577 . 2578) (#("session" 0 7 (fontified nil)) . -2577) (2577 . 2584) (#("s" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t)) . -2577) (undo-tree-id3253 . -1) 2578 (2574 . 2578) (2569 . 2574) (2540 . 2544) (#("r" 0 1 (fontified t)) . -2540) (undo-tree-id3254 . -1) 2541 (2540 . 2541) (#("5" 0 1 (fontified t face py-number-face)) . 2540) (#("4" 0 1 (fontified t face py-number-face)) . 2540) (#("1" 0 1 (fontified t face py-number-face)) . 2540) (#("5" 0 1 (fontified t face py-number-face)) . -2540) (undo-tree-id3255 . -1) (undo-tree-id3256 . -1) 2541 (2522 . 2527) (#("k" 0 1 (fontified t face font-lock-string-face)) . 2522) (#("n" 0 1 (fontified t face font-lock-string-face)) . 2522) (#("a" 0 1 (fontified t face font-lock-string-face)) . 2522) (#("T" 0 1 (fontified t face font-lock-string-face)) . 2522) (2506 . 2510)) nil (25919 52463 694624 484000) 0 nil])
([nil nil ((#("    specs.append(Specialization(name=\"Retribution\", role_id=\"Melee\", gearscore=5154, character_id=ohval.id))
" 0 10 (match-data (0 3 0 1 1 2 2 3) fontified t) 10 16 (match-data (0 2 0 1 1 2) fontified t) 16 17 (match-data (0 2 0 1 1 2) fontified t face (rainbow-delimiters-depth-1-face)) 17 31 (match-data (0 2 0 1 1 2) fontified t) 31 32 (match-data (0 2 0 1 1 2) fontified t face (rainbow-delimiters-depth-2-face)) 32 37 (match-data (0 2 0 1 1 2) fontified t) 37 50 (match-data (0 2 0 1 1 2) fontified t face font-lock-string-face) 50 52 (match-data (0 2 0 1 1 2) fontified t) 52 60 (fontified t) 60 67 (fontified t face font-lock-string-face) 67 69 (fontified t) 69 79 (fontified t) 79 83 (fontified t face py-number-face) 83 85 (fontified t) 85 103 (fontified t) 103 106 (match-data (0 3 0 1 1 2 2 3) fontified t) 106 107 (match-data (0 3 0 1 1 2 2 3) fontified t face (rainbow-delimiters-depth-2-face)) 107 108 (match-data (0 3 0 1 1 2 2 3) rear-nonsticky t fontified t face (rainbow-delimiters-depth-1-face)) 108 109 (fontified t)) . 3037) (undo-tree-id3207 . -26) (undo-tree-id3208 . -26) (undo-tree-id3209 . 109) (undo-tree-id3210 . -108) 3063) nil (25919 52463 694586 732000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3107 . 3108) (#("
" 0 1 (fontified nil)) . -3212) (3103 . 3213) 3102) nil (25919 52463 694584 589000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3216 . 3217) (#("
" 0 1 (fontified nil)) . -3321) (3212 . 3322) 3108) nil (25919 52463 694583 725000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3387 . 3388) (#("
" 0 1 (fontified nil)) . -3492) (3383 . 3493) 3326) nil (25919 52463 694582 799000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3496 . 3497) (#("
" 0 1 (fontified nil)) . -3601) (3492 . 3602) 3388) nil (25919 52463 694581 919000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3670 . 3671) (#("
" 0 1 (fontified nil)) . -3775) (3666 . 3776) 3606) nil (25919 52463 694581 45000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3779 . 3780) (#("
" 0 1 (fontified nil)) . -3884) (3775 . 3885) 3671) nil (25919 52463 694580 216000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3959 . 3960) (#("
" 0 1 (fontified nil)) . -4064) (3955 . 4065) 3889) nil (25919 52463 694579 297000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4068 . 4069) (#("
" 0 1 (fontified nil)) . -4173) (4064 . 4174) 3960) nil (25919 52463 694578 372000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4243 . 4244) (#("
" 0 1 (fontified nil)) . -4348) (4239 . 4349) 4178) nil (25919 52463 694577 422000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4352 . 4353) (#("
" 0 1 (fontified nil)) . -4457) (4348 . 4458) 4244) nil (25919 52463 694576 555000) 0 nil])
([nil nil ((2611 . 2617) (2610 . 2611) (2606 . 2610) (2323 . 2330) (2322 . 2323) (2317 . 2322) 2316) nil (25919 52463 694575 634000) 0 nil])
([nil nil ((2897 . 2904) (2896 . 2897) (2891 . 2896) 2793) nil (25919 52463 694574 567000) 0 nil])
([nil nil ((3079 . 3089) (3078 . 3079) (3073 . 3078) 2981) nil (25919 52463 694573 711000) 0 nil])
([nil nil ((3380 . 3386) (3379 . 3380) (#("@" 0 1 (fontified t)) . -3379) (undo-tree-id3205 . -1) (undo-tree-id3206 . -1) 3380 (3379 . 3380) (3374 . 3379) 3280) nil (25919 52463 694572 530000) 0 nil])
([nil nil ((3672 . 3681) (3671 . 3672) (3667 . 3671) (#("       " 0 7 (fontified t)) . -3667) (undo-tree-id3162 . -7) (undo-tree-id3163 . -7) (undo-tree-id3164 . -4) (undo-tree-id3165 . -4) (undo-tree-id3166 . -4) (undo-tree-id3167 . -4) (undo-tree-id3168 . -4) (undo-tree-id3169 . -4) (undo-tree-id3170 . -4) (undo-tree-id3171 . -4) (undo-tree-id3172 . -4) (undo-tree-id3173 . -4) (undo-tree-id3174 . -7) (undo-tree-id3175 . -7) (undo-tree-id3176 . -7) (undo-tree-id3177 . -7) (undo-tree-id3178 . -7) (undo-tree-id3179 . -7) (undo-tree-id3180 . -7) (undo-tree-id3181 . -7) (undo-tree-id3182 . -7) (undo-tree-id3183 . -7) (undo-tree-id3184 . -7) (undo-tree-id3185 . -7) (undo-tree-id3186 . -7) (undo-tree-id3187 . -7) (undo-tree-id3188 . -7) (undo-tree-id3189 . -7) (undo-tree-id3190 . -7) (undo-tree-id3191 . -7) (undo-tree-id3192 . -7) (undo-tree-id3193 . -7) (undo-tree-id3194 . -7) (undo-tree-id3195 . -7) (undo-tree-id3196 . -7) (undo-tree-id3197 . -7) 3674 (#("i" 0 1 (fontified t)) . -3674) (undo-tree-id3198 . -1) (undo-tree-id3199 . -1) (undo-tree-id3200 . -1) (undo-tree-id3201 . -1) (undo-tree-id3202 . -1) (undo-tree-id3203 . -1) (undo-tree-id3204 . -1) 3675 (3674 . 3675) (3671 . 3674) (3666 . 3671) 3568) nil (25919 52463 694569 139000) 0 nil])
([nil nil ((3970 . 3981) (3969 . 3970) (3964 . 3969) 3869) nil (25919 52463 694548 690000) 0 nil])
([nil nil ((#("k" 0 1 (fontified t face font-lock-comment-face)) . -4285) (undo-tree-id3146 . -1) (undo-tree-id3147 . -1) (undo-tree-id3148 . -1) (undo-tree-id3149 . -1) (undo-tree-id3150 . -1) (undo-tree-id3151 . -1) (undo-tree-id3152 . -1) (undo-tree-id3153 . -1) (undo-tree-id3154 . -1) (undo-tree-id3155 . -1) (undo-tree-id3156 . -1) (undo-tree-id3157 . -1) (undo-tree-id3158 . -1) (#("k" 0 1 (fontified t face font-lock-comment-face)) . -4286) (undo-tree-id3159 . -1) (undo-tree-id3160 . -1) (undo-tree-id3161 . -1) 4287 (4283 . 4287) (4276 . 4283) (4275 . 4276) (4270 . 4275) 4177) nil (25919 52463 694546 890000) 0 nil])
([nil nil ((#("    specs.append(Specialization(name=\"Retribution\", role_id=\"Melee\", gearscore=5154, character_id=ohval.id))
" 0 3 (match-data (0 3 0 1 1 2 2 3) fontified t) 3 4 (match-data (0 3 0 1 1 2 2 3) rear-nonsticky t fontified t) 4 10 (match-data (0 3 0 1 1 2 2 3) fontified t) 10 16 (match-data (0 2 0 1 1 2) fontified t) 16 17 (match-data (0 2 0 1 1 2) fontified t face (rainbow-delimiters-depth-1-face)) 17 31 (match-data (0 2 0 1 1 2) fontified t) 31 32 (match-data (0 2 0 1 1 2) fontified t face (rainbow-delimiters-depth-2-face)) 32 37 (match-data (0 2 0 1 1 2) fontified t) 37 50 (match-data (0 2 0 1 1 2) fontified t face font-lock-string-face) 50 52 (match-data (0 2 0 1 1 2) fontified t) 52 60 (fontified t) 60 67 (fontified t face font-lock-string-face) 67 69 (fontified t) 69 79 (fontified t) 79 83 (fontified t face py-number-face) 83 85 (fontified t) 85 103 (fontified t) 103 106 (match-data (0 3 0 1 1 2 2 3) fontified t) 106 107 (match-data (0 3 0 1 1 2 2 3) fontified t face (rainbow-delimiters-depth-2-face)) 107 108 (rear-nonsticky t match-data (0 3 0 1 1 2 2 3) fontified t face (rainbow-delimiters-depth-1-face)) 108 109 (fontified t)) . 3266) (undo-tree-id3126 . -13) (undo-tree-id3127 . -13) (undo-tree-id3128 . -108) (undo-tree-id3129 . -104) (undo-tree-id3130 . -106) (undo-tree-id3131 . -13) (undo-tree-id3132 . -13) (undo-tree-id3133 . -13) (undo-tree-id3134 . -13) (undo-tree-id3135 . -13) (undo-tree-id3136 . -13) (undo-tree-id3137 . -13) (undo-tree-id3138 . -10) (undo-tree-id3139 . -16) (undo-tree-id3140 . -13) (undo-tree-id3141 . -13) (undo-tree-id3142 . -13) (undo-tree-id3143 . -13) (undo-tree-id3144 . -13) (undo-tree-id3145 . -109) 3279) nil (25919 52463 694537 441000) 0 nil])
([nil nil ((#("Retribution" 0 11 (match-data (0 2 0 1 1 2) fontified t face font-lock-string-face)) . 3195) (undo-tree-id3124 . -10) (undo-tree-id3125 . -11)) nil (25919 52463 694528 259000) 0 nil])
([nil nil ((3195 . 3203)) nil (25919 52463 694526 652000) 0 nil])
([nil nil ((#("elee" 0 4 (fontified t face font-lock-string-face)) . 3216) (undo-tree-id3122 . -3) (undo-tree-id3123 . -4)) nil (25919 52463 694525 929000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t face font-lock-string-face)) . -3221) (undo-tree-id3097 . -1) (undo-tree-id3098 . -1) (undo-tree-id3099 . -1) (undo-tree-id3100 . -1) (undo-tree-id3101 . -1) 3222 (3215 . 3222) (#("M" 0 1 (fontified t face font-lock-string-face)) . -3215) (undo-tree-id3102 . -1) (undo-tree-id3103 . -1) (undo-tree-id3104 . -1) (undo-tree-id3105 . -1) (undo-tree-id3106 . -1) (undo-tree-id3107 . -1) (undo-tree-id3108 . -1) (undo-tree-id3109 . -1) (undo-tree-id3110 . -1) (undo-tree-id3111 . -1) (undo-tree-id3112 . -1) (undo-tree-id3113 . -1) (undo-tree-id3114 . -1) (undo-tree-id3115 . -1) (undo-tree-id3116 . -1) (undo-tree-id3117 . -1) (undo-tree-id3118 . -1) (undo-tree-id3119 . -1) (undo-tree-id3120 . -1) (undo-tree-id3121 . -1) 3216) nil (25919 52463 694523 943000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -3253) (undo-tree-id3061 . -1) (undo-tree-id3062 . -1) (undo-tree-id3063 . -1) (undo-tree-id3064 . -1) (undo-tree-id3065 . -1) (undo-tree-id3066 . -1) (undo-tree-id3067 . -1) (undo-tree-id3068 . -1) (undo-tree-id3069 . -1) (undo-tree-id3070 . -1) (undo-tree-id3071 . -1) (undo-tree-id3072 . -1) (undo-tree-id3073 . -1) (undo-tree-id3074 . -1) (undo-tree-id3075 . -1) (undo-tree-id3076 . -1) (undo-tree-id3077 . -1) (undo-tree-id3078 . -1) (undo-tree-id3079 . -1) (undo-tree-id3080 . -1) (#("\\" 0 1 (fontified t)) . -3254) (undo-tree-id3081 . -1) (undo-tree-id3082 . -1) (undo-tree-id3083 . -1) (undo-tree-id3084 . -1) (undo-tree-id3085 . -1) (undo-tree-id3086 . -1) 3255 (3254 . 3255) (#("w" 0 1 (fontified t)) . -3254) (undo-tree-id3087 . -1) (undo-tree-id3088 . -1) (undo-tree-id3089 . -1) (undo-tree-id3090 . -1) 3255 (3253 . 3255) (3235 . 3236) (#("1" 0 1 (fontified t face py-number-face)) . 3235) (undo-tree-id3091 . -1) (undo-tree-id3092 . -1) (undo-tree-id3093 . -1) (undo-tree-id3094 . -1) (undo-tree-id3095 . -1) (undo-tree-id3096 . -1)) nil (25919 52463 694510 540000) 0 nil])
([nil nil ((#("ohval" 0 5 (fontified t)) . 3253) (undo-tree-id3056 . 5) (undo-tree-id3057 . -4) (undo-tree-id3058 . 5) (undo-tree-id3059 . -5) (undo-tree-id3060 . -5)) nil (25919 52463 694494 419000) 0 nil])
([nil nil ((3982 . 3992) (#("i" 0 1 (match-data (0 2 0 1 1 2) fontified t face font-lock-string-face)) . -3982) (undo-tree-id2971 . -1) (undo-tree-id2972 . -1) (undo-tree-id2973 . -1) (undo-tree-id2974 . -1) (undo-tree-id2975 . -1) 3983 (3979 . 3983) (#("S" 0 1 (match-data (0 2 0 1 1 2) fontified t face font-lock-string-face)) . -3979) (undo-tree-id2976 . -1) (undo-tree-id2977 . -1) (undo-tree-id2978 . -1) 3980 (3979 . 3980) (#("Retribution" 0 11 (match-data (0 2 0 1 1 2) fontified t face font-lock-string-face)) . -3979) (undo-tree-id2979 . -11) (undo-tree-id2980 . -11) (undo-tree-id2981 . -5) (undo-tree-id2982 . -5) (undo-tree-id2983 . -5) (undo-tree-id2984 . -5) (undo-tree-id2985 . -5) (undo-tree-id2986 . -5) (undo-tree-id2987 . -5) (undo-tree-id2988 . -11) (undo-tree-id2989 . -11) (undo-tree-id2990 . -11) (undo-tree-id2991 . -11) (undo-tree-id2992 . -11) (undo-tree-id2993 . -11) (undo-tree-id2994 . -11) (undo-tree-id2995 . -11) (undo-tree-id2996 . -11) (undo-tree-id2997 . -11) 3990 (4326 . 4327) (#("5" 0 1 (fontified t face py-number-face)) . -4326) (undo-tree-id2998 . -1) (undo-tree-id2999 . -1) (undo-tree-id3000 . -1) (undo-tree-id3001 . -1) (undo-tree-id3002 . -1) (undo-tree-id3003 . -1) (undo-tree-id3004 . -1) (undo-tree-id3005 . -1) (undo-tree-id3006 . -1) (undo-tree-id3007 . -1) (undo-tree-id3008 . -1) (undo-tree-id3009 . -1) (undo-tree-id3010 . -1) (undo-tree-id3011 . -1) (undo-tree-id3012 . -1) 4327 (4410 . 4416) (#("Melee" 0 5 (fontified t face font-lock-string-face)) . -4410) (undo-tree-id3013 . -5) (undo-tree-id3014 . -5) (undo-tree-id3015 . -5) 4415 (4306 . 4311) (#("Melee" 0 5 (fontified t face font-lock-string-face)) . -4306) (undo-tree-id3016 . -5) (undo-tree-id3017 . -5) (undo-tree-id3018 . -5) 4311 (4392 . 4398) (#("Retribution" 0 11 (match-data (0 2 0 1 1 2) fontified t face font-lock-string-face)) . -4392) (undo-tree-id3019 . -11) (undo-tree-id3020 . -11) (undo-tree-id3021 . -11) 4403 (4290 . 4294) (4284 . 4290) (#("Retribution" 0 11 (match-data (0 2 0 1 1 2) fontified t face font-lock-string-face)) . -4284) (undo-tree-id3022 . -11) (undo-tree-id3023 . -11) (undo-tree-id3024 . -11) 4295 (nil rear-nonsticky nil 4457 . 4458) (nil fontified nil 4453 . 4458) (4453 . 4458) (#("ohval" 0 5 (fontified t)) . -4453) (undo-tree-id3025 . -5) (undo-tree-id3026 . -5) (undo-tree-id3027 . -5) 4458 (4344 . 4349) (#("ohval" 0 5 (fontified t)) . -4344) (undo-tree-id3028 . -5) (undo-tree-id3029 . -5) (undo-tree-id3030 . -5) 4349 (nil rear-nonsticky nil 4158 . 4159) (nil fontified nil 4151 . 4159) (4151 . 4159) (#("ohval" 0 4 (fontified t) 4 5 (fontified t)) . -4151) (undo-tree-id3031 . -5) (undo-tree-id3032 . -5) (undo-tree-id3033 . -5) 4156 (4039 . 4047) (#("dea" 0 3 (fontified nil)) . -4039) (4039 . 4042) (#("deathtok" 0 8 (fontified nil)) . -4039) (4039 . 4047) (#("dea" 0 3 (fontified t)) . -4039) (undo-tree-id3034 . -3) 4042 (4039 . 4042) (#("ohval" 0 5 (fontified t)) . -4039) (undo-tree-id3035 . -5) (undo-tree-id3036 . -5) (undo-tree-id3037 . -5) 4044 (3843 . 3847) (#("mil" 0 3 (fontified nil)) . -3843) (3843 . 3846) (#("mila" 0 4 (fontified t)) . -3843) (undo-tree-id3038 . -4) 3847 (3843 . 3847) (#("ohval" 0 5 (fontified t)) . -3843) (undo-tree-id3039 . -5) (undo-tree-id3040 . -5) (undo-tree-id3041 . -5) 3848 (3735 . 3739) (#("mil" 0 3 (fontified nil)) . -3735) (3735 . 3738) (#("mila" 0 4 (fontified nil)) . -3735) (3735 . 3739) (#("mil" 0 3 (fontified t)) . -3735) (undo-tree-id3042 . -3) 3738 (3735 . 3738) (#("ohval" 0 5 (fontified t)) . -3735) (undo-tree-id3043 . -5) (undo-tree-id3044 . -5) (undo-tree-id3045 . -5) 3740 (3546 . 3551) (#("q" 0 1 (fontified nil)) . -3546) (3546 . 3547) (#("quhzx" 0 5 (fontified nil)) . -3546) (3546 . 3551) (#("q" 0 1 (fontified t)) . -3546) (undo-tree-id3046 . -1) 3547 (3546 . 3547) (#("ohval" 0 5 (fontified t)) . -3546) (undo-tree-id3047 . -5) (undo-tree-id3048 . -5) (undo-tree-id3049 . -5) 3551 (3437 . 3442) (#("quh" 0 3 (fontified nil)) . -3437) (3437 . 3440) (#("quhzx" 0 5 (fontified nil)) . -3437) (3437 . 3442) (#("quh" 0 3 (fontified t)) . -3437) (undo-tree-id3050 . -3) (undo-tree-id3051 . -3) 3440 (3437 . 3440) (#("ohval" 0 5 (fontified t)) . -3437) (undo-tree-id3052 . -5) (undo-tree-id3053 . -5) (undo-tree-id3054 . -5) 3442 (3253 . 3259) (#("hun" 0 3 (fontified nil)) . -3253) (3253 . 3256) (#("hunton" 0 6 (fontified nil)) . -3253) (3253 . 3259) (#("hun" 0 3 (fontified t)) . -3253) (undo-tree-id3055 . -3) 3256 (3253 . 3256)) nil (25919 52463 694483 176000) 0 nil])
([nil nil ((#("    specs.append(Specialization(name=\"Retribution\", role_id=\"Melee\", gearscore=5154, character_id=deathtok.id))
" 0 3 (match-data (0 3 0 1 1 2 2 3) fontified t) 3 4 (match-data (0 3 0 1 1 2 2 3) rear-nonsticky t fontified t) 4 5 (match-data (0 3 0 1 1 2 2 3) fontified t) 5 10 (match-data (0 3 0 1 1 2 2 3) fontified t) 10 16 (match-data (0 2 0 1 1 2) fontified t) 16 17 (match-data (0 2 0 1 1 2) fontified t face (rainbow-delimiters-depth-1-face)) 17 31 (match-data (0 2 0 1 1 2) fontified t) 31 32 (match-data (0 2 0 1 1 2) fontified t face (rainbow-delimiters-depth-2-face)) 32 37 (match-data (0 2 0 1 1 2) fontified t) 37 50 (match-data (0 2 0 1 1 2) fontified t face font-lock-string-face) 50 52 (match-data (0 2 0 1 1 2) fontified t) 52 60 (fontified t) 60 67 (fontified t face font-lock-string-face) 67 69 (fontified t) 69 79 (fontified t) 79 83 (fontified t face py-number-face) 83 85 (fontified t) 85 98 (fontified t) 98 105 (match-data (0 3 0 1 1 2 2 3) fontified t) 105 106 (match-data (0 3 0 1 1 2 2 3) rear-nonsticky t fontified t) 106 109 (match-data (0 3 0 1 1 2 2 3) fontified t) 109 110 (match-data (0 3 0 1 1 2 2 3) fontified t face (rainbow-delimiters-depth-2-face)) 110 111 (rear-nonsticky t match-data (0 3 0 1 1 2 2 3) fontified t face (rainbow-delimiters-depth-1-face)) 111 112 (fontified t)) . 4055) (undo-tree-id2952 . -43) (undo-tree-id2953 . -43) (undo-tree-id2954 . -43) (undo-tree-id2955 . -111) (undo-tree-id2956 . -98) (undo-tree-id2957 . -107) (undo-tree-id2958 . -109) (undo-tree-id2959 . -43) (undo-tree-id2960 . -43) (undo-tree-id2961 . -43) (undo-tree-id2962 . -43) (undo-tree-id2963 . -43) (undo-tree-id2964 . -43) (undo-tree-id2965 . -43) (undo-tree-id2966 . -43) (undo-tree-id2967 . -43) (undo-tree-id2968 . -43) (undo-tree-id2969 . -43) (undo-tree-id2970 . -112) 4098) nil (25919 52463 694438 809000) 0 nil])
([nil nil ((#("5154" 0 4 (fontified t face py-number-face)) . 4022) (undo-tree-id2933 . -3) (undo-tree-id2934 . -3) (undo-tree-id2935 . -3) (undo-tree-id2936 . -3) (undo-tree-id2937 . -3) (undo-tree-id2938 . -2) (undo-tree-id2939 . -2) (undo-tree-id2940 . -2) (undo-tree-id2941 . -2) (undo-tree-id2942 . -4) (undo-tree-id2943 . -3) (undo-tree-id2944 . -3) (undo-tree-id2945 . -3) (undo-tree-id2946 . -3) (undo-tree-id2947 . -3) (undo-tree-id2948 . -3) (undo-tree-id2949 . -3) (undo-tree-id2950 . -3) (undo-tree-id2951 . -4) 4025) nil (25919 52463 694429 605000) 0 nil])
([nil nil ((4022 . 4026)) nil (25919 52463 694421 717000) 0 nil])
([nil nil ((3686 . 3687)) nil (25919 52463 694421 137000) 0 nil])
([nil nil ((#("R" 0 1 (match-data (0 2 0 1 1 2) fontified t face font-lock-string-face)) . -3675) (undo-tree-id2641 . -1) (undo-tree-id2642 . -1) (undo-tree-id2643 . -1) (undo-tree-id2644 . -1) (undo-tree-id2645 . -1) (undo-tree-id2646 . -1) (undo-tree-id2647 . -1) (undo-tree-id2648 . -1) (undo-tree-id2649 . -1) (undo-tree-id2650 . -1) (undo-tree-id2651 . -1) (undo-tree-id2652 . -1) (undo-tree-id2653 . -1) (undo-tree-id2654 . -1) (undo-tree-id2655 . -1) (undo-tree-id2656 . -1) (undo-tree-id2657 . -1) (undo-tree-id2658 . -1) (undo-tree-id2659 . -1) (undo-tree-id2660 . -1) (undo-tree-id2661 . -1) (undo-tree-id2662 . -1) (undo-tree-id2663 . -1) (undo-tree-id2664 . -1) (undo-tree-id2665 . -1) (undo-tree-id2666 . -1) (undo-tree-id2667 . -1) (undo-tree-id2668 . -1) (undo-tree-id2669 . -1) (undo-tree-id2670 . -1) (undo-tree-id2671 . -1) (undo-tree-id2672 . -1) (undo-tree-id2673 . -1) (undo-tree-id2674 . -1) (undo-tree-id2675 . -1) (undo-tree-id2676 . -1) (undo-tree-id2677 . -1) (undo-tree-id2678 . -1) (undo-tree-id2679 . -1) (#("e" 0 1 (match-data (0 2 0 1 1 2) fontified t face font-lock-string-face)) . -3676) (undo-tree-id2680 . -1) (undo-tree-id2681 . -1) (undo-tree-id2682 . -1) (undo-tree-id2683 . -1) (undo-tree-id2684 . -1) (undo-tree-id2685 . -1) (undo-tree-id2686 . -1) (undo-tree-id2687 . -1) (undo-tree-id2688 . -1) (undo-tree-id2689 . -1) (undo-tree-id2690 . -1) (undo-tree-id2691 . -1) (undo-tree-id2692 . -1) (undo-tree-id2693 . -1) (undo-tree-id2694 . -1) (undo-tree-id2695 . -1) (undo-tree-id2696 . -1) (undo-tree-id2697 . -1) (undo-tree-id2698 . -1) (undo-tree-id2699 . -1) (undo-tree-id2700 . -1) (undo-tree-id2701 . -1) (undo-tree-id2702 . -1) (undo-tree-id2703 . -1) (undo-tree-id2704 . -1) (undo-tree-id2705 . -1) (undo-tree-id2706 . -1) (undo-tree-id2707 . -1) (undo-tree-id2708 . -1) (undo-tree-id2709 . -1) (undo-tree-id2710 . -1) (undo-tree-id2711 . -1) (undo-tree-id2712 . -1) (undo-tree-id2713 . -1) (undo-tree-id2714 . -1) (undo-tree-id2715 . -1) (#("t" 0 1 (match-data (0 2 0 1 1 2) fontified t face font-lock-string-face)) . -3677) (undo-tree-id2716 . -1) (undo-tree-id2717 . -1) (undo-tree-id2718 . -1) (undo-tree-id2719 . -1) (undo-tree-id2720 . -1) (undo-tree-id2721 . -1) (undo-tree-id2722 . -1) (undo-tree-id2723 . -1) (undo-tree-id2724 . -1) (undo-tree-id2725 . -1) (undo-tree-id2726 . -1) (undo-tree-id2727 . -1) (undo-tree-id2728 . -1) (undo-tree-id2729 . -1) (undo-tree-id2730 . -1) (undo-tree-id2731 . -1) (undo-tree-id2732 . -1) (undo-tree-id2733 . -1) (undo-tree-id2734 . -1) (undo-tree-id2735 . -1) (undo-tree-id2736 . -1) (undo-tree-id2737 . -1) (undo-tree-id2738 . -1) (undo-tree-id2739 . -1) (undo-tree-id2740 . -1) (undo-tree-id2741 . -1) (undo-tree-id2742 . -1) (undo-tree-id2743 . -1) (undo-tree-id2744 . -1) (undo-tree-id2745 . -1) (undo-tree-id2746 . -1) (undo-tree-id2747 . -1) (undo-tree-id2748 . -1) (undo-tree-id2749 . -1) (#("r" 0 1 (match-data (0 2 0 1 1 2) fontified t face font-lock-string-face)) . -3678) (undo-tree-id2750 . -1) (undo-tree-id2751 . -1) (undo-tree-id2752 . -1) (undo-tree-id2753 . -1) (undo-tree-id2754 . -1) (undo-tree-id2755 . -1) (undo-tree-id2756 . -1) (undo-tree-id2757 . -1) (undo-tree-id2758 . -1) (undo-tree-id2759 . -1) (undo-tree-id2760 . -1) (undo-tree-id2761 . -1) (undo-tree-id2762 . -1) (undo-tree-id2763 . -1) (undo-tree-id2764 . -1) (undo-tree-id2765 . -1) (undo-tree-id2766 . -1) (undo-tree-id2767 . -1) (undo-tree-id2768 . -1) (undo-tree-id2769 . -1) (undo-tree-id2770 . -1) (undo-tree-id2771 . -1) (undo-tree-id2772 . -1) (undo-tree-id2773 . -1) (undo-tree-id2774 . -1) (undo-tree-id2775 . -1) (undo-tree-id2776 . -1) (undo-tree-id2777 . -1) (undo-tree-id2778 . -1) (undo-tree-id2779 . -1) (undo-tree-id2780 . -1) (#("i" 0 1 (match-data (0 2 0 1 1 2) fontified t face font-lock-string-face)) . -3679) (undo-tree-id2781 . -1) (undo-tree-id2782 . -1) (undo-tree-id2783 . -1) (undo-tree-id2784 . -1) (undo-tree-id2785 . -1) (undo-tree-id2786 . -1) (undo-tree-id2787 . -1) (undo-tree-id2788 . -1) (undo-tree-id2789 . -1) (undo-tree-id2790 . -1) (undo-tree-id2791 . -1) (undo-tree-id2792 . -1) (undo-tree-id2793 . -1) (undo-tree-id2794 . -1) (undo-tree-id2795 . -1) (undo-tree-id2796 . -1) (undo-tree-id2797 . -1) (undo-tree-id2798 . -1) (undo-tree-id2799 . -1) (undo-tree-id2800 . -1) (undo-tree-id2801 . -1) (undo-tree-id2802 . -1) (undo-tree-id2803 . -1) (undo-tree-id2804 . -1) (undo-tree-id2805 . -1) (undo-tree-id2806 . -1) (undo-tree-id2807 . -1) (undo-tree-id2808 . -1) (#("b" 0 1 (match-data (0 2 0 1 1 2) fontified t face font-lock-string-face)) . -3680) (undo-tree-id2809 . -1) (undo-tree-id2810 . -1) (undo-tree-id2811 . -1) (undo-tree-id2812 . -1) (undo-tree-id2813 . -1) (undo-tree-id2814 . -1) (undo-tree-id2815 . -1) (undo-tree-id2816 . -1) (undo-tree-id2817 . -1) (undo-tree-id2818 . -1) (undo-tree-id2819 . -1) (undo-tree-id2820 . -1) (undo-tree-id2821 . -1) (undo-tree-id2822 . -1) (undo-tree-id2823 . -1) (undo-tree-id2824 . -1) (undo-tree-id2825 . -1) (undo-tree-id2826 . -1) (undo-tree-id2827 . -1) (undo-tree-id2828 . -1) (undo-tree-id2829 . -1) (undo-tree-id2830 . -1) (undo-tree-id2831 . -1) (undo-tree-id2832 . -1) (undo-tree-id2833 . -1) (undo-tree-id2834 . -1) (undo-tree-id2835 . -1) (#("u" 0 1 (match-data (0 2 0 1 1 2) fontified t face font-lock-string-face)) . -3681) (undo-tree-id2836 . -1) (undo-tree-id2837 . -1) (undo-tree-id2838 . -1) (undo-tree-id2839 . -1) (undo-tree-id2840 . -1) (undo-tree-id2841 . -1) (undo-tree-id2842 . -1) (undo-tree-id2843 . -1) (undo-tree-id2844 . -1) (undo-tree-id2845 . -1) (undo-tree-id2846 . -1) (undo-tree-id2847 . -1) (undo-tree-id2848 . -1) (undo-tree-id2849 . -1) (undo-tree-id2850 . -1) (undo-tree-id2851 . -1) (undo-tree-id2852 . -1) (undo-tree-id2853 . -1) (undo-tree-id2854 . -1) (undo-tree-id2855 . -1) (undo-tree-id2856 . -1) (#("t" 0 1 (match-data (0 2 0 1 1 2) fontified t face font-lock-string-face)) . -3682) (undo-tree-id2857 . -1) (undo-tree-id2858 . -1) (undo-tree-id2859 . -1) (undo-tree-id2860 . -1) (undo-tree-id2861 . -1) (undo-tree-id2862 . -1) (undo-tree-id2863 . -1) (undo-tree-id2864 . -1) (undo-tree-id2865 . -1) (undo-tree-id2866 . -1) (undo-tree-id2867 . -1) (undo-tree-id2868 . -1) (undo-tree-id2869 . -1) (undo-tree-id2870 . -1) (undo-tree-id2871 . -1) (undo-tree-id2872 . -1) (undo-tree-id2873 . -1) (undo-tree-id2874 . -1) (undo-tree-id2875 . -1) (undo-tree-id2876 . -1) (#("i" 0 1 (match-data (0 2 0 1 1 2) fontified t face font-lock-string-face)) . -3683) (undo-tree-id2877 . -1) (undo-tree-id2878 . -1) (undo-tree-id2879 . -1) (undo-tree-id2880 . -1) (undo-tree-id2881 . -1) (undo-tree-id2882 . -1) (undo-tree-id2883 . -1) (undo-tree-id2884 . -1) (undo-tree-id2885 . -1) (undo-tree-id2886 . -1) (undo-tree-id2887 . -1) (undo-tree-id2888 . -1) (undo-tree-id2889 . -1) (undo-tree-id2890 . -1) (undo-tree-id2891 . -1) (undo-tree-id2892 . -1) (undo-tree-id2893 . -1) (undo-tree-id2894 . -1) (undo-tree-id2895 . -1) (#("o" 0 1 (match-data (0 2 0 1 1 2) fontified t face font-lock-string-face)) . -3684) (undo-tree-id2896 . -1) (undo-tree-id2897 . -1) (undo-tree-id2898 . -1) (undo-tree-id2899 . -1) (undo-tree-id2900 . -1) (undo-tree-id2901 . -1) (undo-tree-id2902 . -1) (undo-tree-id2903 . -1) (undo-tree-id2904 . -1) (undo-tree-id2905 . -1) (undo-tree-id2906 . -1) (undo-tree-id2907 . -1) (undo-tree-id2908 . -1) (undo-tree-id2909 . -1) (undo-tree-id2910 . -1) (undo-tree-id2911 . -1) (undo-tree-id2912 . -1) (undo-tree-id2913 . -1) (#("n" 0 1 (match-data (0 2 0 1 1 2) fontified t face font-lock-string-face)) . -3685) (undo-tree-id2914 . -1) (undo-tree-id2915 . -1) (undo-tree-id2916 . -1) (undo-tree-id2917 . -1) (undo-tree-id2918 . -1) (undo-tree-id2919 . -1) (undo-tree-id2920 . -1) (undo-tree-id2921 . -1) (undo-tree-id2922 . -1) (undo-tree-id2923 . -1) (undo-tree-id2924 . -1) (undo-tree-id2925 . -1) (undo-tree-id2926 . -1) (undo-tree-id2927 . -1) (undo-tree-id2928 . -1) (undo-tree-id2929 . -1) (#("d" 0 1 (match-data (0 2 0 1 1 2) fontified t face font-lock-string-face)) . -3686) (undo-tree-id2930 . -1) (undo-tree-id2931 . -1) (undo-tree-id2932 . -1) 3687) nil (25919 52463 694411 205000) 0 nil])
([nil nil ((3675 . 3680)) nil (25919 52463 694137 966000) 0 nil])
([nil nil ((#("Retribution" 0 8 (match-data (0 2 0 1 1 2) fontified t face font-lock-string-face) 8 11 (match-data (0 2 0 1 1 2) fontified t face font-lock-string-face)) . -3777) (undo-tree-id2626 . -11) (undo-tree-id2627 . -11) (undo-tree-id2628 . -6) (undo-tree-id2629 . -6) (undo-tree-id2630 . -6) (undo-tree-id2631 . -6) (undo-tree-id2632 . -6) (undo-tree-id2633 . -11) (undo-tree-id2634 . -11) (undo-tree-id2635 . -11) (undo-tree-id2636 . -11) (undo-tree-id2637 . -11) (undo-tree-id2638 . -11) (undo-tree-id2639 . -11) (undo-tree-id2640 . -11) 3788) nil (25919 52463 694137 6000) 0 nil])
([nil nil ((3777 . 3783)) nil (25919 52463 694130 443000) 0 nil])
([nil nil ((#("Melee" 0 5 (fontified t face font-lock-string-face)) . -3692) (undo-tree-id2611 . -5) (undo-tree-id2612 . -5) (undo-tree-id2613 . -3) (undo-tree-id2614 . -3) (undo-tree-id2615 . -3) (undo-tree-id2616 . -3) (undo-tree-id2617 . -3) (undo-tree-id2618 . -5) (undo-tree-id2619 . -5) (undo-tree-id2620 . -5) (undo-tree-id2621 . -5) (undo-tree-id2622 . -5) (undo-tree-id2623 . -5) (undo-tree-id2624 . -5) (undo-tree-id2625 . -5) 3697) nil (25919 52463 694129 37000) 0 nil])
([nil nil ((3692 . 3696)) nil (25919 52463 694120 718000) 0 nil])
([nil nil ((#("15" 0 2 (fontified t face py-number-face)) . -3710) (undo-tree-id2599 . -2) (undo-tree-id2600 . -2) (undo-tree-id2601 . -1) (undo-tree-id2602 . -2) (undo-tree-id2603 . -2) (undo-tree-id2604 . -2) (undo-tree-id2605 . -2) (undo-tree-id2606 . -2) (undo-tree-id2607 . -2) (undo-tree-id2608 . -2) (undo-tree-id2609 . -2) (undo-tree-id2610 . -2) 3712) nil (25919 52463 694119 519000) 0 nil])
([nil nil ((#("5" 0 1 (fontified t face py-number-face)) . -3709) (undo-tree-id2577 . -1) (undo-tree-id2578 . -1) (undo-tree-id2579 . -1) (undo-tree-id2580 . -1) (undo-tree-id2581 . -1) (undo-tree-id2582 . -1) (undo-tree-id2583 . -1) (undo-tree-id2584 . -1) (undo-tree-id2585 . -1) (undo-tree-id2586 . -1) (undo-tree-id2587 . -1) (undo-tree-id2588 . -1) (undo-tree-id2589 . -1) (undo-tree-id2590 . -1) (undo-tree-id2591 . -1) (undo-tree-id2592 . -1) (undo-tree-id2593 . -1) (undo-tree-id2594 . -1) (undo-tree-id2595 . -1) (undo-tree-id2596 . -1) (undo-tree-id2597 . -1) (undo-tree-id2598 . -1) 3710) nil (25919 52463 694113 508000) 0 nil])
([nil nil ((#("4" 0 1 (fontified t face py-number-face)) . 3709)) nil (25919 52463 694103 173000) 0 nil])
([nil nil ((3709 . 3713)) nil (25919 52463 694102 622000) 0 nil])
([nil nil ((#("5154" 0 4 (fontified t face py-number-face)) . -3812) (undo-tree-id2562 . -4) (undo-tree-id2563 . -4) (undo-tree-id2564 . -2) (undo-tree-id2565 . -2) (undo-tree-id2566 . -2) (undo-tree-id2567 . -2) (undo-tree-id2568 . -2) (undo-tree-id2569 . -4) (undo-tree-id2570 . -4) (undo-tree-id2571 . -4) (undo-tree-id2572 . -4) (undo-tree-id2573 . -4) (undo-tree-id2574 . -4) (undo-tree-id2575 . -4) (undo-tree-id2576 . -4) 3816) nil (25919 52463 694101 294000) 0 nil])
([nil nil ((3812 . 3816)) nil (25919 52463 694093 258000) 0 nil])
([nil nil ((#("Retribution" 0 11 (match-data (0 2 0 1 1 2) fontified t face font-lock-string-face)) . -3377) (undo-tree-id2547 . -11) (undo-tree-id2548 . -11) (undo-tree-id2549 . -6) (undo-tree-id2550 . -6) (undo-tree-id2551 . -6) (undo-tree-id2552 . -6) (undo-tree-id2553 . -6) (undo-tree-id2554 . -11) (undo-tree-id2555 . -11) (undo-tree-id2556 . -11) (undo-tree-id2557 . -11) (undo-tree-id2558 . -11) (undo-tree-id2559 . -11) (undo-tree-id2560 . -11) (undo-tree-id2561 . -11) 3388) nil (25919 52463 694091 952000) 0 nil])
([nil nil ((3377 . 3388)) nil (25919 52463 694083 504000) 0 nil])
([nil nil ((#("Melee" 0 5 (fontified t face font-lock-string-face)) . -3400) (undo-tree-id2530 . -5) (undo-tree-id2531 . -5) (undo-tree-id2532 . -2) (undo-tree-id2533 . -2) (undo-tree-id2534 . -2) (undo-tree-id2535 . -2) (undo-tree-id2536 . -2) (undo-tree-id2537 . -2) (undo-tree-id2538 . -2) (undo-tree-id2539 . -5) (undo-tree-id2540 . -5) (undo-tree-id2541 . -5) (undo-tree-id2542 . -5) (undo-tree-id2543 . -5) (undo-tree-id2544 . -5) (undo-tree-id2545 . -5) (undo-tree-id2546 . -5) 3405) nil (25919 52463 694080 936000) 0 nil])
([nil nil ((3400 . 3404)) nil (25919 52463 691303 434000) 0 nil])
([nil nil ((#("Retribution" 0 1 (match-data (0 2 0 1 1 2) fontified t face font-lock-string-face) 1 6 (match-data (0 2 0 1 1 2) fontified t face font-lock-string-face) 6 11 (match-data (0 2 0 1 1 2) fontified t face font-lock-string-face)) . -3485) (undo-tree-id2515 . -11) (undo-tree-id2516 . -11) (undo-tree-id2517 . -8) (undo-tree-id2518 . -8) (undo-tree-id2519 . -8) (undo-tree-id2520 . -8) (undo-tree-id2521 . -8) (undo-tree-id2522 . -11) (undo-tree-id2523 . -11) (undo-tree-id2524 . -11) (undo-tree-id2525 . -11) (undo-tree-id2526 . -11) (undo-tree-id2527 . -11) (undo-tree-id2528 . -11) (undo-tree-id2529 . -11) 3496) nil (25919 52463 691302 545000) 0 nil])
([nil nil ((3485 . 3496)) nil (25919 52463 691296 856000) 0 nil])
([nil nil ((#("5" 0 1 (fontified t face py-number-face)) . -3526) (undo-tree-id2500 . -1) (undo-tree-id2501 . -1) (undo-tree-id2502 . -1) (undo-tree-id2503 . -1) (undo-tree-id2504 . -1) (undo-tree-id2505 . -1) (undo-tree-id2506 . -1) (undo-tree-id2507 . -1) (undo-tree-id2508 . -1) (undo-tree-id2509 . -1) (undo-tree-id2510 . -1) (undo-tree-id2511 . -1) (undo-tree-id2512 . -1) (undo-tree-id2513 . -1) (undo-tree-id2514 . -1) 3527) nil (25919 52463 691296 5000) 0 nil])
([nil nil ((3526 . 3527)) nil (25919 52463 691289 874000) 0 nil])
([nil nil ((#("1" 0 1 (fontified t face py-number-face)) . -3526) (undo-tree-id2488 . -1) (undo-tree-id2489 . -1) (undo-tree-id2490 . -1) (undo-tree-id2491 . -1) (undo-tree-id2492 . -1) (undo-tree-id2493 . -1) (undo-tree-id2494 . -1) (undo-tree-id2495 . -1) (undo-tree-id2496 . -1) (undo-tree-id2497 . -1) (undo-tree-id2498 . -1) (undo-tree-id2499 . -1) 3527) nil (25919 52463 691288 966000) 0 nil])
([nil nil ((3526 . 3527)) nil (25919 52463 691283 258000) 0 nil])
([nil nil ((#("3" 0 1 (fontified t face py-number-face)) . -3526) (undo-tree-id2478 . -1) (undo-tree-id2479 . -1) (undo-tree-id2480 . -1) (undo-tree-id2481 . -1) (undo-tree-id2482 . -1) (undo-tree-id2483 . -1) (undo-tree-id2484 . -1) (undo-tree-id2485 . -1) (undo-tree-id2486 . -1) (undo-tree-id2487 . -1) 3527) nil (25919 52463 691281 472000) 0 nil])
([nil nil ((3526 . 3527)) nil (25919 52463 691266 943000) 0 nil])
([nil nil ((4336 . 4340) (t 25919 52463 689506 413000)) nil (25919 52480 125781 739000) 0 nil])
([nil nil ((4340 . 4344)) nil (25919 52480 125780 973000) 0 nil])
([nil nil ((4343 . 4350) (#("s" 0 1 (fontified nil)) . -4343) (4343 . 4344) (#("session" 0 7 (fontified nil)) . -4343) (4343 . 4350) (#("s" 0 1 (fontified t)) . -4343) (undo-tree-id3347 . -1) (undo-tree-id3348 . -1) (undo-tree-id3349 . -1) (undo-tree-id3350 . -1) (undo-tree-id3351 . -1) (undo-tree-id3352 . -1) (undo-tree-id3353 . -1) 4344) nil (25919 52480 125779 727000) 0 nil])
([nil nil ((4350 . 4351)) nil (25919 52480 125775 155000) 0 nil])
([nil nil ((4351 . 4368) (#("bulk_save_objects" 0 17 (fontified nil)) . -4351) (4351 . 4368)) nil (25919 52480 125774 62000) 0 nil])
([nil nil ((4368 . 4371)) nil (25919 52480 125773 246000) 0 nil])
([nil nil ((#("e" 0 1 (match-data (0 0) fontified t)) . -4370) (undo-tree-id3340 . -1) (undo-tree-id3341 . -1) (undo-tree-id3342 . -1) (undo-tree-id3343 . -1) (undo-tree-id3344 . -1) (undo-tree-id3345 . -1) (undo-tree-id3346 . -1) 4371) nil (25919 52480 125772 352000) 0 nil])
([nil nil ((4370 . 4371)) nil (25919 52480 125767 784000) 0 nil])
([nil nil ((#("o" 0 1 (match-data (0 0) fontified t)) . -4370) (undo-tree-id3333 . -1) (undo-tree-id3334 . -1) (undo-tree-id3335 . -1) (undo-tree-id3336 . -1) (undo-tree-id3337 . -1) (undo-tree-id3338 . -1) (undo-tree-id3339 . -1) 4371) nil (25919 52480 125766 5000) 0 nil])
([nil nil ((4370 . 4375)) nil (25919 52480 125753 898000) 0 nil])
([nil nil ((4375 . 4376)) nil (25919 52480 125749 877000) 0 nil])
([nil nil ((#("Tank" 0 4 (fontified t face font-lock-string-face)) . -2455) (undo-tree-id3421 . -3) (undo-tree-id3422 . -3) (undo-tree-id3423 . -3) (undo-tree-id3424 . -1) (undo-tree-id3425 . -1) (undo-tree-id3426 . -1) (undo-tree-id3427 . -1) (undo-tree-id3428 . -4) (undo-tree-id3429 . -3) (undo-tree-id3430 . -3) (undo-tree-id3431 . -3) (undo-tree-id3432 . -3) (undo-tree-id3433 . -3) (undo-tree-id3434 . -4) 2459 (t 25919 52480 129498 617000)) nil (25919 52648 957745 683000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified t face font-lock-string-face)) . 2455)) nil (25919 52648 957739 444000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified t face font-lock-string-face)) . -2454) (undo-tree-id3396 . -1) (undo-tree-id3397 . -1) (undo-tree-id3398 . -1) (undo-tree-id3399 . -1) (undo-tree-id3400 . -1) (undo-tree-id3401 . -1) (undo-tree-id3402 . -1) (undo-tree-id3403 . -1) (undo-tree-id3404 . -1) (undo-tree-id3405 . -1) (undo-tree-id3406 . -1) (undo-tree-id3407 . -1) (undo-tree-id3408 . -1) (undo-tree-id3409 . -1) (undo-tree-id3410 . -1) (undo-tree-id3411 . -1) (undo-tree-id3412 . -1) (undo-tree-id3413 . -1) (undo-tree-id3414 . -1) (undo-tree-id3415 . -1) (undo-tree-id3416 . -1) (undo-tree-id3417 . -1) (undo-tree-id3418 . -1) (undo-tree-id3419 . -1) (undo-tree-id3420 . -1) 2455) nil (25919 52648 957738 271000) 0 nil])
([nil nil ((2454 . 2455)) nil (25919 52648 957727 785000) 0 nil])
([nil nil ((nil fontified t 3685 . 3686) (nil face font-lock-string-face 3685 . 3686) (#("\"Tank\"" 0 6 (fontified t face font-lock-string-face)) . -3685) (3691 . 3692) 2455) nil (25919 52648 957727 173000) 0 nil])
([nil nil ((nil fontified t 3956 . 3957) (nil face font-lock-string-face 3956 . 3957) (#("\"Melee\"" 0 7 (fontified t face font-lock-string-face)) . -3956) (3963 . 3964) (nil fontified t 3764 . 3765) (nil face font-lock-string-face 3764 . 3765) (#("\"Melee\"" 0 7 (fontified t face font-lock-string-face)) . -3764) (3771 . 3772) (nil fontified t 3490 . 3491) (nil face font-lock-string-face 3490 . 3491) (#("\"Melee\"" 0 7 (fontified t face font-lock-string-face)) . -3490) (3497 . 3498) (nil fontified t 2832 . 2833) (nil face font-lock-string-face 2832 . 2833) (#("\"Melee\"" 0 7 (fontified t face font-lock-string-face)) . -2832) (2839 . 2840) (nil fontified t 2551 . 2552) (nil face font-lock-string-face 2551 . 2552) (#("\"Melee\"" 0 7 (fontified t face font-lock-string-face)) . -2551) (2558 . 2559) 2362) nil (25919 52648 957725 740000) 0 nil])
([nil nil ((nil fontified t 4136 . 4137) (nil face font-lock-string-face 4136 . 4137) (#("\"Heals\"" 0 7 (fontified t face font-lock-string-face)) . -4136) (4143 . 4144) (nil fontified t 2723 . 2724) (nil face font-lock-string-face 2723 . 2724) (#("\"Heals\"" 0 7 (fontified t face font-lock-string-face)) . -2723) (2730 . 2731) 2329) nil (25919 52648 957723 212000) 0 nil])
([nil nil ((#("Heal" 0 4 (fontified t face font-lock-string-face)) . -3377) (undo-tree-id3379 . -4) (undo-tree-id3380 . -4) (undo-tree-id3381 . -2) (undo-tree-id3382 . -2) (undo-tree-id3383 . -2) (undo-tree-id3384 . -2) (undo-tree-id3385 . -2) (undo-tree-id3386 . -4) (undo-tree-id3387 . -4) (undo-tree-id3388 . -4) (undo-tree-id3389 . -4) (undo-tree-id3390 . -4) (undo-tree-id3391 . -4) (undo-tree-id3392 . -4) (undo-tree-id3393 . -4) (undo-tree-id3394 . -4) (undo-tree-id3395 . -4) 3381) nil (25919 52648 957721 401000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified t face font-lock-string-face)) . 3377)) nil (25919 52648 957714 408000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified t face font-lock-string-face)) . -3376) (undo-tree-id3354 . -1) (undo-tree-id3355 . -1) (undo-tree-id3356 . -1) (undo-tree-id3357 . -1) (undo-tree-id3358 . -1) (undo-tree-id3359 . -1) (undo-tree-id3360 . -1) (undo-tree-id3361 . -1) (undo-tree-id3362 . -1) (undo-tree-id3363 . -1) (undo-tree-id3364 . -1) (undo-tree-id3365 . -1) (undo-tree-id3366 . -1) (undo-tree-id3367 . -1) (undo-tree-id3368 . -1) (undo-tree-id3369 . -1) (undo-tree-id3370 . -1) (undo-tree-id3371 . -1) (undo-tree-id3372 . -1) (undo-tree-id3373 . -1) (undo-tree-id3374 . -1) (undo-tree-id3375 . -1) (undo-tree-id3376 . -1) (undo-tree-id3377 . -1) (undo-tree-id3378 . -1) 3377) nil (25919 52648 957713 105000) 0 nil])
([nil nil ((3376 . 3377)) nil (25919 52648 957694 886000) 0 nil])
([nil nil ((nil fontified t 4215 . 4216) (nil face font-lock-string-face 4215 . 4216) (#("\"Ranged\"" 0 8 (fontified t face font-lock-string-face)) . -4215) (4223 . 4224) (nil fontified t 3184 . 3185) (nil face font-lock-string-face 3184 . 3185) (#("\"Ranged\"" 0 8 (fontified t face font-lock-string-face)) . -3184) (3192 . 3193) (nil fontified t 3000 . 3001) (nil face font-lock-string-face 3000 . 3001) (#("\"Ranged\"" 0 8 (fontified t face font-lock-string-face)) . -3000) (3008 . 3009) 2329) nil (25919 52648 957690 170000) 0 nil])
([nil nil ((1639 . 1644) (1637 . 1639) (1624 . 1637) (#(")" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t face (rainbow-delimiters-unmatched-face))) . -1624) (undo-tree-id3796 . -1) (undo-tree-id3797 . -1) (undo-tree-id3798 . -1) (undo-tree-id3799 . -1) 1625 (1624 . 1625) (1615 . 1624) (#("fi" 0 2 (fontified nil)) . -1615) (1615 . 1617) (#("filter_by" 0 9 (fontified nil)) . -1615) (1615 . 1624) (#("fil" 0 3 (match-data (0 2 0 1 1 2) fontified t)) . -1615) (undo-tree-id3800 . -3) (undo-tree-id3801 . -3) 1618 (1614 . 1618) (1609 . 1614) (#("qu" 0 2 (fontified nil)) . -1609) (1609 . 1611) (#("query" 0 5 (fontified nil)) . -1609) (1609 . 1614) (#("qu" 0 2 (fontified t)) . -1609) (undo-tree-id3802 . -2) 1611 (1609 . 1611) (#("." 0 1 (fontified t)) . -1609) (undo-tree-id3803 . -1) (undo-tree-id3804 . -1) 1610 (1597 . 1610) (205 . 226) (204 . 205) (199 . 204) (354 . 355) (403 . 408) (396 . 403) (379 . 396) (#("bu" 0 2 (fontified nil)) . -379) (379 . 381) (#("bulk_save_objects" 0 17 (fontified nil)) . -379) (379 . 396) (#("bu" 0 2 (match-data (0 0) fontified t)) . -379) (undo-tree-id3805 . -2) (undo-tree-id3806 . -2) 381 (379 . 381) (378 . 379) (#("," 0 1 (match-data (0 0) fontified t)) . -378) (undo-tree-id3807 . -1) (undo-tree-id3808 . -1) 379 (378 . 379) (nil rear-nonsticky nil 344 . 345) (nil fontified nil 344 . 345) (nil fontified nil 332 . 344) (332 . 345) (#("heal = " 0 1 (fontified t face py-variable-name-face) 1 4 (fontified t face py-variable-name-face) 4 5 (fontified t) 5 6 (fontified t face font-lock-operator-face) 6 7 (fontified t)) . 332) (undo-tree-id3809 . -7) (undo-tree-id3810 . -7) (nil rear-nonsticky nil 306 . 307) (nil fontified nil 306 . 307) (nil fontified nil 294 . 306) (294 . 307) (#("ranged = " 0 6 (fontified t face py-variable-name-face) 6 7 (fontified t) 7 8 (fontified t face font-lock-operator-face) 8 9 (fontified t)) . 294) (undo-tree-id3811 . -9) (undo-tree-id3812 . -9) (nil rear-nonsticky nil 269 . 270) (nil fontified nil 269 . 270) (nil fontified nil 257 . 269) (257 . 270) (#("melee = " 0 5 (fontified t face py-variable-name-face) 5 6 (fontified t) 6 7 (fontified t face font-lock-operator-face) 7 8 (fontified t)) . 257) (undo-tree-id3813 . -8) (undo-tree-id3814 . -8) (347 . 348) (#("_" 0 1 (fontified t face py-builtins-face)) . -347) (undo-tree-id3815 . -1) (undo-tree-id3816 . -1) 348 (347 . 348) (317 . 318) (283 . 284) (251 . 252) (219 . 232) (215 . 219) (#("    tank = " 0 4 (fontified t) 4 8 (fontified t face py-variable-name-face) 8 9 (fontified t) 9 10 (fontified t face font-lock-operator-face) 10 11 (fontified t)) . 215) (undo-tree-id3817 . -11) (undo-tree-id3818 . -11) (204 . 214) (199 . 204) (331 . 338) (#("session" 0 7 (fontified nil)) . -331) (331 . 338) (328 . 331) (323 . 328) (299 . 300) (#("h" 0 1 (fontified t face py-variable-name-face)) . 299) (316 . 317) (#("h" 0 1 (fontified t face font-lock-string-face)) . 316) (321 . 323) (#(")" 0 1 (fontified t face font-lock-string-face)) . -321) (undo-tree-id3819 . -1) (undo-tree-id3820 . -1) 322 (320 . 322) (299 . 320) (62 . 63) (#("r" 0 1 (match-data (0 2 0 1 1 2) fontified t)) . -62) (undo-tree-id3821 . -1) (undo-tree-id3822 . -1) 63 (60 . 66) (288 . 293) (287 . 288) (280 . 281) (#("r" 0 1 (fontified t face font-lock-string-face)) . -280) (undo-tree-id3823 . -1) (undo-tree-id3824 . -1) 281 (279 . 287) (260 . 279) (255 . 260) (#("_" 0 1 (fontified t face py-builtins-face)) . -255) (undo-tree-id3825 . -1) (undo-tree-id3826 . -1) 256 (250 . 256) (229 . 250) (224 . 229) (210 . 217) (210 . 217) (198 . 210) (193 . 198) (192 . 193) (176 . 192) (#("f" 0 1 (fontified t)) . -176) (undo-tree-id3827 . -1) (undo-tree-id3828 . -1) (#("r" 0 1 (fontified t)) . -177) (undo-tree-id3829 . -1) (undo-tree-id3830 . -1) (#("g" 0 1 (fontified t)) . -178) (undo-tree-id3831 . -1) (undo-tree-id3832 . -1) 179 (#(" " 0 1 (fontified t)) . 179) (undo-tree-id3833 . -1) (undo-tree-id3834 . -1) 180 (176 . 180) (#("    " 0 4 (fontified t)) . -176) (undo-tree-id3835 . -4) (undo-tree-id3836 . -4) 180 (#("'" 0 1 (fontified t face font-lock-string-face)) . -180) (undo-tree-id3837 . -1) 181 (180 . 181) (175 . 180) (#("
" 0 1 (fontified t)) . -175) (undo-tree-id3838 . -1) (undo-tree-id3839 . -1) 176 (#("    " 0 4 (fontified t)) . -176) (undo-tree-id3840 . -4) (undo-tree-id3841 . -4) 180 (#("f" 0 1 (fontified t)) . -180) (undo-tree-id3842 . -1) 181 (180 . 181) (175 . 180) (#(":" 0 1 (fontified t)) . -115) (undo-tree-id3843 . -1) (undo-tree-id3844 . -1) 116 (115 . 116) (103 . 115) (98 . 103) (#("," 0 1 (fontified t)) . 2991) (#(" role_id=3" 0 1 (match-data (0 2 0 1 1 2) fontified t) 1 9 (fontified t) 9 10 (fontified t face py-number-face)) . 2991) (undo-tree-id3845 . -10) (undo-tree-id3846 . -10) (#(" role_id=3," 0 1 (match-data (0 2 0 1 1 2) fontified t) 1 9 (fontified t) 9 10 (fontified t face py-number-face) 10 11 (fontified t)) . 3175) (undo-tree-id3847 . -11) (undo-tree-id3848 . -11) (#(" role_id=4," 0 1 (match-data (0 2 0 1 1 2) fontified t) 1 9 (fontified t) 9 10 (fontified t face py-number-face) 10 11 (fontified t)) . 3353) (undo-tree-id3849 . -11) (undo-tree-id3850 . -11) (#(" role_id=2," 0 1 (match-data (0 2 0 1 1 2) fontified t) 1 9 (fontified t) 9 10 (fontified t face py-number-face) 10 11 (fontified t)) . 3456) (undo-tree-id3851 . -11) (undo-tree-id3852 . -11) (4075 . 4076) (#("  " 0 1 (match-data (0 2 0 1 1 2) fontified t) 1 2 (fontified t)) . 4075) (undo-tree-id3853 . -1) (undo-tree-id3854 . -1) 4076 (4163 . 4164) (#("  " 0 1 (match-data (0 2 0 1 1 2) fontified t) 1 2 (fontified t)) . 4163) (undo-tree-id3855 . -1) (undo-tree-id3856 . -1) (undo-tree-id3857 . -1) 4164 (#("role_id=3," 0 8 (fontified t) 8 9 (face py-number-face fontified t) 9 10 (fontified t)) . 4164) (undo-tree-id3858 . -10) (undo-tree-id3859 . -10) (#("role_id=4," 0 8 (fontified t) 8 9 (fontified t face py-number-face) 9 10 (fontified t)) . 4076) (undo-tree-id3860 . -10) (undo-tree-id3861 . -10) (#(" role_id=2," 0 1 (match-data (0 2 0 1 1 2) fontified t) 1 9 (fontified t) 9 10 (fontified t face py-number-face) 10 11 (fontified t)) . -3900) (undo-tree-id3862 . -11) (undo-tree-id3863 . -11) (undo-tree-id3864 . -11) 3911 (3719 . 3720) (#("  " 0 1 (match-data (0 2 0 1 1 2) fontified t) 1 2 (fontified t)) . 3719) (undo-tree-id3865 . -1) (undo-tree-id3866 . -1) (undo-tree-id3867 . -1) 3720 (#("role_id=2," 0 8 (fontified t) 8 9 (fontified t face py-number-face) 9 10 (fontified t)) . -3720) (undo-tree-id3868 . -10) (undo-tree-id3869 . -10) (undo-tree-id3870 . -10) 3730 (3633 . 3634) (#("  " 0 1 (match-data (0 2 0 1 1 2) fontified t) 1 2 (fontified t)) . 3633) (undo-tree-id3871 . -1) (undo-tree-id3872 . -1) (undo-tree-id3873 . -1) 3634 (#("," 0 1 (fontified t)) . 3634) (#("role_id=1" 0 8 (fontified t) 8 9 (fontified t face py-number-face)) . -3634) (undo-tree-id3874 . -9) (undo-tree-id3875 . -9) (undo-tree-id3876 . -9) 3643 (t 25919 52648 959462 555000)) nil (25919 53601 750289 243000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1686 . 1687) (nil fontified nil 1686 . 1687) (nil fontified nil 1685 . 1686) (nil fontified nil 1679 . 1685) (nil fontified nil 1672 . 1679) (nil fontified nil 1671 . 1672) (nil fontified nil 1662 . 1671) (nil fontified nil 1661 . 1662) (nil fontified nil 1656 . 1661) (nil fontified nil 1650 . 1656) (nil fontified nil 1649 . 1650) (nil fontified nil 1648 . 1649) (nil fontified nil 1644 . 1648) (nil fontified nil 1640 . 1644) (1640 . 1687) (nil rear-nonsticky nil 1639 . 1640) (nil fontified nil 1639 . 1640) (nil fontified nil 1638 . 1639) (nil fontified nil 1632 . 1638) (nil fontified nil 1625 . 1632) (nil fontified nil 1624 . 1625) (nil fontified nil 1615 . 1624) (nil fontified nil 1614 . 1615) (nil fontified nil 1609 . 1614) (nil fontified nil 1603 . 1609) (nil fontified nil 1602 . 1603) (nil fontified nil 1601 . 1602) (nil fontified nil 1597 . 1601) (nil fontified nil 1593 . 1597) (1593 . 1640) (#(".filter_by(name = \"Tank\")
" 0 1 (match-data (0 2 0 1 1 2) fontified nil) 1 10 (match-data (0 3 0 1 1 2 2 3) fontified nil) 10 11 (match-data (0 3 0 1 1 2 2 3) fontified nil face (rainbow-delimiters-depth-1-face)) 11 18 (match-data (0 3 0 1 1 2 2 3) fontified nil) 18 24 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face) 24 25 (match-data (0 3 0 1 1 2 2 3) fontified nil face (rainbow-delimiters-depth-1-face)) 25 26 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 1593) (undo-tree-id3736 . 25) (undo-tree-id3737 . -25) (undo-tree-id3738 . -11) (undo-tree-id3739 . -19) (undo-tree-id3740 . -19) (undo-tree-id3741 . -19) (undo-tree-id3742 . -19) (undo-tree-id3743 . -20) (undo-tree-id3744 . -20) (undo-tree-id3745 . -20) (undo-tree-id3746 . -20) (undo-tree-id3747 . -20) (undo-tree-id3748 . -21) (undo-tree-id3749 . -21) (undo-tree-id3750 . -21) (undo-tree-id3751 . -22) (undo-tree-id3752 . -22) (undo-tree-id3753 . -22) (undo-tree-id3754 . -23) (undo-tree-id3755 . -23) (undo-tree-id3756 . -23) (undo-tree-id3757 . -24) (undo-tree-id3758 . -24) (undo-tree-id3759 . -24) (undo-tree-id3760 . -24) (undo-tree-id3761 . -24) (undo-tree-id3762 . -25) (undo-tree-id3763 . -25) (undo-tree-id3764 . -25) (undo-tree-id3765 . -25) (undo-tree-id3766 . -25) (undo-tree-id3767 . -25) (undo-tree-id3768 . -25) (undo-tree-id3769 . -25) (undo-tree-id3770 . -25) (undo-tree-id3771 . -25) (undo-tree-id3772 . -26) (undo-tree-id3773 . -26) (undo-tree-id3774 . -1) (undo-tree-id3775 . -1) (undo-tree-id3776 . -1) (undo-tree-id3777 . -1) (undo-tree-id3778 . -1) (undo-tree-id3779 . -1) (undo-tree-id3780 . -1) (undo-tree-id3781 . -1) (undo-tree-id3782 . -26) (#("    tank = Role.query" 0 4 (fontified t) 4 8 (fontified t face py-variable-name-face) 8 9 (fontified t) 9 10 (fontified t face font-lock-operator-face) 10 16 (fontified t) 16 21 (match-data (0 2 0 1 1 2) fontified t)) . -1593) (undo-tree-id3783 . -21) (undo-tree-id3784 . -21) (undo-tree-id3785 . -4) (undo-tree-id3786 . -4) (undo-tree-id3787 . -8) (undo-tree-id3788 . -21) (undo-tree-id3789 . -21) (undo-tree-id3790 . -21) (undo-tree-id3791 . -21) (undo-tree-id3792 . -21) (undo-tree-id3793 . -21) (undo-tree-id3794 . -21) (undo-tree-id3795 . -21) 1614) nil (25919 53601 750240 631000) 0 nil])
([nil nil ((nil fontified nil 1733 . 1734) (nil fontified nil 1732 . 1733) (nil fontified nil 1726 . 1732) (nil fontified nil 1719 . 1726) (nil fontified nil 1718 . 1719) (nil fontified nil 1715 . 1718) (nil fontified nil 1709 . 1715) (nil fontified nil 1708 . 1709) (nil fontified nil 1703 . 1708) (nil fontified nil 1697 . 1703) (nil fontified nil 1696 . 1697) (nil fontified nil 1695 . 1696) (nil fontified nil 1691 . 1695) (nil fontified nil 1687 . 1691) (1687 . 1734) (nil fontified nil 1686 . 1687) (nil fontified nil 1685 . 1686) (nil fontified nil 1679 . 1685) (nil fontified nil 1672 . 1679) (nil fontified nil 1671 . 1672) (nil fontified nil 1668 . 1671) (nil fontified nil 1662 . 1668) (nil fontified nil 1661 . 1662) (nil fontified nil 1656 . 1661) (nil fontified nil 1650 . 1656) (nil fontified nil 1649 . 1650) (nil fontified nil 1648 . 1649) (nil fontified nil 1644 . 1648) (nil fontified nil 1640 . 1644) (1640 . 1687) (#("_by(name = \"Tank\")
" 0 3 (match-data (0 3 0 1 1 2 2 3) fontified nil) 3 4 (match-data (0 3 0 1 1 2 2 3) fontified nil face (rainbow-delimiters-depth-1-face)) 4 11 (match-data (0 3 0 1 1 2 2 3) fontified nil) 11 17 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face) 17 18 (match-data (0 3 0 1 1 2 2 3) fontified nil face (rainbow-delimiters-depth-1-face)) 18 19 (match-data (0 3 0 1 1 2 2 3) fontified nil rear-nonsticky t)) . 1640) (undo-tree-id3715 . -19) (undo-tree-id3716 . -19) (undo-tree-id3717 . -19) (undo-tree-id3718 . -19) (undo-tree-id3719 . -19) (undo-tree-id3720 . -19) (undo-tree-id3721 . -19) (undo-tree-id3722 . -19) (#("    tank = Role.query.filter" 0 4 (fontified t) 4 8 (fontified t face py-variable-name-face) 8 9 (fontified t) 9 10 (fontified t face font-lock-operator-face) 10 16 (fontified t) 16 21 (match-data (0 2 0 1 1 2) fontified t) 21 22 (match-data (0 2 0 1 1 2) fontified t) 22 28 (match-data (0 3 0 1 1 2 2 3) fontified t)) . -1640) (undo-tree-id3723 . -28) (undo-tree-id3724 . -28) (undo-tree-id3725 . -4) (undo-tree-id3726 . -8) (undo-tree-id3727 . -28) (undo-tree-id3728 . -28) (undo-tree-id3729 . -28) (undo-tree-id3730 . -28) (undo-tree-id3731 . -28) (undo-tree-id3732 . -28) (undo-tree-id3733 . -22) (undo-tree-id3734 . -28) (undo-tree-id3735 . -28) 1668) nil (25919 53601 749791 766000) 0 nil])
([nil nil ((nil fontified nil 1780 . 1781) (nil fontified nil 1779 . 1780) (nil fontified nil 1773 . 1779) (nil fontified nil 1766 . 1773) (nil fontified nil 1765 . 1766) (nil fontified nil 1764 . 1765) (nil fontified nil 1762 . 1764) (nil fontified nil 1756 . 1762) (nil fontified nil 1755 . 1756) (nil fontified nil 1750 . 1755) (nil fontified nil 1744 . 1750) (nil fontified nil 1743 . 1744) (nil fontified nil 1742 . 1743) (nil fontified nil 1738 . 1742) (nil fontified nil 1734 . 1738) (1734 . 1781) (nil fontified nil 1733 . 1734) (nil fontified nil 1732 . 1733) (nil fontified nil 1726 . 1732) (nil fontified nil 1719 . 1726) (nil fontified nil 1718 . 1719) (nil fontified nil 1717 . 1718) (nil fontified nil 1715 . 1717) (nil fontified nil 1709 . 1715) (nil fontified nil 1708 . 1709) (nil fontified nil 1703 . 1708) (nil fontified nil 1697 . 1703) (nil fontified nil 1696 . 1697) (nil fontified nil 1695 . 1696) (nil fontified nil 1691 . 1695) (nil fontified nil 1687 . 1691) (1687 . 1734) (#("y(name = \"Tank\")
" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil) 1 2 (match-data (0 3 0 1 1 2 2 3) fontified nil face (rainbow-delimiters-depth-1-face)) 2 9 (match-data (0 3 0 1 1 2 2 3) fontified nil) 9 15 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face) 15 16 (match-data (0 3 0 1 1 2 2 3) fontified nil face (rainbow-delimiters-depth-1-face)) 16 17 (rear-nonsticky t match-data (0 3 0 1 1 2 2 3) fontified nil)) . 1687) (undo-tree-id3687 . 17) (undo-tree-id3688 . -17) (undo-tree-id3689 . -17) (undo-tree-id3690 . -17) (undo-tree-id3691 . -17) (undo-tree-id3692 . -17) (undo-tree-id3693 . -17) (undo-tree-id3694 . -17) (undo-tree-id3695 . -17) (undo-tree-id3696 . -17) (#("    tank = Role.query.filter_b" 0 4 (fontified t) 4 8 (fontified t face py-variable-name-face) 8 9 (fontified t) 9 10 (fontified t face font-lock-operator-face) 10 16 (fontified t) 16 21 (match-data (0 2 0 1 1 2) fontified t) 21 22 (match-data (0 2 0 1 1 2) fontified t) 22 28 (match-data (0 3 0 1 1 2 2 3) fontified t) 28 30 (match-data (0 3 0 1 1 2 2 3) fontified t)) . -1687) (undo-tree-id3697 . -29) (undo-tree-id3698 . -29) (undo-tree-id3699 . -29) (undo-tree-id3700 . -29) (undo-tree-id3701 . -29) (undo-tree-id3702 . -29) (undo-tree-id3703 . -29) (undo-tree-id3704 . -29) (undo-tree-id3705 . -29) (undo-tree-id3706 . -29) (undo-tree-id3707 . -30) (undo-tree-id3708 . -29) (undo-tree-id3709 . -29) (undo-tree-id3710 . -29) (undo-tree-id3711 . -29) (undo-tree-id3712 . -22) (undo-tree-id3713 . -30) (undo-tree-id3714 . -30) 1717) nil (25919 53601 749778 746000) 0 nil])
([nil nil ((#("tank" 0 4 (fontified t face py-variable-name-face)) . -1644) (undo-tree-id3671 . -3) (undo-tree-id3672 . -3) (undo-tree-id3673 . -3) (undo-tree-id3674 . -2) (undo-tree-id3675 . -2) (undo-tree-id3676 . -2) (undo-tree-id3677 . -2) (undo-tree-id3678 . -4) (undo-tree-id3679 . -3) (undo-tree-id3680 . -3) (undo-tree-id3681 . -3) (undo-tree-id3682 . -4) (undo-tree-id3683 . -3) (undo-tree-id3684 . -3) (undo-tree-id3685 . -4) (undo-tree-id3686 . -4) 1648) nil (25919 53601 749764 744000) 0 nil])
([nil nil ((1644 . 1648)) nil (25919 53601 749758 238000) 0 nil])
([nil nil ((#("tank" 0 4 (fontified t face py-variable-name-face)) . -1691) (undo-tree-id3668 . -4) (undo-tree-id3669 . -4) (undo-tree-id3670 . -4) 1695) nil (25919 53601 749757 619000) 0 nil])
([nil nil ((1691 . 1696)) nil (25919 53601 749756 138000) 0 nil])
([nil nil ((#("tank" 0 4 (fontified t face py-variable-name-face)) . -1739) (undo-tree-id3665 . -4) (undo-tree-id3666 . -4) (undo-tree-id3667 . -4) 1743) nil (25919 53601 749755 475000) 0 nil])
([nil nil ((1739 . 1744)) nil (25919 53601 749753 733000) 0 nil])
([nil nil ((1744 . 1745)) nil (25919 53601 749753 305000) 0 nil])
([nil nil ((#("Tank" 0 4 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-string-face)) . -1680) (undo-tree-id3662 . -4) (undo-tree-id3663 . -4) (undo-tree-id3664 . -4) 1684) nil (25919 53601 749752 621000) 0 nil])
([nil nil ((1680 . 1685)) nil (25919 53601 749751 82000) 0 nil])
([nil nil ((#("Tank" 0 4 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-string-face)) . -1729) (undo-tree-id3659 . -4) (undo-tree-id3660 . -4) (undo-tree-id3661 . -4) 1733) nil (25919 53601 749750 408000) 0 nil])
([nil nil ((1729 . 1734)) nil (25919 53601 749748 818000) 0 nil])
([nil nil ((#("Tank" 0 4 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-string-face)) . -1779) (undo-tree-id3656 . -4) (undo-tree-id3657 . -4) (undo-tree-id3658 . -4) 1783) nil (25919 53601 749747 912000) 0 nil])
([nil nil ((1779 . 1785)) nil (25919 53601 749746 222000) 0 nil])
([nil nil ((1860 . 1868)) nil (25919 53601 749745 757000) 0 nil])
([nil nil ((1868 . 1871)) nil (25919 53601 749745 324000) 0 nil])
([nil nil ((1870 . 1871) (#("  " 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t) 1 2 (match-data (0 3 0 1 1 2 2 3) fontified t)) . 1870) (undo-tree-id3654 . -1) (undo-tree-id3655 . -1) 1871) nil (25919 53601 749744 754000) 0 nil])
([nil nil ((#("=" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t)) . -1869) (undo-tree-id3652 . -1) (undo-tree-id3653 . -1) 1870) nil (25919 53601 749743 224000) 0 nil])
([nil nil ((1868 . 1869) (#("  " 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t) 1 2 (fontified t)) . 1868) (undo-tree-id3650 . -1) (undo-tree-id3651 . -1) 1869) nil (25919 53601 749741 581000) 0 nil])
([nil nil ((#("r" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t)) . -1861) (undo-tree-id3636 . -1) (undo-tree-id3637 . -1) (#("o" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t)) . -1862) (undo-tree-id3638 . -1) (undo-tree-id3639 . -1) (#("l" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t)) . -1863) (undo-tree-id3640 . -1) (undo-tree-id3641 . -1) (#("e" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t)) . -1864) (undo-tree-id3642 . -1) (undo-tree-id3643 . -1) (#("_" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t)) . -1865) (undo-tree-id3644 . -1) (undo-tree-id3645 . -1) (#("i" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t)) . -1866) (undo-tree-id3646 . -1) (undo-tree-id3647 . -1) (#("d" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t)) . -1867) (undo-tree-id3648 . -1) (undo-tree-id3649 . -1) 1868) nil (25919 53601 749738 684000) 0 nil])
([nil nil ((1860 . 1861) (#("  " 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t) 1 2 (fontified t)) . 1860) (undo-tree-id3634 . -1) (undo-tree-id3635 . -1) 1861) nil (25919 53601 749732 18000) 0 nil])
([nil nil ((#("1" 0 1 (fontified t face py-number-face)) . -2927) (undo-tree-id3632 . -1) (undo-tree-id3633 . -1) 2928) nil (25919 53601 749729 823000) 0 nil])
([nil nil ((2927 . 2928)) nil (25919 53601 749727 394000) 0 nil])
([nil nil ((2928 . 2934)) nil (25919 53601 749726 974000) 0 nil])
([nil nil ((#("=" 0 1 (fontified t)) . -3029) (undo-tree-id3630 . -1) (undo-tree-id3631 . -1) 3030) nil (25919 53601 749726 380000) 0 nil])
([nil nil ((#("2" 0 1 (fontified t)) . 3029)) nil (25919 53601 749724 442000) 0 nil])
([nil nil ((3029 . 3038)) nil (25919 53601 749724 15000) 0 nil])
([nil nil ((3155 . 3156)) nil (25919 53601 749723 401000) 0 nil])
([nil nil ((2934 . 2935)) nil (25919 53601 749722 878000) 0 nil])
([nil nil ((3039 . 3040)) nil (25919 53601 749722 265000) 0 nil])
([nil nil ((#("=4" 1 2 (face py-number-face)) . -4379) (4381 . 4389) (#("=4" 1 2 (face py-number-face)) . -4192) (4194 . 4202) (#("=4" 0 1 (fontified t) 1 2 (fontified t face py-number-face)) . -4100) (4102 . 4110) (nil fontified t 3935 . 3936) (nil face py-number-face 3935 . 3936) (#("=4" 0 1 (fontified t) 1 2 (fontified t face py-number-face)) . -3928) (3930 . 3938) (nil fontified t 3218 . 3219) (nil face py-number-face 3218 . 3219) (#("=4" 0 1 (fontified t) 1 2 (fontified t face py-number-face)) . -3211) (3213 . 3221) 3118) nil (25919 53601 749720 711000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t)) . -4380) (undo-tree-id3616 . -1) (undo-tree-id3617 . -1) (#("e" 0 1 (fontified t)) . -4381) (undo-tree-id3618 . -1) (undo-tree-id3619 . -1) (#("a" 0 1 (fontified t)) . -4382) (undo-tree-id3620 . -1) (undo-tree-id3621 . -1) (#("l" 0 1 (fontified t)) . -4383) (undo-tree-id3622 . -1) (undo-tree-id3623 . -1) (#("." 0 1 (fontified t)) . -4384) (undo-tree-id3624 . -1) (undo-tree-id3625 . -1) (#("i" 0 1 (fontified t)) . -4385) (undo-tree-id3626 . -1) (undo-tree-id3627 . -1) (#("d" 0 1 (fontified t)) . -4386) (undo-tree-id3628 . -1) (undo-tree-id3629 . -1) 4387) nil (25919 53601 749715 340000) 0 nil])
([nil nil ((4380 . 4381)) nil (25919 53601 748694 973000) 0 nil])
([nil nil ((#("heal.id" 0 7 (fontified t)) . 3929) (undo-tree-id3614 . -7) (undo-tree-id3615 . -7)) nil (25919 53601 748694 411000) 0 nil])
([nil nil ((3929 . 3930)) nil (25919 53601 748693 328000) 0 nil])
([nil nil ((3487 . 3490)) nil (25919 53601 748692 936000) 0 nil])
([nil nil ((3487 . 3495) (#("rol" 0 3 (fontified nil)) . -3487) (3487 . 3490) (#("role_id=" 0 8 (fontified nil)) . -3487) (3487 . 3495) (#("rol" 0 3 (fontified t)) . -3487) (undo-tree-id3613 . -3) 3490) nil (25919 53601 748691 735000) 0 nil])
([nil nil ((3495 . 3498)) nil (25919 53601 748690 357000) 0 nil])
([nil nil ((3495 . 3500) (#("ran" 0 3 (fontified nil)) . -3495) (3495 . 3498) (#("range" 0 5 (fontified nil)) . -3495) (3495 . 3500) (#("ran" 0 3 (fontified t)) . -3495) (undo-tree-id3612 . -3) 3498) nil (25919 53601 748689 476000) 0 nil])
([nil nil ((3500 . 3501)) nil (25919 53601 748688 246000) 0 nil])
([nil nil ((#("." 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t)) . -3500) (undo-tree-id3610 . -1) (undo-tree-id3611 . -1) 3501) nil (25919 53601 748687 616000) 0 nil])
([nil nil ((3500 . 3506)) nil (25919 53601 748685 727000) 0 nil])
([nil nil ((3678 . 3682)) nil (25919 53601 748685 319000) 0 nil])
([nil nil ((3679 . 3687) (#("rol" 0 3 (fontified nil)) . -3679) (3679 . 3682) (#("role_id=" 0 8 (fontified nil)) . -3679) (3679 . 3687) (#("rol" 0 3 (match-data (0 2 0 1 1 2) fontified t)) . -3679) (undo-tree-id3609 . -3) 3682) nil (25919 53601 748684 266000) 0 nil])
([nil nil ((3687 . 3693)) nil (25919 53601 748683 61000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -3692) (undo-tree-id3607 . -1) (undo-tree-id3608 . -1) 3693) nil (25919 53601 748682 461000) 0 nil])
([nil nil ((3692 . 3697)) nil (25919 53601 748681 316000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -3696) (undo-tree-id3606 . -1) 3697) nil (25919 53601 748680 705000) 0 nil])
([nil nil ((3696 . 3697)) nil (25919 53601 748679 778000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4681 . 4682) (nil fontified nil 4672 . 4682) (nil fontified nil 4664 . 4672) (4664 . 4682)) nil (25919 53601 748679 116000) 0 nil])
([nil nil ((4682 . 4683)) nil (25919 53601 748678 429000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4591 . 4592) (nil fontified nil 4591 . 4592) (nil fontified nil 4583 . 4591) (nil fontified nil 4576 . 4583) (4576 . 4592)) nil (25919 53601 748677 908000) 0 nil])
([nil nil ((4576 . 4577)) nil (25919 53601 748677 81000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . 4133) (#("i" 0 1 (fontified t)) . 4133) (undo-tree-id3605 . -1) (#("." 0 1 (fontified t)) . 4133) (#("l" 0 1 (fontified t)) . 4133) (#("a" 0 1 (fontified t)) . 4133) (#("e" 0 1 (fontified t)) . 4133) (#("h" 0 1 (fontified t)) . 4133)) nil (25919 53601 748675 595000) 0 nil])
([nil nil ((4133 . 4134)) nil (25919 53601 748674 323000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . 4219) (#("i" 0 1 (fontified t)) . 4219) (#("." 0 1 (fontified t)) . 4219) (#("l" 0 1 (fontified t)) . 4219) (#("a" 0 1 (fontified t)) . 4219) (#("e" 0 1 (fontified t)) . 4219) (#("h" 0 1 (fontified t)) . 4219)) nil (25919 53601 748673 136000) 0 nil])
([nil nil ((4219 . 4220)) nil (25919 53601 748672 206000) 0 nil])
([nil nil ((#(" " 0 1 (fontified nil)) . 2934) (2934 . 2935) (#(" " 0 1 (fontified t)) . 2934) (undo-tree-id3603 . -1) (undo-tree-id3604 . -1) 2935) nil (25919 53601 748671 470000) 0 nil])
([nil nil ((#(" " 0 1 (fontified nil)) . 3038) (3038 . 3039) (#(" " 0 1 (fontified t)) . 3038) (undo-tree-id3602 . -1) 3039) nil (25919 53601 748669 803000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4136 . 4137) (nil fontified nil 4136 . 4137) (nil fontified nil 4121 . 4136) (nil fontified nil 4120 . 4121) (4120 . 4137)) nil (25919 53601 748668 774000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4239 . 4240) (nil fontified nil 4239 . 4240) (nil fontified nil 4224 . 4239) (nil fontified nil 4223 . 4224) (4223 . 4240)) nil (25919 53601 748667 981000) 0 nil])
([nil nil ((#("tank" 0 4 (fontified t)) . -4232) (undo-tree-id3599 . -4) (undo-tree-id3600 . -4) (undo-tree-id3601 . -4) 4236) nil (25919 53601 748667 111000) 0 nil])
([nil nil ((4232 . 4237)) nil (25919 53601 748665 563000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3970 . 3971) (nil fontified nil 3970 . 3971) (nil fontified nil 3955 . 3970) (nil fontified nil 3954 . 3955) (3954 . 3971)) nil (25919 53601 748665 41000) 0 nil])
([nil nil ((#("tank" 0 4 (fontified t)) . -3963) (undo-tree-id3596 . -4) (undo-tree-id3597 . -4) (undo-tree-id3598 . -4) 3967) nil (25919 53601 748664 81000) 0 nil])
([nil nil ((3963 . 3966)) nil (25919 53601 748662 507000) 0 nil])
([nil nil ((3966 . 3968)) nil (25919 53601 748662 99000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3878 . 3879) (nil fontified nil 3878 . 3879) (nil fontified nil 3863 . 3878) (nil fontified nil 3862 . 3863) (3862 . 3879)) nil (25919 53601 748661 496000) 0 nil])
([nil nil ((3875 . 3878)) nil (25919 53601 748660 634000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -3871) (undo-tree-id3435 . -1) (undo-tree-id3436 . -1) (undo-tree-id3437 . -1) (undo-tree-id3438 . -1) (undo-tree-id3439 . -1) (undo-tree-id3440 . -1) (undo-tree-id3441 . -1) (undo-tree-id3442 . -1) (undo-tree-id3443 . -1) (undo-tree-id3444 . -1) (undo-tree-id3445 . -1) (undo-tree-id3446 . -1) (undo-tree-id3447 . -1) (undo-tree-id3448 . -1) (undo-tree-id3449 . -1) (undo-tree-id3450 . -1) (undo-tree-id3451 . -1) (undo-tree-id3452 . -1) (undo-tree-id3453 . -1) (undo-tree-id3454 . -1) (undo-tree-id3455 . -1) (undo-tree-id3456 . -1) (undo-tree-id3457 . -1) (undo-tree-id3458 . -1) (undo-tree-id3459 . -1) (undo-tree-id3460 . -1) (undo-tree-id3461 . -1) (undo-tree-id3462 . -1) (undo-tree-id3463 . -1) (undo-tree-id3464 . -1) (undo-tree-id3465 . -1) (undo-tree-id3466 . -1) (undo-tree-id3467 . -1) (undo-tree-id3468 . -1) (undo-tree-id3469 . -1) (undo-tree-id3470 . -1) (undo-tree-id3471 . -1) (undo-tree-id3472 . -1) (undo-tree-id3473 . -1) (undo-tree-id3474 . -1) (#("a" 0 1 (fontified t)) . -3872) (undo-tree-id3475 . -1) (undo-tree-id3476 . -1) (undo-tree-id3477 . -1) (undo-tree-id3478 . -1) (undo-tree-id3479 . -1) (undo-tree-id3480 . -1) (undo-tree-id3481 . -1) (undo-tree-id3482 . -1) (undo-tree-id3483 . -1) (undo-tree-id3484 . -1) (undo-tree-id3485 . -1) (undo-tree-id3486 . -1) (undo-tree-id3487 . -1) (undo-tree-id3488 . -1) (undo-tree-id3489 . -1) (undo-tree-id3490 . -1) (undo-tree-id3491 . -1) (undo-tree-id3492 . -1) (undo-tree-id3493 . -1) (undo-tree-id3494 . -1) (undo-tree-id3495 . -1) (undo-tree-id3496 . -1) (undo-tree-id3497 . -1) (undo-tree-id3498 . -1) (undo-tree-id3499 . -1) (undo-tree-id3500 . -1) (undo-tree-id3501 . -1) (undo-tree-id3502 . -1) (undo-tree-id3503 . -1) (undo-tree-id3504 . -1) (undo-tree-id3505 . -1) (undo-tree-id3506 . -1) (#("n" 0 1 (fontified t)) . -3873) (undo-tree-id3507 . -1) (undo-tree-id3508 . -1) (undo-tree-id3509 . -1) (undo-tree-id3510 . -1) (undo-tree-id3511 . -1) (undo-tree-id3512 . -1) (undo-tree-id3513 . -1) (undo-tree-id3514 . -1) (undo-tree-id3515 . -1) (undo-tree-id3516 . -1) (undo-tree-id3517 . -1) (undo-tree-id3518 . -1) (undo-tree-id3519 . -1) (undo-tree-id3520 . -1) (undo-tree-id3521 . -1) (undo-tree-id3522 . -1) (undo-tree-id3523 . -1) (undo-tree-id3524 . -1) (undo-tree-id3525 . -1) (undo-tree-id3526 . -1) (undo-tree-id3527 . -1) (undo-tree-id3528 . -1) (undo-tree-id3529 . -1) (undo-tree-id3530 . -1) (undo-tree-id3531 . -1) (undo-tree-id3532 . -1) (undo-tree-id3533 . -1) (undo-tree-id3534 . -1) (undo-tree-id3535 . -1) (#("k" 0 1 (fontified t)) . -3874) (undo-tree-id3536 . -1) (undo-tree-id3537 . -1) (undo-tree-id3538 . -1) (undo-tree-id3539 . -1) (undo-tree-id3540 . -1) (undo-tree-id3541 . -1) (undo-tree-id3542 . -1) (undo-tree-id3543 . -1) (undo-tree-id3544 . -1) (undo-tree-id3545 . -1) (undo-tree-id3546 . -1) (undo-tree-id3547 . -1) (undo-tree-id3548 . -1) (undo-tree-id3549 . -1) (undo-tree-id3550 . -1) (undo-tree-id3551 . -1) (undo-tree-id3552 . -1) (undo-tree-id3553 . -1) (undo-tree-id3554 . -1) (undo-tree-id3555 . -1) (undo-tree-id3556 . -1) (undo-tree-id3557 . -1) (undo-tree-id3558 . -1) (undo-tree-id3559 . -1) (undo-tree-id3560 . -1) (undo-tree-id3561 . -1) (#("h" 0 1 (fontified t)) . -3875) (undo-tree-id3562 . -1) (undo-tree-id3563 . -1) (undo-tree-id3564 . -1) (undo-tree-id3565 . -1) (undo-tree-id3566 . -1) (undo-tree-id3567 . -1) (undo-tree-id3568 . -1) (undo-tree-id3569 . -1) (undo-tree-id3570 . -1) (undo-tree-id3571 . -1) (undo-tree-id3572 . -1) (undo-tree-id3573 . -1) (undo-tree-id3574 . -1) (undo-tree-id3575 . -1) (undo-tree-id3576 . -1) (undo-tree-id3577 . -1) (#("e" 0 1 (fontified t)) . -3876) (undo-tree-id3578 . -1) (undo-tree-id3579 . -1) (undo-tree-id3580 . -1) (undo-tree-id3581 . -1) (undo-tree-id3582 . -1) (undo-tree-id3583 . -1) (undo-tree-id3584 . -1) (undo-tree-id3585 . -1) (undo-tree-id3586 . -1) (undo-tree-id3587 . -1) (undo-tree-id3588 . -1) (undo-tree-id3589 . -1) (#("a" 0 1 (fontified t)) . -3877) (undo-tree-id3590 . -1) (undo-tree-id3591 . -1) (undo-tree-id3592 . -1) (undo-tree-id3593 . -1) (undo-tree-id3594 . -1) (undo-tree-id3595 . -1) 3878) nil (25919 53601 748654 964000) 0 nil])
([nil nil ((3871 . 3875)) nil (25919 53601 748590 403000) 0 nil])
([nil nil ((nil fontified nil 4474 . 4475) (nil fontified nil 4471 . 4474) (nil fontified nil 4458 . 4471) (nil fontified nil 4457 . 4458) (4457 . 4475)) nil (25919 53601 748586 626000) 0 nil])
([nil nil ((1639 . 1647) (t 25919 53601 749228 65000)) nil (25919 54307 173180 906000) 0 nil])
([nil nil ((1695 . 1696)) nil (25919 54307 173180 227000) 0 nil])
([nil nil ((#("," 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t)) . -1695) (undo-tree-id3877 . -1) (undo-tree-id3878 . -1) (undo-tree-id3879 . -1) (undo-tree-id3880 . -1) (undo-tree-id3881 . -1) (undo-tree-id3882 . -1) (undo-tree-id3883 . -1) (undo-tree-id3884 . -1) (undo-tree-id3885 . -1) (undo-tree-id3886 . -1) (undo-tree-id3887 . -1) (undo-tree-id3888 . -1) (undo-tree-id3889 . -1) (undo-tree-id3890 . -1) (undo-tree-id3891 . -1) 1696) nil (25919 54307 173178 229000) 0 nil])
([nil nil ((1695 . 1703)) nil (25919 54307 173161 586000) 0 nil])
([nil nil ((1752 . 1760)) nil (25919 54307 173160 276000) 0 nil])
([nil nil ((1811 . 1819)) nil (25919 54307 173156 327000) 0 nil])
([nil nil ((#("2" 0 1 (fontified t face py-number-face)) . 3351) (t 25919 54307 179049 738000)) nil (25919 54337 619643 323000) 0 nil])
([nil nil ((3351 . 3360)) nil (25919 54337 619642 435000) 0 nil])
([nil nil ((#(" " 0 1 (fontified nil)) . 3359) (3359 . 3360) (#(" " 0 1 (fontified t)) . 3359) (undo-tree-id3892 . -1) (undo-tree-id3893 . -1) (undo-tree-id3894 . -1) (undo-tree-id3895 . -1) (undo-tree-id3896 . -1) (undo-tree-id3897 . -1) (undo-tree-id3898 . -1) (undo-tree-id3899 . -1) (undo-tree-id3900 . -1) (undo-tree-id3901 . -1) (undo-tree-id3902 . -1) (undo-tree-id3903 . -1) (undo-tree-id3904 . -1) 3360) nil (25919 54337 619638 648000) 0 nil])
([nil nil ((4894 . 4898) (#("    " 0 4 (match-data (0 0) fontified nil)) . 4893) (undo-tree-id3925 . -4) (undo-tree-id3926 . -4) (4892 . 4898) (t 25919 54337 619041 977000)) nil (25919 56556 882291 667000) 0 nil])
([nil nil ((4898 . 4899)) nil (25919 56556 882289 38000) 0 nil])
([nil nil ((4899 . 4908)) nil (25919 56556 882288 546000) 0 nil])
([nil nil ((4908 . 4913)) nil (25919 56556 882288 114000) 0 nil])
([nil nil ((4913 . 4921)) nil (25919 56556 882287 516000) 0 nil])
([nil nil ((#("Player, Character, Specialization, Buff, Role" 0 8 (match-data (0 2 0 1 1 2) fontified t) 8 19 (match-data (0 3 0 1 1 2 2 3) fontified t) 19 35 (match-data (0 2 0 1 1 2) fontified t) 35 45 (match-data (0 2 0 1 1 2) fontified t)) . 21) (undo-tree-id3923 . -45) (undo-tree-id3924 . -45)) nil (25919 56556 882287 71000) 0 nil])
([nil nil ((21 . 22)) nil (25919 56556 882285 931000) 0 nil])
([nil nil ((4877 . 4880)) nil (25919 56556 882285 273000) 0 nil])
([nil nil ((4877 . 4885) (#("Sch" 0 3 (fontified nil)) . -4877) (4877 . 4880) (#("Schedule" 0 8 (fontified nil)) . -4877) (4877 . 4885) (#("Sch" 0 3 (match-data (0 0) fontified t)) . -4877) (undo-tree-id3922 . -3) 4880) nil (25919 56556 882284 450000) 0 nil])
([nil nil ((4885 . 4886)) nil (25919 56556 882283 144000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -4886) (undo-tree-id3920 . -1) (undo-tree-id3921 . -1) 4887) nil (25919 56556 882282 475000) 0 nil])
([nil nil ((4886 . 4887)) nil (25919 56556 882281 257000) 0 nil])
([nil nil ((4886 . 4896) (#("p" 0 1 (fontified nil)) . -4886) (4886 . 4887) (#("player_id=" 0 10 (fontified nil)) . -4886) (4886 . 4896) (#("p" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t)) . -4886) (undo-tree-id3918 . -1) (undo-tree-id3919 . -1) 4887) nil (25919 56556 882280 331000) 0 nil])
([nil nil ((4896 . 4898)) nil (25919 56556 882278 615000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t)) . -4896) (undo-tree-id3914 . -1) (undo-tree-id3915 . -1) (#("a" 0 1 (fontified t)) . -4897) (undo-tree-id3916 . -1) (undo-tree-id3917 . -1) 4898) nil (25919 56556 882277 800000) 0 nil])
([nil nil ((4896 . 4897)) nil (25919 56556 882275 438000) 0 nil])
([nil nil ((4896 . 4902) (#("B" 0 1 (fontified nil)) . -4896) (4896 . 4897) (#("BALTON" 0 6 (fontified nil)) . -4896) (4896 . 4902) (#("B" 0 1 (fontified t)) . -4896) (undo-tree-id3912 . -1) (undo-tree-id3913 . -1) 4897) nil (25919 56556 882274 558000) 0 nil])
([nil nil ((4902 . 4905)) nil (25919 56556 882272 620000) 0 nil])
([nil nil ((4905 . 4910)) nil (25919 56556 882271 778000) 0 nil])
([nil nil ((4910 . 4923)) nil (25919 56556 882271 272000) 0 nil])
([nil nil ((4907 . 4908)) nil (25919 56556 882270 919000) 0 nil])
([nil nil ((4907 . 4917) (#("a" 0 1 (fontified nil)) . -4907) (4907 . 4908) (#("available=" 0 10 (fontified nil)) . -4907) (4907 . 4917) (#("a" 0 1 (match-data (0 1 0 1) fontified t)) . -4907) (undo-tree-id3911 . -1) 4908) nil (25919 56556 882270 20000) 0 nil])
([nil nil ((4933 . 4938)) nil (25919 56556 882268 598000) 0 nil])
([nil nil ((4938 . 4942)) nil (25919 56556 882268 58000) 0 nil])
([nil nil ((4941 . 4948) (#("s" 0 1 (fontified nil)) . -4941) (4941 . 4942) (#("session" 0 7 (fontified nil)) . -4941) (4941 . 4948) (#("s" 0 1 (match-data (0 1 0 1) fontified t)) . -4941) (undo-tree-id3910 . -1) 4942) nil (25919 56556 882267 176000) 0 nil])
([nil nil ((4948 . 4950)) nil (25919 56556 882265 525000) 0 nil])
([nil nil ((4949 . 4952) (#("a" 0 1 (fontified nil)) . -4949) (4949 . 4950) (#("add" 0 3 (fontified nil)) . -4949) (4949 . 4952) (#("a" 0 1 (match-data (0 1 0 1) fontified t)) . -4949) (undo-tree-id3909 . -1) 4950) nil (25919 56556 882264 570000) 0 nil])
([nil nil ((4952 . 4954)) nil (25919 56556 882262 999000) 0 nil])
([nil nil ((#(")" 0 1 (match-data (0 1 0 1) fontified t face (rainbow-delimiters-depth-1-face))) . -4953) (undo-tree-id3907 . -1) (undo-tree-id3908 . -1) 4954) nil (25919 56556 882262 369000) 0 nil])
([nil nil ((4953 . 4956)) nil (25919 56556 882260 771000) 0 nil])
([nil nil ((4953 . 4958) (#("sch" 0 3 (fontified nil)) . -4953) (4953 . 4956) (#("sched" 0 5 (fontified nil)) . -4953) (4953 . 4958) (#("sch" 0 3 (match-data (0 1 0 1) fontified t)) . -4953) (undo-tree-id3905 . -3) (undo-tree-id3906 . -3) 4956) nil (25919 56556 882259 126000) 0 nil])
([nil nil ((4958 . 4959)) nil (25919 56556 882248 948000) 0 nil])
([nil nil ((4916 . 4917)) nil (25919 56556 882248 163000) 0 nil])
([nil nil ((4918 . 4919)) nil (25919 56556 882247 289000) 0 nil])
([nil nil ((4961 . 4962)) nil (25919 56556 882244 39000) 0 nil])
([nil nil ((#("s" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t)) . -4961) (undo-tree-id4480 . -1) (undo-tree-id4481 . -1) (undo-tree-id4482 . -1) (undo-tree-id4483 . -1) (undo-tree-id4484 . -1) (undo-tree-id4485 . -1) (undo-tree-id4486 . -1) (undo-tree-id4487 . -1) (undo-tree-id4488 . -1) 4962 (4961 . 4962) (#("
" 0 1 (fontified t)) . -4961) (undo-tree-id4489 . -1) (undo-tree-id4490 . -1) (undo-tree-id4491 . -1) (undo-tree-id4492 . -1) (undo-tree-id4493 . -1) (undo-tree-id4494 . -1) (undo-tree-id4495 . -1) (undo-tree-id4496 . -1) (undo-tree-id4497 . -1) (undo-tree-id4498 . -1) (undo-tree-id4499 . -1) (undo-tree-id4500 . -1) (undo-tree-id4501 . -1) (undo-tree-id4502 . -1) (undo-tree-id4503 . -1) (undo-tree-id4504 . -1) (undo-tree-id4505 . -1) (undo-tree-id4506 . -1) 4962 (t 25919 56556 878489 976000)) nil (25919 56670 839372 528000) 0 nil])
([nil nil ((4961 . 4966) 4960) nil (25919 56670 839359 823000) 0 nil])
([nil nil ((4966 . 4970)) nil (25919 56670 839359 262000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -4966) (undo-tree-id4476 . -1) (#("c" 0 1 (fontified t)) . -4967) (undo-tree-id4477 . -1) (#("h" 0 1 (fontified t)) . -4968) (undo-tree-id4478 . -1) (#("e" 0 1 (fontified t)) . -4969) (undo-tree-id4479 . -1) 4970) nil (25919 56670 839358 554000) 0 nil])
([nil nil ((4966 . 4971)) nil (25919 56670 839356 422000) 0 nil])
([nil nil ((#("C" 0 1 (fontified t)) . -4966) (undo-tree-id4471 . -1) (#("h" 0 1 (fontified t)) . -4967) (undo-tree-id4472 . -1) (#("e" 0 1 (fontified t)) . -4968) (undo-tree-id4473 . -1) (#("c" 0 1 (fontified t)) . -4969) (undo-tree-id4474 . -1) (#("k" 0 1 (fontified t)) . -4970) (undo-tree-id4475 . -1) 4971) nil (25919 56670 839355 651000) 0 nil])
([nil nil ((4966 . 4971)) nil (25919 56670 839352 398000) 0 nil])
([nil nil ((4971 . 4978)) nil (25919 56670 839352 31000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -4974) (undo-tree-id4467 . -1) (#("c" 0 1 (fontified t)) . -4975) (undo-tree-id4468 . -1) (#("h" 0 1 (fontified t)) . -4976) (undo-tree-id4469 . -1) (#("e" 0 1 (fontified t)) . -4977) (undo-tree-id4470 . -1) 4978) nil (25919 56670 839351 245000) 0 nil])
([nil nil ((4974 . 4975)) nil (25919 56670 839348 925000) 0 nil])
([nil nil ((4974 . 4982) (#("S" 0 1 (fontified nil)) . -4974) (4974 . 4975) (#("Schedule" 0 8 (fontified nil)) . -4974) (4974 . 4982) (#("S" 0 1 (fontified t)) . -4974) (undo-tree-id4465 . -1) (undo-tree-id4466 . -1) 4975) nil (25919 56670 839348 27000) 0 nil])
([nil nil ((4982 . 4985)) nil (25919 56670 839346 169000) 0 nil])
([nil nil ((4983 . 4988) (#("qu" 0 2 (fontified nil)) . -4983) (4983 . 4985) (#("query" 0 5 (fontified nil)) . -4983) (4983 . 4988) (#("qu" 0 2 (match-data (0 1 0 1) fontified t)) . -4983) (undo-tree-id4460 . -2) (undo-tree-id4461 . -1) (undo-tree-id4462 . -2) (undo-tree-id4463 . -2) (undo-tree-id4464 . -2) 4985) nil (25919 56670 839345 162000) 0 nil])
([nil nil ((4988 . 4992)) nil (25919 56670 839342 139000) 0 nil])
([nil nil ((4989 . 4998) (#("fi" 0 2 (fontified nil)) . -4989) (4989 . 4991) (#("filter_by" 0 9 (fontified nil)) . -4989) (4989 . 4998) (#("fil" 0 3 (match-data (0 2 0 1 1 2) fontified t)) . -4989) (undo-tree-id4449 . -3) (undo-tree-id4450 . -3) (undo-tree-id4451 . -1) (undo-tree-id4452 . -2) (undo-tree-id4453 . -3) (undo-tree-id4454 . -3) (undo-tree-id4455 . -3) (undo-tree-id4456 . -3) (undo-tree-id4457 . -3) (undo-tree-id4458 . -3) (undo-tree-id4459 . -3) 4992) nil (25919 56670 839341 52000) 0 nil])
([nil nil ((4998 . 4999)) nil (25919 56670 839335 539000) 0 nil])
([nil nil ((4999 . 5003)) nil (25919 56670 839335 45000) 0 nil])
([nil nil ((#("a" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t)) . -5002) (undo-tree-id4438 . -1) (undo-tree-id4439 . -1) (undo-tree-id4440 . -1) (undo-tree-id4441 . -1) (undo-tree-id4442 . -1) (undo-tree-id4443 . -1) (undo-tree-id4444 . -1) (undo-tree-id4445 . -1) (undo-tree-id4446 . -1) (undo-tree-id4447 . -1) (undo-tree-id4448 . -1) 5003) nil (25919 56670 839334 182000) 0 nil])
([nil nil ((5002 . 5015)) nil (25919 56670 839329 820000) 0 nil])
([nil nil ((5015 . 5016)) nil (25919 56670 839329 187000) 0 nil])
([nil nil ((#("a" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t)) . -5010) (undo-tree-id4174 . -1) (undo-tree-id4175 . -1) (undo-tree-id4176 . -1) (undo-tree-id4177 . -1) (undo-tree-id4178 . -1) (undo-tree-id4179 . -1) (undo-tree-id4180 . -1) (undo-tree-id4181 . -1) (undo-tree-id4182 . -1) (undo-tree-id4183 . -1) (undo-tree-id4184 . -1) (undo-tree-id4185 . -1) (undo-tree-id4186 . -1) (undo-tree-id4187 . -1) (undo-tree-id4188 . -1) (undo-tree-id4189 . -1) (undo-tree-id4190 . -1) (undo-tree-id4191 . -1) (undo-tree-id4192 . -1) (undo-tree-id4193 . -1) (undo-tree-id4194 . -1) (undo-tree-id4195 . -1) (undo-tree-id4196 . -1) (undo-tree-id4197 . -1) (undo-tree-id4198 . -1) (undo-tree-id4199 . -1) (undo-tree-id4200 . -1) (undo-tree-id4201 . -1) (undo-tree-id4202 . -1) (undo-tree-id4203 . -1) (undo-tree-id4204 . -1) (undo-tree-id4205 . -1) (undo-tree-id4206 . -1) (undo-tree-id4207 . -1) (undo-tree-id4208 . -1) (undo-tree-id4209 . -1) (undo-tree-id4210 . -1) (undo-tree-id4211 . -1) (undo-tree-id4212 . -1) (undo-tree-id4213 . -1) (undo-tree-id4214 . -1) (undo-tree-id4215 . -1) (undo-tree-id4216 . -1) (undo-tree-id4217 . -1) (undo-tree-id4218 . -1) (undo-tree-id4219 . -1) (undo-tree-id4220 . -1) (undo-tree-id4221 . -1) (undo-tree-id4222 . -1) (undo-tree-id4223 . -1) (undo-tree-id4224 . -1) (undo-tree-id4225 . -1) (undo-tree-id4226 . -1) (undo-tree-id4227 . -1) (undo-tree-id4228 . -1) (undo-tree-id4229 . -1) (undo-tree-id4230 . -1) (undo-tree-id4231 . -1) (undo-tree-id4232 . -1) (undo-tree-id4233 . -1) (undo-tree-id4234 . -1) (undo-tree-id4235 . -1) (undo-tree-id4236 . -1) (undo-tree-id4237 . -1) (undo-tree-id4238 . -1) (undo-tree-id4239 . -1) (undo-tree-id4240 . -1) (undo-tree-id4241 . -1) (undo-tree-id4242 . -1) (undo-tree-id4243 . -1) (undo-tree-id4244 . -1) (#("l" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t)) . -5011) (undo-tree-id4245 . -1) (undo-tree-id4246 . -1) (undo-tree-id4247 . -1) (undo-tree-id4248 . -1) (undo-tree-id4249 . -1) (undo-tree-id4250 . -1) (undo-tree-id4251 . -1) (undo-tree-id4252 . -1) (undo-tree-id4253 . -1) (undo-tree-id4254 . -1) (undo-tree-id4255 . -1) (undo-tree-id4256 . -1) (undo-tree-id4257 . -1) (undo-tree-id4258 . -1) (undo-tree-id4259 . -1) (undo-tree-id4260 . -1) (undo-tree-id4261 . -1) (undo-tree-id4262 . -1) (undo-tree-id4263 . -1) (undo-tree-id4264 . -1) (undo-tree-id4265 . -1) (undo-tree-id4266 . -1) (undo-tree-id4267 . -1) (undo-tree-id4268 . -1) (undo-tree-id4269 . -1) (undo-tree-id4270 . -1) (undo-tree-id4271 . -1) (undo-tree-id4272 . -1) (undo-tree-id4273 . -1) (undo-tree-id4274 . -1) (undo-tree-id4275 . -1) (undo-tree-id4276 . -1) (undo-tree-id4277 . -1) (undo-tree-id4278 . -1) (undo-tree-id4279 . -1) (undo-tree-id4280 . -1) (undo-tree-id4281 . -1) (undo-tree-id4282 . -1) (undo-tree-id4283 . -1) (undo-tree-id4284 . -1) (undo-tree-id4285 . -1) (undo-tree-id4286 . -1) (undo-tree-id4287 . -1) (undo-tree-id4288 . -1) (undo-tree-id4289 . -1) (undo-tree-id4290 . -1) (undo-tree-id4291 . -1) (undo-tree-id4292 . -1) (undo-tree-id4293 . -1) (undo-tree-id4294 . -1) (undo-tree-id4295 . -1) (undo-tree-id4296 . -1) (undo-tree-id4297 . -1) (undo-tree-id4298 . -1) (undo-tree-id4299 . -1) (undo-tree-id4300 . -1) (undo-tree-id4301 . -1) (undo-tree-id4302 . -1) (#("t" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t)) . -5012) (undo-tree-id4303 . -1) (undo-tree-id4304 . -1) (undo-tree-id4305 . -1) (undo-tree-id4306 . -1) (undo-tree-id4307 . -1) (undo-tree-id4308 . -1) (undo-tree-id4309 . -1) (undo-tree-id4310 . -1) (undo-tree-id4311 . -1) (undo-tree-id4312 . -1) (undo-tree-id4313 . -1) (undo-tree-id4314 . -1) (undo-tree-id4315 . -1) (undo-tree-id4316 . -1) (undo-tree-id4317 . -1) (undo-tree-id4318 . -1) (undo-tree-id4319 . -1) (undo-tree-id4320 . -1) (undo-tree-id4321 . -1) (undo-tree-id4322 . -1) (undo-tree-id4323 . -1) (undo-tree-id4324 . -1) (undo-tree-id4325 . -1) (undo-tree-id4326 . -1) (undo-tree-id4327 . -1) (undo-tree-id4328 . -1) (undo-tree-id4329 . -1) (undo-tree-id4330 . -1) (undo-tree-id4331 . -1) (undo-tree-id4332 . -1) (undo-tree-id4333 . -1) (undo-tree-id4334 . -1) (undo-tree-id4335 . -1) (undo-tree-id4336 . -1) (undo-tree-id4337 . -1) (undo-tree-id4338 . -1) (undo-tree-id4339 . -1) (undo-tree-id4340 . -1) (undo-tree-id4341 . -1) (undo-tree-id4342 . -1) (undo-tree-id4343 . -1) (undo-tree-id4344 . -1) (undo-tree-id4345 . -1) (undo-tree-id4346 . -1) (undo-tree-id4347 . -1) (undo-tree-id4348 . -1) (undo-tree-id4349 . -1) (undo-tree-id4350 . -1) (#("o" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t)) . -5013) (undo-tree-id4351 . -1) (undo-tree-id4352 . -1) (undo-tree-id4353 . -1) (undo-tree-id4354 . -1) (undo-tree-id4355 . -1) (undo-tree-id4356 . -1) (undo-tree-id4357 . -1) (undo-tree-id4358 . -1) (undo-tree-id4359 . -1) (undo-tree-id4360 . -1) (undo-tree-id4361 . -1) (undo-tree-id4362 . -1) (undo-tree-id4363 . -1) (undo-tree-id4364 . -1) (undo-tree-id4365 . -1) (undo-tree-id4366 . -1) (undo-tree-id4367 . -1) (undo-tree-id4368 . -1) (undo-tree-id4369 . -1) (undo-tree-id4370 . -1) (undo-tree-id4371 . -1) (undo-tree-id4372 . -1) (undo-tree-id4373 . -1) (undo-tree-id4374 . -1) (undo-tree-id4375 . -1) (undo-tree-id4376 . -1) (undo-tree-id4377 . -1) (undo-tree-id4378 . -1) (undo-tree-id4379 . -1) (undo-tree-id4380 . -1) (undo-tree-id4381 . -1) (undo-tree-id4382 . -1) (undo-tree-id4383 . -1) (undo-tree-id4384 . -1) (undo-tree-id4385 . -1) (undo-tree-id4386 . -1) (undo-tree-id4387 . -1) (undo-tree-id4388 . -1) (undo-tree-id4389 . -1) (#("n" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t)) . -5014) (undo-tree-id4390 . -1) (undo-tree-id4391 . -1) (undo-tree-id4392 . -1) (undo-tree-id4393 . -1) (undo-tree-id4394 . -1) (undo-tree-id4395 . -1) (undo-tree-id4396 . -1) (undo-tree-id4397 . -1) (undo-tree-id4398 . -1) (undo-tree-id4399 . -1) (undo-tree-id4400 . -1) (undo-tree-id4401 . -1) (undo-tree-id4402 . -1) (undo-tree-id4403 . -1) (undo-tree-id4404 . -1) (undo-tree-id4405 . -1) (undo-tree-id4406 . -1) (undo-tree-id4407 . -1) (undo-tree-id4408 . -1) (undo-tree-id4409 . -1) (undo-tree-id4410 . -1) (undo-tree-id4411 . -1) (undo-tree-id4412 . -1) (undo-tree-id4413 . -1) (undo-tree-id4414 . -1) (undo-tree-id4415 . -1) (undo-tree-id4416 . -1) (undo-tree-id4417 . -1) (undo-tree-id4418 . -1) (undo-tree-id4419 . -1) (#("." 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t)) . -5015) (undo-tree-id4420 . -1) (undo-tree-id4421 . -1) (undo-tree-id4422 . -1) (undo-tree-id4423 . -1) (undo-tree-id4424 . -1) (undo-tree-id4425 . -1) (undo-tree-id4426 . -1) (undo-tree-id4427 . -1) (undo-tree-id4428 . -1) (undo-tree-id4429 . -1) (undo-tree-id4430 . -1) (undo-tree-id4431 . -1) (undo-tree-id4432 . -1) (undo-tree-id4433 . -1) (undo-tree-id4434 . -1) (undo-tree-id4435 . -1) (undo-tree-id4436 . -1) (undo-tree-id4437 . -1) 5016) nil (25919 56670 839320 663000) 0 nil])
([nil nil ((5010 . 5011)) nil (25919 56670 838564 352000) 0 nil])
([nil nil ((5009 . 5015) (#("BA" 0 2 (fontified nil)) . -5009) (5009 . 5011) (#("BALTON" 0 6 (fontified nil)) . -5009) (5009 . 5015) (#("BA" 0 2 (match-data (0 3 0 1 1 2 2 3) fontified t)) . -5009) (undo-tree-id4090 . -2) (undo-tree-id4091 . -2) (undo-tree-id4092 . -1) (undo-tree-id4093 . -1) (undo-tree-id4094 . -1) (undo-tree-id4095 . -1) (undo-tree-id4096 . -1) (undo-tree-id4097 . -1) (undo-tree-id4098 . -1) (undo-tree-id4099 . -1) (undo-tree-id4100 . -1) (undo-tree-id4101 . -1) (undo-tree-id4102 . -1) (undo-tree-id4103 . -1) (undo-tree-id4104 . -1) (undo-tree-id4105 . -1) (undo-tree-id4106 . -1) (undo-tree-id4107 . -1) (undo-tree-id4108 . -1) (undo-tree-id4109 . -1) (undo-tree-id4110 . -1) (undo-tree-id4111 . -1) (undo-tree-id4112 . -1) (undo-tree-id4113 . -1) (undo-tree-id4114 . -1) (undo-tree-id4115 . -1) (undo-tree-id4116 . -1) (undo-tree-id4117 . -1) (undo-tree-id4118 . -1) (undo-tree-id4119 . -1) (undo-tree-id4120 . -1) (undo-tree-id4121 . -1) (undo-tree-id4122 . -1) (undo-tree-id4123 . -1) (undo-tree-id4124 . -1) (undo-tree-id4125 . -1) (undo-tree-id4126 . -1) (undo-tree-id4127 . -1) (undo-tree-id4128 . -1) (undo-tree-id4129 . -1) (undo-tree-id4130 . -1) (undo-tree-id4131 . -1) (undo-tree-id4132 . -1) (undo-tree-id4133 . -1) (undo-tree-id4134 . -1) (undo-tree-id4135 . -1) (undo-tree-id4136 . -1) (undo-tree-id4137 . -1) (undo-tree-id4138 . -1) (undo-tree-id4139 . -1) (undo-tree-id4140 . -1) (undo-tree-id4141 . -1) (undo-tree-id4142 . -1) (undo-tree-id4143 . -1) (undo-tree-id4144 . -1) (undo-tree-id4145 . -1) (undo-tree-id4146 . -1) (undo-tree-id4147 . -1) (undo-tree-id4148 . -1) (undo-tree-id4149 . -1) (undo-tree-id4150 . -1) (undo-tree-id4151 . -1) (undo-tree-id4152 . -1) (undo-tree-id4153 . -1) (undo-tree-id4154 . -1) (undo-tree-id4155 . -1) (undo-tree-id4156 . -1) (undo-tree-id4157 . -1) (undo-tree-id4158 . -1) (undo-tree-id4159 . -1) (undo-tree-id4160 . -1) (undo-tree-id4161 . -1) (undo-tree-id4162 . -1) (undo-tree-id4163 . -1) (undo-tree-id4164 . -1) (undo-tree-id4165 . -1) (undo-tree-id4166 . -2) (undo-tree-id4167 . -2) (undo-tree-id4168 . -2) (undo-tree-id4169 . -2) (undo-tree-id4170 . -2) (undo-tree-id4171 . -2) (undo-tree-id4172 . -2) (undo-tree-id4173 . -2) 5011) nil (25919 56670 838559 459000) 0 nil])
([nil nil ((5015 . 5027)) nil (25919 56670 835663 502000) 0 nil])
([nil nil ((5027 . 5032)) nil (25919 56670 835663 68000) 0 nil])
([nil nil ((5032 . 5039)) nil (25919 56670 835662 602000) 0 nil])
([nil nil ((#("p" 0 1 (match-data (0 2 0 1 1 2) fontified t)) . -5038) (undo-tree-id4083 . -1) (undo-tree-id4084 . -1) (undo-tree-id4085 . -1) (undo-tree-id4086 . -1) (undo-tree-id4087 . -1) (undo-tree-id4088 . -1) (undo-tree-id4089 . -1) 5039) nil (25919 56670 835661 898000) 0 nil])
([nil nil ((#("c" 0 1 (match-data (0 2 0 1 1 2) fontified t)) . -5032) (undo-tree-id3927 . -1) (undo-tree-id3928 . -1) (undo-tree-id3929 . -1) (undo-tree-id3930 . -1) (undo-tree-id3931 . -1) (undo-tree-id3932 . -1) (undo-tree-id3933 . -1) (undo-tree-id3934 . -1) (undo-tree-id3935 . -1) (undo-tree-id3936 . -1) (undo-tree-id3937 . -1) (undo-tree-id3938 . -1) (undo-tree-id3939 . -1) (undo-tree-id3940 . -1) (undo-tree-id3941 . -1) (undo-tree-id3942 . -1) (undo-tree-id3943 . -1) (undo-tree-id3944 . -1) (undo-tree-id3945 . -1) (undo-tree-id3946 . -1) (undo-tree-id3947 . -1) (undo-tree-id3948 . -1) (undo-tree-id3949 . -1) (undo-tree-id3950 . -1) (undo-tree-id3951 . -1) (undo-tree-id3952 . -1) (undo-tree-id3953 . -1) (undo-tree-id3954 . -1) (undo-tree-id3955 . -1) (undo-tree-id3956 . -1) (undo-tree-id3957 . -1) (undo-tree-id3958 . -1) (undo-tree-id3959 . -1) (undo-tree-id3960 . -1) (undo-tree-id3961 . -1) (undo-tree-id3962 . -1) (undo-tree-id3963 . -1) (undo-tree-id3964 . -1) (#("h" 0 1 (match-data (0 2 0 1 1 2) fontified t)) . -5033) (undo-tree-id3965 . -1) (undo-tree-id3966 . -1) (undo-tree-id3967 . -1) (undo-tree-id3968 . -1) (undo-tree-id3969 . -1) (undo-tree-id3970 . -1) (undo-tree-id3971 . -1) (undo-tree-id3972 . -1) (undo-tree-id3973 . -1) (undo-tree-id3974 . -1) (undo-tree-id3975 . -1) (undo-tree-id3976 . -1) (undo-tree-id3977 . -1) (undo-tree-id3978 . -1) (undo-tree-id3979 . -1) (undo-tree-id3980 . -1) (undo-tree-id3981 . -1) (undo-tree-id3982 . -1) (undo-tree-id3983 . -1) (undo-tree-id3984 . -1) (undo-tree-id3985 . -1) (undo-tree-id3986 . -1) (undo-tree-id3987 . -1) (undo-tree-id3988 . -1) (undo-tree-id3989 . -1) (undo-tree-id3990 . -1) (undo-tree-id3991 . -1) (undo-tree-id3992 . -1) (undo-tree-id3993 . -1) (undo-tree-id3994 . -1) (undo-tree-id3995 . -1) (undo-tree-id3996 . -1) (#("e" 0 1 (match-data (0 2 0 1 1 2) fontified t)) . -5034) (undo-tree-id3997 . -1) (undo-tree-id3998 . -1) (undo-tree-id3999 . -1) (undo-tree-id4000 . -1) (undo-tree-id4001 . -1) (undo-tree-id4002 . -1) (undo-tree-id4003 . -1) (undo-tree-id4004 . -1) (undo-tree-id4005 . -1) (undo-tree-id4006 . -1) (undo-tree-id4007 . -1) (undo-tree-id4008 . -1) (undo-tree-id4009 . -1) (undo-tree-id4010 . -1) (undo-tree-id4011 . -1) (undo-tree-id4012 . -1) (undo-tree-id4013 . -1) (undo-tree-id4014 . -1) (undo-tree-id4015 . -1) (undo-tree-id4016 . -1) (undo-tree-id4017 . -1) (undo-tree-id4018 . -1) (undo-tree-id4019 . -1) (undo-tree-id4020 . -1) (undo-tree-id4021 . -1) (undo-tree-id4022 . -1) (undo-tree-id4023 . -1) (undo-tree-id4024 . -1) (#("c" 0 1 (match-data (0 2 0 1 1 2) fontified t)) . -5035) (undo-tree-id4025 . -1) (undo-tree-id4026 . -1) (undo-tree-id4027 . -1) (undo-tree-id4028 . -1) (undo-tree-id4029 . -1) (undo-tree-id4030 . -1) (undo-tree-id4031 . -1) (undo-tree-id4032 . -1) (undo-tree-id4033 . -1) (undo-tree-id4034 . -1) (undo-tree-id4035 . -1) (undo-tree-id4036 . -1) (undo-tree-id4037 . -1) (undo-tree-id4038 . -1) (undo-tree-id4039 . -1) (undo-tree-id4040 . -1) (undo-tree-id4041 . -1) (undo-tree-id4042 . -1) (undo-tree-id4043 . -1) (undo-tree-id4044 . -1) (undo-tree-id4045 . -1) (undo-tree-id4046 . -1) (undo-tree-id4047 . -1) (undo-tree-id4048 . -1) (#("k" 0 1 (match-data (0 2 0 1 1 2) fontified t)) . -5036) (undo-tree-id4049 . -1) (undo-tree-id4050 . -1) (undo-tree-id4051 . -1) (undo-tree-id4052 . -1) (undo-tree-id4053 . -1) (undo-tree-id4054 . -1) (undo-tree-id4055 . -1) (undo-tree-id4056 . -1) (undo-tree-id4057 . -1) (undo-tree-id4058 . -1) (undo-tree-id4059 . -1) (undo-tree-id4060 . -1) (undo-tree-id4061 . -1) (undo-tree-id4062 . -1) (undo-tree-id4063 . -1) (undo-tree-id4064 . -1) (undo-tree-id4065 . -1) (undo-tree-id4066 . -1) (undo-tree-id4067 . -1) (undo-tree-id4068 . -1) (#("." 0 1 (match-data (0 2 0 1 1 2) fontified t)) . -5037) (undo-tree-id4069 . -1) (undo-tree-id4070 . -1) (undo-tree-id4071 . -1) (undo-tree-id4072 . -1) (undo-tree-id4073 . -1) (undo-tree-id4074 . -1) (undo-tree-id4075 . -1) (undo-tree-id4076 . -1) (undo-tree-id4077 . -1) (undo-tree-id4078 . -1) (undo-tree-id4079 . -1) (undo-tree-id4080 . -1) (undo-tree-id4081 . -1) (undo-tree-id4082 . -1) 5038) nil (25919 56670 835654 317000) 0 nil])
([nil nil ((5032 . 5044)) nil (25919 56670 835587 407000) 0 nil])
([nil nil ((5044 . 5045)) nil (25919 56670 835583 4000) 0 nil])
([nil nil ((5044 . 5049) (t 25919 56670 838465 450000)) nil (25919 56705 675832 872000) 0 nil])
([nil nil ((5049 . 5055)) nil (25919 56705 675831 671000) 0 nil])
([nil nil ((5055 . 5066)) nil (25919 56705 675828 58000) 0 nil])
([nil nil ((apply -2 5045 5068 undo--wrap-and-run-primitive-undo 5045 5068 ((5049 . 5051) 5066)) (t 25919 56705 678459 610000)) nil (25919 57073 333781 190000) 0 nil])
([nil nil ((apply -2 5028 5046 undo--wrap-and-run-primitive-undo 5028 5046 ((5032 . 5034) 5044))) nil (25919 57073 333780 641000) 0 nil])
([nil nil ((apply -2 4962 5029 undo--wrap-and-run-primitive-undo 4962 5029 ((4966 . 4968) 4978))) nil (25919 57073 333780 163000) 0 nil])
([nil nil ((4961 . 4966)) nil (25919 57073 333779 701000) 0 nil])
([nil nil ((4966 . 4967)) nil (25919 57073 333778 765000) 0 nil])
([nil nil ((4967 . 4976)) nil (25919 57073 333778 366000) 0 nil])
([nil nil ((4976 . 4993)) nil (25919 57073 333777 813000) 0 nil])
([nil nil ((#("q" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-comment-face)) . -4991) (undo-tree-id4507 . -1) (undo-tree-id4508 . -1) (undo-tree-id4509 . -1) (undo-tree-id4510 . -1) (undo-tree-id4511 . -1) (undo-tree-id4512 . -1) (undo-tree-id4513 . -1) (undo-tree-id4514 . -1) (undo-tree-id4515 . -1) (undo-tree-id4516 . -1) (undo-tree-id4517 . -1) (undo-tree-id4518 . -1) (undo-tree-id4519 . -1) (undo-tree-id4520 . -1) (#("o" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-comment-face)) . -4992) (undo-tree-id4521 . -1) (undo-tree-id4522 . -1) (undo-tree-id4523 . -1) (undo-tree-id4524 . -1) (undo-tree-id4525 . -1) (undo-tree-id4526 . -1) (undo-tree-id4527 . -1) (undo-tree-id4528 . -1) (undo-tree-id4529 . -1) 4993) nil (25919 57073 333775 765000) 0 nil])
([nil nil ((4991 . 4995)) nil (25919 57073 333754 495000) 0 nil])
([nil nil ((apply 6 4996 5100 undo--wrap-and-run-primitive-undo 4996 5100 ((#("# " 0 2 (fontified t face font-lock-comment-face)) . -5083) (#("# " 0 2 (fontified t face font-lock-comment-face)) . -5066) (#("# " 0 2 (fontified t face font-lock-comment-face)) . -5000) (#<marker at 5802 in data.py> . -1) (#<marker at 5802 in data.py> . -1) 5013)) (t 25919 57073 338356 541000)) nil (25919 59017 819713 591000) 0 nil])
([nil nil ((1808 . 1813) (t 25919 59017 817890 128000)) nil (25919 60030 872488 237000) 0 nil])
([nil nil ((1813 . 1823)) nil (25919 60030 872487 673000) 0 nil])
([nil nil ((#("balton = " 0 4 (fontified t face py-variable-name-face) 4 6 (fontified t face py-variable-name-face) 6 7 (fontified t) 7 8 (fontified t face font-lock-operator-face) 8 9 (fontified t)) . 1828) (undo-tree-id4613 . -9) (undo-tree-id4614 . -9) (undo-tree-id4615 . -9) (undo-tree-id4616 . -9) (undo-tree-id4617 . -8) (undo-tree-id4618 . -7) (undo-tree-id4619 . -7) (undo-tree-id4620 . -6) (undo-tree-id4621 . -5) (undo-tree-id4622 . -4) (undo-tree-id4623 . -3) (undo-tree-id4624 . -2) (undo-tree-id4625 . -2) (undo-tree-id4626 . -2) (undo-tree-id4627 . -6) (undo-tree-id4628 . -1) (undo-tree-id4629 . -1) (undo-tree-id4630 . -1) (undo-tree-id4631 . -9) (undo-tree-id4632 . -9)) nil (25919 60030 872486 647000) 0 nil])
([nil nil ((1828 . 1832)) nil (25919 60030 872477 814000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -1830) (undo-tree-id4604 . -1) (undo-tree-id4605 . -1) (undo-tree-id4606 . -1) (undo-tree-id4607 . -1) (undo-tree-id4608 . -1) (undo-tree-id4609 . -1) (#("s" 0 1 (fontified t)) . -1831) (undo-tree-id4610 . -1) (undo-tree-id4611 . -1) (undo-tree-id4612 . -1) 1832) nil (25919 60030 872476 956000) 0 nil])
([nil nil ((1830 . 1842)) nil (25919 60030 872472 478000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -1841) (undo-tree-id4592 . -1) (undo-tree-id4593 . -1) (undo-tree-id4594 . -1) (undo-tree-id4595 . -1) (undo-tree-id4596 . -1) (undo-tree-id4597 . -1) (undo-tree-id4598 . -1) (undo-tree-id4599 . -1) (undo-tree-id4600 . -1) (undo-tree-id4601 . -1) (undo-tree-id4602 . -1) (undo-tree-id4603 . -1) 1842) nil (25919 60030 872471 543000) 0 nil])
([nil nil ((1914 . 1915)) nil (25919 60030 872465 837000) 0 nil])
([nil nil ((2001 . 2002)) nil (25919 60030 872465 419000) 0 nil])
([nil nil ((2087 . 2088)) nil (25919 60030 872464 996000) 0 nil])
([nil nil ((2177 . 2178)) nil (25919 60030 872464 485000) 0 nil])
([nil nil ((2262 . 2263)) nil (25919 60030 872464 22000) 0 nil])
([nil nil ((2356 . 2357)) nil (25919 60030 872463 540000) 0 nil])
([nil nil ((2449 . 2450)) nil (25919 60030 872463 58000) 0 nil])
([nil nil ((2538 . 2539)) nil (25919 60030 872462 545000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1932 . 1933) (nil fontified nil 1932 . 1933) (nil fontified nil 1920 . 1932) (1920 . 1933)) nil (25919 60030 872461 981000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2032 . 2033) (nil fontified nil 2032 . 2033) (nil fontified nil 2020 . 2032) (2020 . 2033)) nil (25919 60030 872461 132000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2131 . 2132) (nil fontified nil 2131 . 2132) (nil fontified nil 2119 . 2131) (2119 . 2132)) nil (25919 60030 872460 285000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2234 . 2235) (nil fontified nil 2234 . 2235) (nil fontified nil 2222 . 2234) (2222 . 2235)) nil (25919 60030 872459 514000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2332 . 2333) (nil fontified nil 2332 . 2333) (nil fontified nil 2320 . 2332) (2320 . 2333)) nil (25919 60030 872458 723000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2439 . 2440) (nil fontified nil 2439 . 2440) (nil fontified nil 2427 . 2439) (2427 . 2440)) nil (25919 60030 872457 887000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2545 . 2546) (nil fontified nil 2545 . 2546) (nil fontified nil 2533 . 2545) (2533 . 2546)) nil (25919 60030 872456 900000) 0 nil])
([nil nil ((#("add(balton)
    db.session.add(quhzx)
    db.session.add(ohval)
    db.session.add(bouton)
    db.session.add(hunton)
    db.session.add(mila)
    db.session.add(deathtok)
    db.session.add(renge)" 0 3 (match-data (0 3 0 1 1 2 2 3) fontified t) 3 4 (match-data (0 3 0 1 1 2 2 3) fontified t face (rainbow-delimiters-depth-1-face)) 4 10 (match-data (0 3 0 1 1 2 2 3) fontified t) 10 11 (match-data (0 3 0 1 1 2 2 3) fontified t face (rainbow-delimiters-depth-1-face)) 11 12 (rear-nonsticky t fontified t) 12 16 (fontified t) 16 19 (fontified t) 19 27 (match-data (0 1 0 1) fontified t) 27 29 (match-data (0 2 0 1 1 2) fontified t) 29 30 (match-data (0 2 0 1 1 2) fontified t) 30 31 (match-data (0 2 0 1 1 2) fontified t face (rainbow-delimiters-depth-1-face)) 31 34 (match-data (0 2 0 1 1 2) fontified t) 34 36 (match-data (0 2 0 1 1 2) fontified t) 36 37 (match-data (0 2 0 1 1 2) fontified t face (rainbow-delimiters-depth-1-face)) 37 38 (match-data (0 2 0 1 1 2) rear-nonsticky t fontified t) 38 39 (fontified t) 39 42 (fontified t) 42 45 (fontified t) 45 53 (match-data (0 1 0 1) fontified t) 53 56 (match-data (0 2 0 1 1 2) fontified t) 56 57 (match-data (0 2 0 1 1 2) fontified t face (rainbow-delimiters-depth-1-face)) 57 62 (match-data (0 2 0 1 1 2) fontified t) 62 63 (match-data (0 2 0 1 1 2) fontified t face (rainbow-delimiters-depth-1-face)) 63 64 (rear-nonsticky t match-data (0 2 0 1 1 2) fontified t) 64 68 (fontified t) 68 71 (fontified t) 71 79 (match-data (0 1 0 1) fontified t) 79 82 (match-data (0 2 0 1 1 2) fontified t) 82 83 (match-data (0 2 0 1 1 2) fontified t face (rainbow-delimiters-depth-1-face)) 83 89 (match-data (0 2 0 1 1 2) fontified t) 89 90 (match-data (0 2 0 1 1 2) fontified t face (rainbow-delimiters-depth-1-face)) 90 91 (match-data (0 2 0 1 1 2) rear-nonsticky t fontified t) 91 95 (fontified t) 95 98 (fontified t) 98 101 (match-data (0 1 0 1) fontified t) 101 106 (match-data (0 1 0 1) fontified t) 106 109 (match-data (0 2 0 1 1 2) fontified t) 109 110 (match-data (0 2 0 1 1 2) fontified t face (rainbow-delimiters-depth-1-face)) 110 116 (match-data (0 3 0 1 1 2 2 3) fontified t) 116 117 (match-data (0 2 0 1 1 2) fontified t face (rainbow-delimiters-depth-1-face)) 117 118 (rear-nonsticky t match-data (0 2 0 1 1 2) fontified t) 118 119 (fontified t) 119 122 (fontified t) 122 123 (fontified t) 123 125 (fontified t) 125 128 (match-data (0 1 0 1) fontified t) 128 133 (match-data (0 1 0 1) fontified t) 133 136 (match-data (0 2 0 1 1 2) fontified t) 136 137 (match-data (0 2 0 1 1 2) fontified t face (rainbow-delimiters-depth-1-face)) 137 141 (match-data (0 3 0 1 1 2 2 3) fontified t) 141 142 (match-data (0 3 0 1 1 2 2 3) fontified t face (rainbow-delimiters-depth-1-face)) 142 143 (match-data (0 2 0 1 1 2) rear-nonsticky t fontified t) 143 147 (fontified t) 147 150 (fontified t) 150 158 (match-data (0 1 0 1) fontified t) 158 161 (match-data (0 2 0 1 1 2) fontified t) 161 162 (match-data (0 2 0 1 1 2) fontified t face (rainbow-delimiters-depth-1-face)) 162 170 (match-data (0 2 0 1 1 2) fontified t) 170 171 (match-data (0 2 0 1 1 2) fontified t face (rainbow-delimiters-depth-1-face)) 171 172 (rear-nonsticky t match-data (0 2 0 1 1 2) fontified t) 172 176 (fontified t) 176 179 (fontified t) 179 185 (match-data (0 1 0 1) fontified t) 185 187 (match-data (0 1 0 1) fontified t) 187 190 (match-data (0 2 0 1 1 2) fontified t) 190 191 (match-data (0 2 0 1 1 2) fontified t face (rainbow-delimiters-depth-1-face)) 191 196 (match-data (0 3 0 1 1 2 2 3) fontified t) 196 197 (match-data (0 2 0 1 1 2) fontified t face (rainbow-delimiters-depth-1-face))) . 2651) (undo-tree-id4541 . -197) (undo-tree-id4542 . -4) (undo-tree-id4543 . -10) (undo-tree-id4544 . -31) (undo-tree-id4545 . -36) (undo-tree-id4546 . -57) (undo-tree-id4547 . -62) (undo-tree-id4548 . -83) (undo-tree-id4549 . -89) (undo-tree-id4550 . -110) (undo-tree-id4551 . -116) (undo-tree-id4552 . -137) (undo-tree-id4553 . -141) (undo-tree-id4554 . -162) (undo-tree-id4555 . -170) (undo-tree-id4556 . -191) (undo-tree-id4557 . -196) (undo-tree-id4558 . -197) (undo-tree-id4559 . -197) (undo-tree-id4560 . -197) (undo-tree-id4561 . -167) (undo-tree-id4562 . -166) (undo-tree-id4563 . -113) (undo-tree-id4564 . -85) (undo-tree-id4565 . -58) (undo-tree-id4566 . -31) (undo-tree-id4567 . -30) (undo-tree-id4568 . -29) (undo-tree-id4569 . -29) (undo-tree-id4570 . -29) (undo-tree-id4571 . -28) (undo-tree-id4572 . -28) (undo-tree-id4573 . -28) (undo-tree-id4574 . -27) (undo-tree-id4575 . -3) (undo-tree-id4576 . -27) (undo-tree-id4577 . -30) (undo-tree-id4578 . -53) (undo-tree-id4579 . -56) (undo-tree-id4580 . -79) (undo-tree-id4581 . -82) (undo-tree-id4582 . -106) (undo-tree-id4583 . -109) (undo-tree-id4584 . -133) (undo-tree-id4585 . -136) (undo-tree-id4586 . -158) (undo-tree-id4587 . -161) (undo-tree-id4588 . -187) (undo-tree-id4589 . -190) (undo-tree-id4590 . -197) (undo-tree-id4591 . -197)) nil (25919 60030 872453 735000) 0 nil])
([nil nil ((2651 . 2652)) nil (25919 60030 872422 866000) 0 nil])
([nil nil ((2651 . 2668) (#("b" 0 1 (fontified nil)) . -2651) (2651 . 2652) (#("bulk_save_objects" 0 17 (fontified nil)) . -2651) (2651 . 2668) (#("b" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t)) . -2651) (undo-tree-id4530 . -1) (undo-tree-id4531 . -1) (undo-tree-id4532 . -1) (undo-tree-id4533 . -1) (undo-tree-id4534 . -1) (undo-tree-id4535 . -1) (undo-tree-id4536 . -1) (undo-tree-id4537 . -1) (undo-tree-id4538 . -1) (undo-tree-id4539 . -1) (undo-tree-id4540 . -1) 2652) nil (25919 60030 872420 357000) 0 nil])
([nil nil ((2668 . 2675)) nil (25919 60030 872399 843000) 0 nil])
([nil nil ((#("renge = " 0 1 (fontified t) 1 5 (fontified t) 5 6 (fontified t) 6 7 (match-data (0 3 0 1 1 2 2 3) fontified t) 7 8 (match-data (0 3 0 1 1 2 2 3) fontified t)) . 2546) (undo-tree-id5022 . -8) (undo-tree-id5023 . -8) (t 25919 60030 877638 830000)) nil (25919 61152 580319 192000) 0 nil])
([nil nil ((#("deathtok =  " 0 8 (fontified t) 8 9 (match-data (0 3 0 1 1 2 2 3) fontified t) 9 10 (match-data (0 3 0 1 1 2 2 3) fontified t) 10 11 (match-data (0 3 0 1 1 2 2 3) fontified t) 11 12 (fontified t)) . 2440) (undo-tree-id5020 . -12) (undo-tree-id5021 . -12)) nil (25919 61152 580317 902000) 0 nil])
([nil nil ((#("mila =  " 0 4 (fontified t) 4 5 (match-data (0 3 0 1 1 2 2 3) fontified t) 5 6 (match-data (0 3 0 1 1 2 2 3) fontified t) 6 7 (match-data (0 3 0 1 1 2 2 3) fontified t) 7 8 (fontified t)) . 2333) (undo-tree-id5018 . -8) (undo-tree-id5019 . -8)) nil (25919 61152 580316 735000) 0 nil])
([nil nil ((#("quhzx = " 0 2 (fontified t) 2 3 (fontified t) 3 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t)) . -2235) (undo-tree-id5015 . -7) (undo-tree-id5016 . -8) (undo-tree-id5017 . -8) 2243) nil (25919 61152 580315 456000) 0 nil])
([nil nil ((#("(hunton = " 0 1 (fontified t rear-nonsticky t face (rainbow-delimiters-depth-1-face)) 1 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t) 9 10 (fontified t)) . -2131) (undo-tree-id5012 . -10) (undo-tree-id5013 . -10) (undo-tree-id5014 . -10) 2141) nil (25919 61152 580313 777000) 0 nil])
([nil nil ((2131 . 2132)) nil (25919 61152 580311 607000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-unmatched-face))) . -2131) (undo-tree-id5010 . -1) (undo-tree-id5011 . -1) 2132) nil (25919 61152 580310 916000) 0 nil])
([nil nil ((2131 . 2132)) nil (25919 61152 580309 727000) 0 nil])
([nil nil ((#("bouton = " 0 6 (match-data (0 3 0 1 1 2 2 3) fontified t) 6 7 (match-data (0 3 0 1 1 2 2 3) fontified t) 7 8 (match-data (0 3 0 1 1 2 2 3) fontified t) 8 9 (match-data (0 3 0 1 1 2 2 3) fontified t)) . 2033) (undo-tree-id5008 . -9) (undo-tree-id5009 . -9)) nil (25919 61152 580309 159000) 0 nil])
([nil nil ((#("ohval =  " 0 5 (match-data (0 3 0 1 1 2 2 3) fontified t) 5 6 (match-data (0 3 0 1 1 2 2 3) fontified t) 6 7 (match-data (0 3 0 1 1 2 2 3) fontified t) 7 8 (match-data (0 3 0 1 1 2 2 3) fontified t) 8 9 (fontified t)) . 1933) (undo-tree-id5006 . -9) (undo-tree-id5007 . -9)) nil (25919 61152 580307 894000) 0 nil])
([nil nil ((#("add(cities)
    db.session.add(wynt)
    db.session.add(deego)
    db.session.add(trumble)
    db.session.add(blacky)
    db.session.add(hams)
    db.session.add(sayno)" 0 3 (match-data (0 1 0 1) fontified t) 3 4 (match-data (0 1 0 1) fontified t face (rainbow-delimiters-depth-1-face)) 4 10 (match-data (0 2 0 1 1 2) fontified t) 10 11 (match-data (0 2 0 1 1 2) fontified t face (rainbow-delimiters-depth-1-face)) 11 12 (rear-nonsticky t fontified t) 12 15 (fontified t) 15 16 (fontified t) 16 19 (fontified t) 19 27 (match-data (0 0) fontified t) 27 30 (match-data (0 1 0 1) fontified t) 30 31 (match-data (0 1 0 1) fontified t face (rainbow-delimiters-depth-1-face)) 31 35 (match-data (0 1 0 1) fontified t) 35 36 (match-data (0 2 0 1 1 2) fontified t face (rainbow-delimiters-depth-1-face)) 36 37 (rear-nonsticky t fontified t) 37 40 (fontified t) 40 41 (fontified t) 41 44 (fontified t) 44 52 (match-data (0 0) fontified t) 52 55 (match-data (0 1 0 1) fontified t) 55 56 (match-data (0 1 0 1) fontified t face (rainbow-delimiters-depth-1-face)) 56 61 (match-data (0 1 0 1) fontified t) 61 62 (match-data (0 2 0 1 1 2) fontified t face (rainbow-delimiters-depth-1-face)) 62 63 (rear-nonsticky t fontified t) 63 66 (fontified t) 66 67 (fontified t) 67 70 (fontified t) 70 78 (match-data (0 0) fontified t) 78 81 (match-data (0 1 0 1) fontified t) 81 82 (match-data (0 1 0 1) fontified t face (rainbow-delimiters-depth-1-face)) 82 89 (match-data (0 1 0 1) fontified t) 89 90 (match-data (0 2 0 1 1 2) fontified t face (rainbow-delimiters-depth-1-face)) 90 91 (rear-nonsticky t fontified t) 91 94 (fontified t) 94 95 (fontified t) 95 98 (fontified t) 98 106 (match-data (0 0) fontified t) 106 109 (match-data (0 1 0 1) fontified t) 109 110 (match-data (0 1 0 1) fontified t face (rainbow-delimiters-depth-1-face)) 110 116 (match-data (0 1 0 1) fontified t) 116 117 (match-data (0 2 0 1 1 2) fontified t face (rainbow-delimiters-depth-1-face)) 117 118 (rear-nonsticky t fontified t) 118 121 (fontified t) 121 122 (fontified t) 122 125 (fontified t) 125 128 (match-data (0 0) fontified t) 128 133 (match-data (0 0) fontified t) 133 136 (match-data (0 1 0 1) fontified t) 136 137 (match-data (0 1 0 1) fontified t face (rainbow-delimiters-depth-1-face)) 137 141 (match-data (0 1 0 1) fontified t) 141 142 (match-data (0 2 0 1 1 2) fontified t face (rainbow-delimiters-depth-1-face)) 142 143 (rear-nonsticky t fontified t) 143 146 (fontified t) 146 147 (fontified t) 147 150 (fontified t) 150 158 (match-data (0 0) fontified t) 158 161 (match-data (0 1 0 1) fontified t) 161 162 (match-data (0 1 0 1) fontified t face (rainbow-delimiters-depth-1-face)) 162 167 (match-data (0 1 0 1) fontified t) 167 168 (match-data (0 2 0 1 1 2) fontified t face (rainbow-delimiters-depth-1-face))) . 1191) (undo-tree-id5002 . -168) (undo-tree-id5003 . -12) (undo-tree-id5004 . -168) (undo-tree-id5005 . -168)) nil (25919 61152 580306 617000) 0 nil])
([nil nil ((1191 . 1192)) nil (25919 61152 580304 491000) 0 nil])
([nil nil ((1191 . 1208) (#("b" 0 1 (fontified nil)) . -1191) (1191 . 1192) (#("bulk_save_objects" 0 17 (fontified nil)) . -1191) (1191 . 1208) (#("b" 0 1 (match-data (0 0) fontified t)) . -1191) (undo-tree-id5001 . -1) 1192) nil (25919 61152 580303 573000) 0 nil])
([nil nil ((1208 . 1215)) nil (25919 61152 580302 412000) 0 nil])
([nil nil ((#("sayno =  " 0 5 (fontified t face py-variable-name-face) 5 6 (fontified t) 6 7 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-operator-face) 7 8 (match-data (0 3 0 1 1 2 2 3) fontified t) 8 9 (fontified t)) . 1090) (undo-tree-id4999 . -9) (undo-tree-id5000 . -9)) nil (25919 61152 580301 829000) 0 nil])
([nil nil ((nil fontified nil 1102 . 1103) (nil fontified nil 1090 . 1102) (1090 . 1103)) nil (25919 61152 580300 713000) 0 nil])
([nil nil ((1179 . 1180)) nil (25919 61152 580300 85000) 0 nil])
([nil nil ((1085 . 1086)) nil (25919 61152 580299 630000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face py-variable-name-face)) . -1005) (undo-tree-id4997 . -1) (undo-tree-id4998 . -1) 1006) nil (25919 61152 580299 11000) 0 nil])
([nil nil ((#(" " 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t)) . 1005) (#("=" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-operator-face)) . 1005) (#(" " 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t)) . 1005)) nil (25919 61152 580297 579000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t)) . -1002) (undo-tree-id4991 . -1) (undo-tree-id4992 . -1) (#("a" 0 1 (fontified t)) . -1003) (undo-tree-id4993 . -1) (undo-tree-id4994 . -1) (#("m" 0 1 (fontified t)) . -1004) (undo-tree-id4995 . -1) (undo-tree-id4996 . -1) 1005) nil (25919 61152 580296 178000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 1002)) nil (25919 61152 580292 427000) 0 nil])
([nil nil ((nil fontified nil 1014 . 1015) (nil fontified nil 1002 . 1014) (1002 . 1015)) nil (25919 61152 580291 844000) 0 nil])
([nil nil ((997 . 998)) nil (25919 61152 580291 244000) 0 nil])
([nil nil ((#("blacky =  " 0 6 (fontified t face py-variable-name-face) 6 7 (match-data (0 3 0 1 1 2 2 3) fontified t) 7 8 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-operator-face) 8 9 (match-data (0 3 0 1 1 2 2 3) fontified t) 9 10 (fontified t)) . 906) (undo-tree-id4989 . -10) (undo-tree-id4990 . -10)) nil (25919 61152 580290 636000) 0 nil])
([nil nil ((906 . 907)) nil (25919 61152 580289 571000) 0 nil])
([nil nil ((#("Y" 0 1 (fontified t)) . -906) (undo-tree-id4988 . -1) 907) nil (25919 61152 580288 989000) 0 nil])
([nil nil ((nil fontified nil 918 . 919) (nil fontified nil 906 . 918) (906 . 919)) nil (25919 61152 580287 690000) 0 nil])
([nil nil ((901 . 902)) nil (25919 61152 580286 942000) 0 nil])
([nil nil ((#("deego = " 0 5 (fontified t face py-variable-name-face) 5 6 (fontified t) 6 7 (fontified t face font-lock-operator-face) 7 8 (fontified t)) . 823) (undo-tree-id4986 . -8) (undo-tree-id4987 . -8)) nil (25919 61152 580286 426000) 0 nil])
([nil nil ((nil fontified nil 835 . 836) (nil fontified nil 823 . 835) (823 . 836)) nil (25919 61152 580285 335000) 0 nil])
([nil nil ((818 . 819)) nil (25919 61152 580284 755000) 0 nil])
([nil nil ((#("trumble =" 0 7 (fontified t face py-variable-name-face) 7 8 (fontified t) 8 9 (fontified t face font-lock-operator-face)) . 736) (undo-tree-id4984 . -9) (undo-tree-id4985 . -9)) nil (25919 61152 580284 176000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 736)) nil (25919 61152 580282 943000) 0 nil])
([nil nil ((nil fontified nil 748 . 749) (nil fontified nil 736 . 748) (736 . 749)) nil (25919 61152 580282 436000) 0 nil])
([nil nil ((#("wynt =  " 0 4 (fontified t face py-variable-name-face) 4 5 (match-data (0 3 0 1 1 2 2 3) fontified t) 5 6 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-operator-face) 6 7 (match-data (0 3 0 1 1 2 2 3) fontified t) 7 8 (fontified t)) . 656) (undo-tree-id4982 . -8) (undo-tree-id4983 . -8)) nil (25919 61152 580281 619000) 0 nil])
([nil nil ((nil fontified nil 668 . 669) (nil fontified nil 656 . 668) (656 . 669)) nil (25919 61152 580280 328000) 0 nil])
([nil nil ((736 . 737)) nil (25919 61152 580279 672000) 0 nil])
([nil nil ((651 . 652)) nil (25919 61152 580279 200000) 0 nil])
([nil nil ((#(" cities =  " 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t) 1 7 (match-data (0 3 0 1 1 2 2 3) fontified t face py-variable-name-face) 7 8 (match-data (0 3 0 1 1 2 2 3) fontified t) 8 9 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-operator-face) 9 10 (match-data (0 3 0 1 1 2 2 3) fontified t) 10 11 (fontified t)) . 568) (undo-tree-id4980 . -11) (undo-tree-id4981 . -11)) nil (25919 61152 580278 607000) 0 nil])
([nil nil ((565 . 569) (#("   " 0 3 (match-data (0 3 0 1 1 2 2 3) fontified t)) . 565) (undo-tree-id4977 . -3) (undo-tree-id4978 . -3) (undo-tree-id4979 . -3) 568) nil (25919 61152 580277 271000) 0 nil])
([nil nil ((nil fontified nil 581 . 582) (nil fontified nil 569 . 581) (569 . 582)) nil (25919 61152 580275 620000) 0 nil])
([nil nil ((564 . 569)) nil (25919 61152 580274 969000) 0 nil])
([nil nil ((569 . 579)) nil (25919 61152 580274 550000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -2474) (undo-tree-id4975 . -4) (undo-tree-id4976 . -4) 2478) nil (25919 61152 580273 922000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -2473) (undo-tree-id4973 . -1) (undo-tree-id4974 . -1) 2474) nil (25919 61152 580272 595000) 0 nil])
([nil nil ((2513 . 2518)) nil (25919 61152 580271 354000) 0 nil])
([nil nil ((#("    " 0 4 (match-data (0 1 0 1) fontified t)) . -2514) (undo-tree-id4971 . -4) (undo-tree-id4972 . -4) 2518) nil (25919 61152 580270 729000) 0 nil])
([nil nil ((#("
" 0 1 (match-data (0 1 0 1) fontified t)) . -2513) (undo-tree-id4969 . -1) (undo-tree-id4970 . -1) 2514) nil (25919 61152 580269 271000) 0 nil])
([nil nil ((2475 . 2479) (#("    " 0 4 (fontified nil)) . 2475) (2474 . 2475)) nil (25919 61152 580267 450000) 0 nil])
([nil nil ((1227 . 1231) (#("    " 0 3 (fontified nil) 3 4 (fontified nil)) . 1227) (1226 . 1227)) nil (25919 61152 580266 679000) 0 nil])
([nil nil ((1268 . 1272) (#("    " 0 4 (match-data (0 1 0 1) fontified nil)) . 1267) (undo-tree-id4967 . -4) (undo-tree-id4968 . -4) (1266 . 1272)) nil (25919 61152 580265 876000) 0 nil])
([nil nil ((1272 . 1273)) nil (25919 61152 580264 616000) 0 nil])
([nil nil ((1273 . 1294)) nil (25919 61152 580264 127000) 0 nil])
([nil nil ((1294 . 1299)) nil (25919 61152 580263 725000) 0 nil])
([nil nil ((1299 . 1304)) nil (25919 61152 580263 338000) 0 nil])
([nil nil ((410 . 415)) nil (25919 61152 580262 945000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . 411) (undo-tree-id4965 . -4) (undo-tree-id4966 . -4)) nil (25919 61152 580262 380000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -410) (undo-tree-id4962 . -1) (undo-tree-id4963 . -1) (undo-tree-id4964 . -1) 411) nil (25919 61152 580261 72000) 0 nil])
([nil nil ((1304 . 1313)) nil (25919 61152 580259 191000) 0 nil])
([nil nil ((1313 . 1334)) nil (25919 61152 580258 792000) 0 nil])
([nil nil ((1334 . 1341)) nil (25919 61152 580258 159000) 0 nil])
([nil nil ((#(" " 0 1 (match-data (0 1 0 1) fontified t)) . 1340) (undo-tree-id4960 . -1) (undo-tree-id4961 . -1) 1341) nil (25919 61152 580257 571000) 0 nil])
([nil nil ((1340 . 1361)) nil (25919 61152 580256 253000) 0 nil])
([nil nil ((#("r" 0 1 (match-data (0 1 0 1) fontified t face font-lock-string-face)) . -1359) (undo-tree-id4958 . -1) (#("o" 0 1 (match-data (0 1 0 1) fontified t face font-lock-string-face)) . -1360) (undo-tree-id4959 . -1) 1361) nil (25919 61152 580255 557000) 0 nil])
([nil nil ((1359 . 1362)) nil (25919 61152 580254 330000) 0 nil])
([nil nil ((#("    names = [\"Cities\", \"Wynt\", \"Trumble\", \"Deego\", \"Blackthorn" 0 4 (match-data (0 1 0 1) fontified t) 4 9 (match-data (0 1 0 1) fontified t face py-variable-name-face) 9 10 (match-data (0 1 0 1) fontified t) 10 11 (match-data (0 1 0 1) fontified t face font-lock-operator-face) 11 12 (match-data (0 1 0 1) fontified t) 12 13 (match-data (0 1 0 1) fontified t face (rainbow-delimiters-depth-1-face)) 13 21 (match-data (0 1 0 1) fontified t face font-lock-string-face) 21 23 (match-data (0 1 0 1) fontified t) 23 29 (match-data (0 1 0 1) fontified t face font-lock-string-face) 29 31 (match-data (0 1 0 1) fontified t) 31 40 (match-data (0 1 0 1) fontified t face font-lock-string-face) 40 42 (match-data (0 1 0 1) fontified t) 42 49 (match-data (0 1 0 1) fontified t face font-lock-string-face) 49 51 (match-data (0 1 0 1) fontified t) 51 62 (match-data (0 1 0 1) fontified t face font-lock-string-face)) . 1300) (undo-tree-id4955 . -62) (undo-tree-id4956 . -52) (undo-tree-id4957 . -62)) nil (25919 61152 580253 682000) 0 nil])
([nil nil ((1300 . 1304)) nil (25919 61152 580252 205000) 0 nil])
([nil nil ((1304 . 1310)) nil (25919 61152 580251 821000) 0 nil])
([nil nil ((1310 . 1313)) nil (25919 61152 580251 435000) 0 nil])
([nil nil ((1313 . 1322)) nil (25919 61152 580251 33000) 0 nil])
([nil nil ((1322 . 1330)) nil (25919 61152 580250 693000) 0 nil])
([nil nil ((1330 . 1331)) nil (25919 61152 580250 299000) 0 nil])
([nil nil ((1331 . 1333)) nil (25919 61152 580249 864000) 0 nil])
([nil nil ((#("'" 0 1 (match-data (0 1 0 1) fontified t face font-lock-string-face)) . -1332) (undo-tree-id4954 . -1) 1333) nil (25919 61152 580249 310000) 0 nil])
([nil nil ((1332 . 1333)) nil (25919 61152 580248 494000) 0 nil])
([nil nil ((1333 . 1337)) nil (25919 61152 580248 102000) 0 nil])
([nil nil ((#("H" 0 1 (match-data (0 1 0 1) fontified t face font-lock-string-face)) . -1333) (undo-tree-id4950 . -1) (#("o" 0 1 (match-data (0 1 0 1) fontified t face font-lock-string-face)) . -1334) (undo-tree-id4951 . -1) (#("l" 0 1 (match-data (0 1 0 1) fontified t face font-lock-string-face)) . -1335) (undo-tree-id4952 . -1) (#("y" 0 1 (match-data (0 1 0 1) fontified t face font-lock-string-face)) . -1336) (undo-tree-id4953 . -1) 1337) nil (25919 61152 580247 71000) 0 nil])
([nil nil ((1333 . 1338)) nil (25919 61152 580244 980000) 0 nil])
([nil nil ((1338 . 1339)) nil (25919 61152 580244 579000) 0 nil])
([nil nil ((#(":" 0 1 (match-data (0 1 0 1) fontified t)) . 1332) (#("\"" 0 1 (match-data (0 1 0 1) fontified t face font-lock-string-face)) . 1332) (#("c" 0 1 (match-data (0 1 0 1) fontified t)) . 1332) (#("e" 0 1 (match-data (0 1 0 1) fontified t)) . 1332) (#("p" 0 1 (match-data (0 1 0 1) fontified t)) . 1332) (#("s" 0 1 (match-data (0 1 0 1) fontified t)) . 1332) (#("\"" 0 1 (match-data (0 1 0 1) fontified t face font-lock-string-face)) . 1332)) nil (25919 61152 580243 461000) 0 nil])
([nil nil ((1332 . 1338)) nil (25919 61152 580242 475000) 0 nil])
([nil nil ((#("[" 0 1 (match-data (0 1 0 1) fontified t face (rainbow-delimiters-depth-2-face))) . -1331) (undo-tree-id4936 . -1) (undo-tree-id4937 . -1) (#("\"" 0 1 (match-data (0 1 0 1) fontified t face font-lock-string-face)) . -1332) (undo-tree-id4938 . -1) (undo-tree-id4939 . -1) (#("h" 0 1 (match-data (0 1 0 1) fontified t face font-lock-string-face)) . -1333) (undo-tree-id4940 . -1) (undo-tree-id4941 . -1) (#("o" 0 1 (match-data (0 1 0 1) fontified t face font-lock-string-face)) . -1334) (undo-tree-id4942 . -1) (undo-tree-id4943 . -1) (#("l" 0 1 (match-data (0 1 0 1) fontified t face font-lock-string-face)) . -1335) (undo-tree-id4944 . -1) (undo-tree-id4945 . -1) (#("y" 0 1 (match-data (0 1 0 1) fontified t face font-lock-string-face)) . -1336) (undo-tree-id4946 . -1) (undo-tree-id4947 . -1) (#("\"" 0 1 (match-data (0 1 0 1) fontified t face font-lock-string-face)) . -1337) (undo-tree-id4948 . -1) (undo-tree-id4949 . -1) 1338) nil (25919 61152 580240 682000) 0 nil])
([nil nil ((1331 . 1338)) nil (25919 61152 580233 742000) 0 nil])
([nil nil ((1338 . 1339)) nil (25919 61152 580233 340000) 0 nil])
([nil nil ((1339 . 1343)) nil (25919 61152 580232 913000) 0 nil])
([nil nil ((1343 . 1357)) nil (25919 61152 580232 401000) 0 nil])
([nil nil ((1339 . 1341)) nil (25919 61152 580231 989000) 0 nil])
([nil nil ((1341 . 1348)) nil (25919 61152 580231 569000) 0 nil])
([nil nil ((#("]" 0 1 (match-data (0 1 0 1) fontified t face (rainbow-delimiters-depth-3-face))) . -1347) (undo-tree-id4934 . -1) (undo-tree-id4935 . -1) 1348) nil (25919 61152 580231 46000) 0 nil])
([nil nil ((1347 . 1349)) nil (25919 61152 580229 831000) 0 nil])
([nil nil ((1353 . 1354)) nil (25919 61152 580229 422000) 0 nil])
([nil nil ((1368 . 1369)) nil (25919 61152 580229 32000) 0 nil])
([nil nil ((1369 . 1376)) nil (25919 61152 580228 670000) 0 nil])
([nil nil ((1376 . 1387)) nil (25919 61152 580228 269000) 0 nil])
([nil nil ((537 . 542)) nil (25919 61152 580227 865000) 0 nil])
([nil nil ((nil rear-nonsticky nil 763 . 764) (nil fontified nil 763 . 764) (nil fontified nil 762 . 763) (nil fontified nil 756 . 762) (nil fontified nil 755 . 756) (nil fontified nil 754 . 755) (nil fontified nil 748 . 754) (nil fontified nil 747 . 748) (nil fontified nil 740 . 747) (nil fontified nil 739 . 740) (nil fontified nil 738 . 739) (nil fontified nil 736 . 738) (nil fontified nil 730 . 736) (nil fontified nil 729 . 730) (nil fontified nil 724 . 729) (nil fontified nil 718 . 724) (nil fontified nil 717 . 718) (nil fontified nil 716 . 717) (nil fontified nil 714 . 716) (nil fontified nil 710 . 714) (nil fontified nil 706 . 710) (nil fontified nil 705 . 706) (nil fontified nil 704 . 705) (nil fontified nil 703 . 704) (nil fontified nil 697 . 703) (nil fontified nil 696 . 697) (nil fontified nil 695 . 696) (nil fontified nil 690 . 695) (nil fontified nil 689 . 690) (nil fontified nil 682 . 689) (nil fontified nil 681 . 682) (nil fontified nil 680 . 681) (nil fontified nil 678 . 680) (nil fontified nil 672 . 678) (nil fontified nil 671 . 672) (nil fontified nil 666 . 671) (nil fontified nil 660 . 666) (nil fontified nil 659 . 660) (nil fontified nil 658 . 659) (nil fontified nil 653 . 658) (nil fontified nil 649 . 653) (nil fontified nil 648 . 649) (nil fontified nil 647 . 648) (nil fontified nil 646 . 647) (nil fontified nil 640 . 646) (nil fontified nil 639 . 640) (nil fontified nil 638 . 639) (nil fontified nil 633 . 638) (nil fontified nil 632 . 633) (nil fontified nil 625 . 632) (nil fontified nil 624 . 625) (nil fontified nil 621 . 624) (nil fontified nil 620 . 621) (nil fontified nil 615 . 620) (nil fontified nil 614 . 615) (nil fontified nil 609 . 614) (nil fontified nil 603 . 609) (nil fontified nil 602 . 603) (nil fontified nil 601 . 602) (nil fontified nil 597 . 601) (nil fontified nil 593 . 597) (nil fontified nil 592 . 593) (nil fontified nil 591 . 592) (nil fontified nil 590 . 591) (nil fontified nil 584 . 590) (nil fontified nil 583 . 584) (nil fontified nil 582 . 583) (nil fontified nil 578 . 582) (nil fontified nil 577 . 578) (nil fontified nil 575 . 577) (nil fontified nil 570 . 575) (nil fontified nil 569 . 570) (nil fontified nil 560 . 569) (nil fontified nil 559 . 560) (nil fontified nil 554 . 559) (nil fontified nil 548 . 554) (nil fontified nil 547 . 548) (nil fontified nil 546 . 547) (nil fontified nil 542 . 546) (542 . 764)) nil (25919 61152 580225 545000) 0 nil])
([nil nil ((1614 . 1615)) nil (25919 61152 580218 595000) 0 nil])
([nil nil ((1615 . 1624)) nil (25919 61152 580218 201000) 0 nil])
([nil nil ((1624 . 1630)) nil (25919 61152 580217 741000) 0 nil])
([nil nil ((1630 . 1631)) nil (25919 61152 580217 360000) 0 nil])
([nil nil ((1631 . 1632)) nil (25919 61152 580216 959000) 0 nil])
([nil nil ((#("\"" 0 1 (match-data (0 1 0 1) fontified t face font-lock-string-face)) . -1631) (undo-tree-id4932 . -1) (undo-tree-id4933 . -1) 1632) nil (25919 61152 580216 379000) 0 nil])
([nil nil ((1631 . 1638)) nil (25919 61152 580214 792000) 0 nil])
([nil nil ((1638 . 1639)) nil (25919 61152 580214 412000) 0 nil])
([nil nil ((1639 . 1640)) nil (25919 61152 580213 953000) 0 nil])
([nil nil ((1640 . 1656)) nil (25919 61152 580213 563000) 0 nil])
([nil nil ((#("4" 0 1 (match-data (0 1 0 1) fontified t face py-number-face)) . -1652) (undo-tree-id4930 . -1) (undo-tree-id4931 . -1) 1653) nil (25919 61152 580212 883000) 0 nil])
([nil nil ((1652 . 1653)) nil (25919 61152 580211 292000) 0 nil])
([nil nil ((1656 . 1658)) nil (25919 61152 580210 678000) 0 nil])
([nil nil ((1658 . 1667)) nil (25919 61152 580210 275000) 0 nil])
([nil nil ((1667 . 1673)) nil (25919 61152 580209 603000) 0 nil])
([nil nil ((#("p" 0 1 (match-data (0 1 0 1) fontified t face font-lock-string-face)) . -1672) (undo-tree-id4929 . -1) 1673) nil (25919 61152 580209 32000) 0 nil])
([nil nil ((1672 . 1676)) nil (25919 61152 580207 868000) 0 nil])
([nil nil ((1676 . 1677)) nil (25919 61152 580207 429000) 0 nil])
([nil nil ((1677 . 1679)) nil (25919 61152 580206 911000) 0 nil])
([nil nil ((#("P" 0 1 (match-data (0 1 0 1) fontified t)) . -1677) (undo-tree-id4925 . -1) (undo-tree-id4926 . -1) (#("{" 0 1 (match-data (0 1 0 1) fontified t face (rainbow-delimiters-depth-2-face))) . -1678) (undo-tree-id4927 . -1) (undo-tree-id4928 . -1) 1679) nil (25919 61152 580205 788000) 0 nil])
([nil nil ((1677 . 1680)) nil (25919 61152 579906 446000) 0 nil])
([nil nil ((1680 . 1689)) nil (25919 61152 579906 57000) 0 nil])
([nil nil ((1689 . 1701)) nil (25919 61152 579905 658000) 0 nil])
([nil nil ((1701 . 1702)) nil (25919 61152 579905 299000) 0 nil])
([nil nil ((1702 . 1705)) nil (25919 61152 579904 927000) 0 nil])
([nil nil ((1705 . 1714)) nil (25919 61152 579904 525000) 0 nil])
([nil nil ((1714 . 1722)) nil (25919 61152 579904 127000) 0 nil])
([nil nil ((1722 . 1728)) nil (25919 61152 579903 723000) 0 nil])
([nil nil ((1728 . 1729)) nil (25919 61152 579903 340000) 0 nil])
([nil nil ((#(":" 0 1 (match-data (0 1 0 1) fontified t)) . -1728) (undo-tree-id4923 . -1) (undo-tree-id4924 . -1) 1729) nil (25919 61152 579902 679000) 0 nil])
([nil nil ((1728 . 1729)) nil (25919 61152 579901 380000) 0 nil])
([nil nil ((#("L" 0 1 (match-data (0 1 0 1) fontified t)) . -1727) (undo-tree-id4919 . -1) (undo-tree-id4920 . -1) (#(":" 0 1 (match-data (0 1 0 1) fontified t)) . -1728) (undo-tree-id4921 . -1) (undo-tree-id4922 . -1) 1729) nil (25919 61152 579900 596000) 0 nil])
([nil nil ((1727 . 1728)) nil (25919 61152 579898 439000) 0 nil])
([nil nil ((1728 . 1731)) nil (25919 61152 579897 836000) 0 nil])
([nil nil ((1731 . 1740)) nil (25919 61152 579897 473000) 0 nil])
([nil nil ((1740 . 1746)) nil (25919 61152 579897 87000) 0 nil])
([nil nil ((1746 . 1754)) nil (25919 61152 579896 659000) 0 nil])
([nil nil ((#("L" 0 1 (match-data (0 1 0 1) fontified t)) . -1753) (undo-tree-id4918 . -1) 1754) nil (25919 61152 579896 92000) 0 nil])
([nil nil ((1753 . 1754)) nil (25919 61152 579895 92000) 0 nil])
([nil nil ((1754 . 1756)) nil (25919 61152 579894 571000) 0 nil])
([nil nil ((1756 . 1765)) nil (25919 61152 579894 185000) 0 nil])
([nil nil ((1765 . 1766)) nil (25919 61152 579893 792000) 0 nil])
([nil nil ((1678 . 1680)) nil (25919 61152 579893 357000) 0 nil])
([nil nil ((#("S" 0 1 (match-data (0 1 0 1) fontified t face font-lock-string-face)) . -1679) (undo-tree-id4917 . -1) 1680) nil (25919 61152 579892 466000) 0 nil])
([nil nil ((1679 . 1680)) nil (25919 61152 579891 625000) 0 nil])
([nil nil ((#("u" 0 1 (match-data (0 1 0 1) fontified t face font-lock-string-face)) . -1679) (undo-tree-id4916 . -1) 1680) nil (25919 61152 579891 35000) 0 nil])
([nil nil ((1679 . 1682)) nil (25919 61152 579890 140000) 0 nil])
([nil nil ((#("u" 0 1 (match-data (0 1 0 1) fontified t face font-lock-string-face)) . -1680) (undo-tree-id4913 . -1) (undo-tree-id4914 . -1) (#("r" 0 1 (match-data (0 1 0 1) fontified t face font-lock-string-face)) . -1681) (undo-tree-id4915 . -1) 1682) nil (25919 61152 579889 417000) 0 nil])
([nil nil ((1680 . 1688)) nil (25919 61152 579887 496000) 0 nil])
([nil nil ((1688 . 1689)) nil (25919 61152 579887 115000) 0 nil])
([nil nil ((1689 . 1691)) nil (25919 61152 579886 691000) 0 nil])
([nil nil ((#("{" 0 1 (match-data (0 1 0 1) fontified t face (rainbow-delimiters-depth-3-face))) . -1689) (undo-tree-id4910 . -1) (undo-tree-id4911 . -1) (#("P" 0 1 (match-data (0 1 0 1) fontified t)) . -1690) (undo-tree-id4912 . -1) 1691) nil (25919 61152 579886 24000) 0 nil])
([nil nil ((1689 . 1697)) nil (25919 61152 579884 425000) 0 nil])
([nil nil ((1697 . 1703)) nil (25919 61152 579883 986000) 0 nil])
([nil nil ((#("4" 0 1 (match-data (0 1 0 1) fontified t face py-number-face)) . -1701) (undo-tree-id4906 . -1) (undo-tree-id4907 . -1) (#("1" 0 1 (match-data (0 1 0 1) fontified t face py-number-face)) . -1702) (undo-tree-id4908 . -1) (undo-tree-id4909 . -1) 1703) nil (25919 61152 579883 309000) 0 nil])
([nil nil ((1701 . 1706)) nil (25919 61152 579880 815000) 0 nil])
([nil nil ((1731 . 1739)) nil (25919 61152 579880 427000) 0 nil])
([nil nil ((1739 . 1740)) nil (25919 61152 579879 998000) 0 nil])
([nil nil ((#("P" 0 1 (match-data (0 1 0 1) fontified t)) . -1739) (undo-tree-id4905 . -1) 1740) nil (25919 61152 579879 488000) 0 nil])
([nil nil ((1739 . 1740)) nil (25919 61152 579878 626000) 0 nil])
([nil nil ((1740 . 1743)) nil (25919 61152 579878 224000) 0 nil])
([nil nil ((#("a" 0 1 (match-data (0 1 0 1) fontified t)) . -1742) (undo-tree-id4904 . -1) 1743) nil (25919 61152 579877 676000) 0 nil])
([nil nil ((1742 . 1750)) nil (25919 61152 579876 800000) 0 nil])
([nil nil ((#("m" 0 1 (match-data (0 1 0 1) fontified t)) . -1749) (undo-tree-id4903 . -1) 1750) nil (25919 61152 579876 173000) 0 nil])
([nil nil ((1749 . 1756)) nil (25919 61152 579875 141000) 0 nil])
([nil nil ((1782 . 1787)) nil (25919 61152 579874 510000) 0 nil])
([nil nil ((#("R" 0 1 (match-data (0 1 0 1) fontified t face font-lock-string-face)) . -1783) (undo-tree-id4867 . -1) (undo-tree-id4868 . -1) (undo-tree-id4869 . -1) (undo-tree-id4870 . -1) (undo-tree-id4871 . -1) (undo-tree-id4872 . -1) (undo-tree-id4873 . -1) (undo-tree-id4874 . -1) (undo-tree-id4875 . -1) (undo-tree-id4876 . -1) (undo-tree-id4877 . -1) (undo-tree-id4878 . -1) (undo-tree-id4879 . -1) (undo-tree-id4880 . -1) (undo-tree-id4881 . -1) (#("e" 0 1 (match-data (0 1 0 1) fontified t face font-lock-string-face)) . -1784) (undo-tree-id4882 . -1) (undo-tree-id4883 . -1) (undo-tree-id4884 . -1) (undo-tree-id4885 . -1) (undo-tree-id4886 . -1) (undo-tree-id4887 . -1) (undo-tree-id4888 . -1) (undo-tree-id4889 . -1) (undo-tree-id4890 . -1) (undo-tree-id4891 . -1) (undo-tree-id4892 . -1) (#("s" 0 1 (match-data (0 1 0 1) fontified t face font-lock-string-face)) . -1785) (undo-tree-id4893 . -1) (undo-tree-id4894 . -1) (undo-tree-id4895 . -1) (undo-tree-id4896 . -1) (undo-tree-id4897 . -1) (undo-tree-id4898 . -1) (undo-tree-id4899 . -1) (#("t" 0 1 (match-data (0 1 0 1) fontified t face font-lock-string-face)) . -1786) (undo-tree-id4900 . -1) (undo-tree-id4901 . -1) (undo-tree-id4902 . -1) 1787) nil (25919 61152 579871 488000) 0 nil])
([nil nil ((1783 . 1791)) nil (25919 61152 579425 446000) 0 nil])
([nil nil ((1791 . 1792)) nil (25919 61152 579425 39000) 0 nil])
([nil nil ((1792 . 1793)) nil (25919 61152 579424 639000) 0 nil])
([nil nil ((#("L" 0 1 (match-data (0 1 0 1) fontified t)) . -1792) (undo-tree-id4860 . -1) (undo-tree-id4861 . -1) (undo-tree-id4862 . -1) (undo-tree-id4863 . -1) (undo-tree-id4864 . -1) (undo-tree-id4865 . -1) (undo-tree-id4866 . -1) 1793) nil (25919 61152 579423 882000) 0 nil])
([nil nil ((#("B" 0 1 (match-data (0 1 0 1) fontified t face font-lock-string-face)) . -1783) (undo-tree-id4854 . -1) (undo-tree-id4855 . -1) (undo-tree-id4856 . -1) (undo-tree-id4857 . -1) (undo-tree-id4858 . -1) (undo-tree-id4859 . -1) 1784) nil (25919 61152 579419 827000) 0 nil])
([nil nil ((1783 . 1784)) nil (25919 61152 579417 170000) 0 nil])
([nil nil ((1791 . 1792)) nil (25919 61152 579416 751000) 0 nil])
([nil nil ((1792 . 1808)) nil (25919 61152 579416 347000) 0 nil])
([nil nil ((#(":" 0 1 (match-data (0 1 0 1) fontified t)) . 1808) (undo-tree-id4838 . -1) (undo-tree-id4839 . -1) (undo-tree-id4840 . -1) (undo-tree-id4841 . -1) (undo-tree-id4842 . -1) (undo-tree-id4843 . -1) (undo-tree-id4844 . -1) (undo-tree-id4845 . -1) (undo-tree-id4846 . -1) (undo-tree-id4847 . -1) (undo-tree-id4848 . -1) (undo-tree-id4849 . -1) (undo-tree-id4850 . -1) (undo-tree-id4851 . -1) (undo-tree-id4852 . 1) (undo-tree-id4853 . -1)) nil (25919 61152 579415 420000) 0 nil])
([nil nil ((1791 . 1792)) nil (25919 61152 579407 805000) 0 nil])
([nil nil ((1809 . 1812)) nil (25919 61152 579407 419000) 0 nil])
([nil nil ((#(" " 0 1 (match-data (0 1 0 1) fontified t)) . 1811) (undo-tree-id4831 . -1) (undo-tree-id4832 . -1) (undo-tree-id4833 . -1) (undo-tree-id4834 . -1) (undo-tree-id4835 . -1) (undo-tree-id4836 . -1) (undo-tree-id4837 . -1) 1812) nil (25919 61152 579406 681000) 0 nil])
([nil nil ((#("," 0 1 (match-data (0 1 0 1) fontified t)) . -1810) (undo-tree-id4810 . -1) (undo-tree-id4811 . -1) (undo-tree-id4812 . -1) (undo-tree-id4813 . -1) (undo-tree-id4814 . -1) (undo-tree-id4815 . -1) (undo-tree-id4816 . -1) (undo-tree-id4817 . -1) (undo-tree-id4818 . -1) (undo-tree-id4819 . -1) (undo-tree-id4820 . -1) (undo-tree-id4821 . -1) (undo-tree-id4822 . -1) (undo-tree-id4823 . -1) (undo-tree-id4824 . -1) (undo-tree-id4825 . -1) (undo-tree-id4826 . -1) (undo-tree-id4827 . -1) (undo-tree-id4828 . -1) (undo-tree-id4829 . -1) (undo-tree-id4830 . -1) 1811) nil (25919 61152 579403 172000) 0 nil])
([nil nil ((1810 . 1824)) nil (25919 61152 579393 402000) 0 nil])
([nil nil ((1824 . 1825)) nil (25919 61152 579393 10000) 0 nil])
([nil nil ((1825 . 1834)) nil (25919 61152 579392 579000) 0 nil])
([nil nil ((1834 . 1836)) nil (25919 61152 579392 46000) 0 nil])
([nil nil ((#("3" 0 1 (match-data (0 1 0 1) fontified t face py-number-face)) . -1835) (undo-tree-id4798 . -1) (undo-tree-id4799 . -1) (undo-tree-id4800 . -1) (undo-tree-id4801 . -1) (undo-tree-id4802 . -1) (undo-tree-id4803 . -1) (undo-tree-id4804 . -1) (undo-tree-id4805 . -1) (undo-tree-id4806 . -1) (undo-tree-id4807 . -1) (undo-tree-id4808 . -1) (undo-tree-id4809 . -1) 1836) nil (25919 61152 579391 189000) 0 nil])
([nil nil ((1835 . 1840)) nil (25919 61152 579385 812000) 0 nil])
([nil nil ((1866 . 1869)) nil (25919 61152 579385 352000) 0 nil])
([nil nil ((#("S" 0 1 (match-data (0 1 0 1) fontified t face font-lock-string-face)) . -1867) (undo-tree-id4784 . -1) (undo-tree-id4785 . -1) (undo-tree-id4786 . -1) (undo-tree-id4787 . -1) (undo-tree-id4788 . -1) (undo-tree-id4789 . -1) (undo-tree-id4790 . -1) (undo-tree-id4791 . -1) (undo-tree-id4792 . -1) (#("h" 0 1 (match-data (0 1 0 1) fontified t face font-lock-string-face)) . -1868) (undo-tree-id4793 . -1) (undo-tree-id4794 . -1) (undo-tree-id4795 . -1) (undo-tree-id4796 . -1) (undo-tree-id4797 . -1) 1869) nil (25919 61152 579384 319000) 0 nil])
([nil nil ((1867 . 1873)) nil (25919 61152 579378 554000) 0 nil])
([nil nil ((1873 . 1874)) nil (25919 61152 579378 166000) 0 nil])
([nil nil ((1874 . 1875)) nil (25919 61152 579377 702000) 0 nil])
([nil nil ((1875 . 1876)) nil (25919 61152 579377 41000) 0 nil])
([nil nil ((#("'" 0 1 (match-data (0 1 0 1) fontified t face font-lock-string-face)) . -1873) (undo-tree-id4670 . -1) (undo-tree-id4671 . -1) (undo-tree-id4672 . -1) (undo-tree-id4673 . -1) (undo-tree-id4674 . -1) (undo-tree-id4675 . -1) (undo-tree-id4676 . -1) (undo-tree-id4677 . -1) (undo-tree-id4678 . -1) (undo-tree-id4679 . -1) (undo-tree-id4680 . -1) (undo-tree-id4681 . -1) (undo-tree-id4682 . -1) (undo-tree-id4683 . -1) (undo-tree-id4684 . -1) (undo-tree-id4685 . -1) (undo-tree-id4686 . -1) (undo-tree-id4687 . -1) (undo-tree-id4688 . -1) (undo-tree-id4689 . -1) (undo-tree-id4690 . -1) (undo-tree-id4691 . -1) (undo-tree-id4692 . -1) (undo-tree-id4693 . -1) (undo-tree-id4694 . -1) (undo-tree-id4695 . -1) (undo-tree-id4696 . -1) (undo-tree-id4697 . -1) (undo-tree-id4698 . -1) (undo-tree-id4699 . -1) (undo-tree-id4700 . -1) (undo-tree-id4701 . -1) (undo-tree-id4702 . -1) (undo-tree-id4703 . -1) (undo-tree-id4704 . -1) (undo-tree-id4705 . -1) (undo-tree-id4706 . -1) (undo-tree-id4707 . -1) (undo-tree-id4708 . -1) (undo-tree-id4709 . -1) (undo-tree-id4710 . -1) (undo-tree-id4711 . -1) (undo-tree-id4712 . -1) (undo-tree-id4713 . -1) (undo-tree-id4714 . -1) (undo-tree-id4715 . -1) (undo-tree-id4716 . -1) (undo-tree-id4717 . -1) (undo-tree-id4718 . -1) (undo-tree-id4719 . -1) (undo-tree-id4720 . -1) (undo-tree-id4721 . -1) (undo-tree-id4722 . -1) (undo-tree-id4723 . -1) (undo-tree-id4724 . -1) (undo-tree-id4725 . -1) (undo-tree-id4726 . -1) (undo-tree-id4727 . -1) (undo-tree-id4728 . -1) (undo-tree-id4729 . -1) (undo-tree-id4730 . -1) (undo-tree-id4731 . -1) (undo-tree-id4732 . -1) (undo-tree-id4733 . -1) (undo-tree-id4734 . -1) (undo-tree-id4735 . -1) (#(":" 0 1 (match-data (0 1 0 1) fontified t face font-lock-string-face)) . -1874) (undo-tree-id4736 . -1) (undo-tree-id4737 . -1) (undo-tree-id4738 . -1) (undo-tree-id4739 . -1) (undo-tree-id4740 . -1) (undo-tree-id4741 . -1) (undo-tree-id4742 . -1) (undo-tree-id4743 . -1) (undo-tree-id4744 . -1) (undo-tree-id4745 . -1) (undo-tree-id4746 . -1) (undo-tree-id4747 . -1) (undo-tree-id4748 . -1) (undo-tree-id4749 . -1) (undo-tree-id4750 . -1) (undo-tree-id4751 . -1) (undo-tree-id4752 . -1) (undo-tree-id4753 . -1) (undo-tree-id4754 . -1) (undo-tree-id4755 . -1) (undo-tree-id4756 . -1) (undo-tree-id4757 . -1) (undo-tree-id4758 . -1) (undo-tree-id4759 . -1) (undo-tree-id4760 . -1) (undo-tree-id4761 . -1) (undo-tree-id4762 . -1) (undo-tree-id4763 . -1) (undo-tree-id4764 . -1) (undo-tree-id4765 . -1) (undo-tree-id4766 . -1) (undo-tree-id4767 . -1) (undo-tree-id4768 . -1) (undo-tree-id4769 . -1) (undo-tree-id4770 . -1) (undo-tree-id4771 . -1) (#("[" 0 1 (match-data (0 1 0 1) fontified t face font-lock-string-face)) . -1875) (undo-tree-id4772 . -1) (undo-tree-id4773 . -1) (undo-tree-id4774 . -1) (undo-tree-id4775 . -1) (undo-tree-id4776 . -1) (undo-tree-id4777 . -1) (undo-tree-id4778 . -1) (undo-tree-id4779 . -1) (undo-tree-id4780 . -1) (undo-tree-id4781 . -1) (undo-tree-id4782 . -1) (undo-tree-id4783 . -1) 1876) nil (25919 61152 579371 336000) 0 nil])
([nil nil ((1873 . 1874)) nil (25919 61152 573294 848000) 0 nil])
([nil nil ((1874 . 1875)) nil (25919 61152 573294 443000) 0 nil])
([nil nil ((1875 . 1876)) nil (25919 61152 573294 18000) 0 nil])
([nil nil ((#("{" 0 1 (match-data (0 1 0 1) fontified t face (rainbow-delimiters-depth-3-face))) . -1875) (undo-tree-id4656 . -1) (undo-tree-id4657 . -1) (undo-tree-id4658 . -1) (undo-tree-id4659 . -1) (undo-tree-id4660 . -1) (undo-tree-id4661 . -1) (undo-tree-id4662 . -1) (undo-tree-id4663 . -1) (undo-tree-id4664 . -1) (undo-tree-id4665 . -1) (undo-tree-id4666 . -1) (undo-tree-id4667 . -1) (undo-tree-id4668 . -1) (undo-tree-id4669 . -1) 1876) nil (25919 61152 573293 105000) 0 nil])
([nil nil ((1875 . 1887)) nil (25919 61152 573287 123000) 0 nil])
([nil nil ((1887 . 1892)) nil (25919 61152 573286 680000) 0 nil])
([nil nil ((#("[" 0 1 (match-data (0 1 0 1) fontified t face (rainbow-delimiters-depth-4-face))) . -1891) (undo-tree-id4646 . -1) (undo-tree-id4647 . -1) (undo-tree-id4648 . -1) (undo-tree-id4649 . -1) (undo-tree-id4650 . -1) (undo-tree-id4651 . -1) (undo-tree-id4652 . -1) (undo-tree-id4653 . -1) (undo-tree-id4654 . -1) (undo-tree-id4655 . -1) 1892) nil (25919 61152 573285 812000) 0 nil])
([nil nil ((1891 . 1895)) nil (25919 61152 573281 122000) 0 nil])
([nil nil ((#("'" 0 1 (match-data (0 1 0 1) fontified t face font-lock-string-face)) . -1894) (undo-tree-id4643 . -1) (undo-tree-id4644 . -1) (undo-tree-id4645 . -1) 1895) nil (25919 61152 573280 471000) 0 nil])
([nil nil ((1894 . 1905)) nil (25919 61152 573278 715000) 0 nil])
([nil nil ((1905 . 1906)) nil (25919 61152 573278 300000) 0 nil])
([nil nil ((1906 . 1907)) nil (25919 61152 573277 498000) 0 nil])
([nil nil ((1907 . 1921)) nil (25919 61152 573277 4000) 0 nil])
([nil nil ((#("[" 0 1 (match-data (0 1 0 1) fontified t face (rainbow-delimiters-depth-4-face))) . -1920) (undo-tree-id4633 . -1) (undo-tree-id4634 . -1) (undo-tree-id4635 . -1) (undo-tree-id4636 . -1) (undo-tree-id4637 . -1) (undo-tree-id4638 . -1) (undo-tree-id4639 . -1) (undo-tree-id4640 . -1) (undo-tree-id4641 . -1) (undo-tree-id4642 . -1) 1921) nil (25919 61152 573275 285000) 0 nil])
([nil nil ((1920 . 1921)) nil (25919 61152 573261 45000) 0 nil])
([nil nil ((1852 . 1853) (#("S" 0 1 (match-data (0 1 0 1) fontified t face font-lock-string-face)) . -1852) (undo-tree-id5024 . -1) (undo-tree-id5025 . -1) (undo-tree-id5026 . 1) (undo-tree-id5027 . -1) (undo-tree-id5028 . -1) (undo-tree-id5029 . -1) (undo-tree-id5030 . -1) (undo-tree-id5031 . -1) (undo-tree-id5032 . -1) (undo-tree-id5033 . -1) (undo-tree-id5034 . -1) (undo-tree-id5035 . -1) (undo-tree-id5036 . -1) 1853 (1768 . 1769) (#("S" 0 1 (match-data (0 1 0 1) fontified t face font-lock-string-face)) . -1768) (undo-tree-id5037 . -1) (undo-tree-id5038 . -1) (undo-tree-id5039 . 1) (undo-tree-id5040 . -1) (undo-tree-id5041 . -1) (undo-tree-id5042 . -1) (undo-tree-id5043 . -1) (undo-tree-id5044 . -1) (undo-tree-id5045 . -1) (undo-tree-id5046 . -1) (undo-tree-id5047 . -1) 1769 (1718 . 1719) (#("B" 0 1 (match-data (0 1 0 1) fontified t face font-lock-string-face)) . -1718) (undo-tree-id5048 . -1) (undo-tree-id5049 . -1) (undo-tree-id5050 . -1) (undo-tree-id5051 . -1) (undo-tree-id5052 . -1) 1719 (1668 . 1669) (#("T" 0 1 (match-data (0 1 0 1) fontified t face font-lock-string-face)) . -1668) (undo-tree-id5053 . -1) (undo-tree-id5054 . -1) 1669 (1625 . 1626) (#("W" 0 1 (match-data (0 1 0 1) fontified t face font-lock-string-face)) . -1625) (undo-tree-id5055 . -1) (undo-tree-id5056 . -1) 1626 (1550 . 1551) (#("C" 0 1 (match-data (0 1 0 1) fontified t face font-lock-string-face)) . -1550) (undo-tree-id5057 . -1) (undo-tree-id5058 . -1) (undo-tree-id5059 . -1) (undo-tree-id5060 . -1) 1551 (1963 . 1971) (#("        name.lower" 0 18 (match-data (0 4 0 1 1 2 2 3 3 4) fontified t)) . 1963) (undo-tree-id5061 . -18) (undo-tree-id5062 . -18) (1971 . 1981) (1962 . 1971) (2008 . 2024) (2003 . 2008) (#(")" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t face (rainbow-delimiters-unmatched-face))) . -2003) (undo-tree-id5063 . -1) (undo-tree-id5064 . -1) 2004 (2003 . 2004) (1994 . 2003) (#("fil" 0 3 (fontified nil)) . -1994) (1994 . 1997) (#("filter_by" 0 9 (fontified nil)) . -1994) (1994 . 2003) (#("fil" 0 3 (match-data (0 2 0 1 1 2) fontified t)) . -1994) (undo-tree-id5065 . -3) (undo-tree-id5066 . -3) 1997 (1993 . 1997) (1988 . 1993) (#("qu" 0 2 (fontified nil)) . -1988) (1988 . 1990) (#("query" 0 5 (fontified nil)) . -1988) (1988 . 1993) (#("qu" 0 2 (match-data (0 3 0 1 1 2 2 3) fontified t)) . -1988) (undo-tree-id5067 . -2) 1990 (1987 . 1990) (1978 . 1987) (#("Cha" 0 3 (fontified nil)) . -1978) (1978 . 1981) (#("Character" 0 9 (fontified nil)) . -1978) (1978 . 1987) (#("Cha" 0 3 (match-data (0 4 0 1 1 2 2 3 3 4) fontified t)) . -1978) (undo-tree-id5068 . -3) 1981 (1976 . 1981) (1971 . 1976) (1962 . 1971) (1961 . 1962) (1959 . 1961) (1955 . 1959) (#("ke" 0 2 (fontified nil)) . -1955) (1955 . 1957) (#("keys()" 0 4 (fontified t) 4 5 (fontified t face (rainbow-delimiters-depth-1-face)) 5 6 (fontified t face (rainbow-delimiters-depth-1-face))) . 1955) (undo-tree-id5069 . -3) (undo-tree-id5070 . -4) 1959 (1958 . 1959) (1942 . 1960) (1937 . 1942) (t 25919 61152 577364 62000)) nil (25919 61518 21115 863000) 0 nil])
([nil nil ((#("        
" 0 8 (match-data (0 4 0 1 1 2 2 3 3 4) fontified t) 8 9 (match-data (0 4 0 1 1 2 2 3 3 4) fontified t)) . 1963) (undo-tree-id5476 . -8) (undo-tree-id5477 . -8) (undo-tree-id5478 . -7) (undo-tree-id5479 . -7) (undo-tree-id5480 . -8) (undo-tree-id5481 . -8) (undo-tree-id5482 . -8) (undo-tree-id5483 . -8) (undo-tree-id5484 . -7) (undo-tree-id5485 . -7) (undo-tree-id5486 . -7) (undo-tree-id5487 . -7) (undo-tree-id5488 . -7) (undo-tree-id5489 . -7) (undo-tree-id5490 . -7) (undo-tree-id5491 . -7) (undo-tree-id5492 . -7) (undo-tree-id5493 . -9) 1970 (t 25919 61518 17248 473000)) nil (25919 61652 923530 559000) 0 nil])
([nil nil ((2024 . 2033) 2023) nil (25919 61652 923522 359000) 0 nil])
([nil nil ((1932 . 1937)) nil (25919 61652 923521 823000) 0 nil])
([nil nil ((1937 . 1951)) nil (25919 61652 923521 392000) 0 nil])
([nil nil ((2052 . 2064)) nil (25919 61652 923520 882000) 0 nil])
([nil nil ((2062 . 2068) (#("ap" 0 2 (fontified nil)) . -2062) (2062 . 2064) (#("append" 0 6 (fontified nil)) . -2062) (2062 . 2068) (#("ap" 0 2 (fontified t)) . -2062) (undo-tree-id5469 . -2) (undo-tree-id5470 . -1) (undo-tree-id5471 . -1) (undo-tree-id5472 . -1) (undo-tree-id5473 . -2) (undo-tree-id5474 . -2) (undo-tree-id5475 . -2) 2064) nil (25919 61652 923519 871000) 0 nil])
([nil nil ((2068 . 2069)) nil (25919 61652 923515 964000) 0 nil])
([nil nil ((2069 . 2072)) nil (25919 61652 923515 496000) 0 nil])
([nil nil ((2069 . 2083) (#("Spe" 0 3 (fontified nil)) . -2069) (2069 . 2072) (#("Specialization" 0 14 (fontified nil)) . -2069) (2069 . 2083) (#("Spe" 0 3 (match-data (0 2 0 1 1 2) fontified t)) . -2069) (undo-tree-id5457 . -3) (undo-tree-id5458 . -3) (undo-tree-id5459 . -1) (undo-tree-id5460 . -2) (undo-tree-id5461 . -2) (undo-tree-id5462 . -2) (undo-tree-id5463 . -3) (undo-tree-id5464 . -3) (undo-tree-id5465 . -3) (undo-tree-id5466 . -3) (undo-tree-id5467 . -3) (undo-tree-id5468 . -3) 2072) nil (25919 61652 923514 379000) 0 nil])
([nil nil ((2083 . 2084)) nil (25919 61652 923509 550000) 0 nil])
([nil nil ((#("        specializ.append(Specialization(" 0 18 (fontified t) 18 24 (match-data (0 2 0 1 1 2) fontified t) 24 25 (match-data (0 2 0 1 1 2) fontified t face (rainbow-delimiters-depth-1-face)) 25 39 (match-data (0 3 0 1 1 2 2 3) fontified t) 39 40 (match-data (0 3 0 1 1 2 2 3) fontified t face (rainbow-delimiters-depth-2-face))) . 2044) (undo-tree-id5361 . -40) (undo-tree-id5362 . -8) (undo-tree-id5363 . -8) (undo-tree-id5364 . -8) (undo-tree-id5365 . -8) (undo-tree-id5366 . -8) (undo-tree-id5367 . -8) (undo-tree-id5368 . -8) (undo-tree-id5369 . -8) (undo-tree-id5370 . -8) (undo-tree-id5371 . -8) (undo-tree-id5372 . -8) (undo-tree-id5373 . -8) (undo-tree-id5374 . -8) (undo-tree-id5375 . -8) (undo-tree-id5376 . -8) (undo-tree-id5377 . -8) (undo-tree-id5378 . -8) (undo-tree-id5379 . -9) (undo-tree-id5380 . -10) (undo-tree-id5381 . -10) (undo-tree-id5382 . -11) (undo-tree-id5383 . -11) (undo-tree-id5384 . -12) (undo-tree-id5385 . -13) (undo-tree-id5386 . -14) (undo-tree-id5387 . -15) (undo-tree-id5388 . -16) (undo-tree-id5389 . -17) (undo-tree-id5390 . -17) (undo-tree-id5391 . -17) (undo-tree-id5392 . -18) (undo-tree-id5393 . -18) (undo-tree-id5394 . -18) (undo-tree-id5395 . -18) (undo-tree-id5396 . -18) (undo-tree-id5397 . -18) (undo-tree-id5398 . -18) (undo-tree-id5399 . -18) (undo-tree-id5400 . -18) (undo-tree-id5401 . -24) (undo-tree-id5402 . -24) (undo-tree-id5403 . -24) (undo-tree-id5404 . -24) (undo-tree-id5405 . -24) (undo-tree-id5406 . -24) (undo-tree-id5407 . -24) (undo-tree-id5408 . -24) (undo-tree-id5409 . -25) (undo-tree-id5410 . -25) (undo-tree-id5411 . -25) (undo-tree-id5412 . -25) (undo-tree-id5413 . -25) (undo-tree-id5414 . -25) (undo-tree-id5415 . -25) (undo-tree-id5416 . -25) (undo-tree-id5417 . -25) (undo-tree-id5418 . -25) (undo-tree-id5419 . -25) (undo-tree-id5420 . -25) (undo-tree-id5421 . -25) (undo-tree-id5422 . -25) (undo-tree-id5423 . -25) (undo-tree-id5424 . -25) (undo-tree-id5425 . -25) (undo-tree-id5426 . -25) (undo-tree-id5427 . -25) (undo-tree-id5428 . -25) (undo-tree-id5429 . -25) (undo-tree-id5430 . -25) (undo-tree-id5431 . -25) (undo-tree-id5432 . -39) (undo-tree-id5433 . -39) (undo-tree-id5434 . -39) (undo-tree-id5435 . -39) (undo-tree-id5436 . -39) (undo-tree-id5437 . -39) (undo-tree-id5438 . -39) (undo-tree-id5439 . -39) (undo-tree-id5440 . -39) (undo-tree-id5441 . -39) (undo-tree-id5442 . -40) (undo-tree-id5443 . -40) (undo-tree-id5444 . -40) (undo-tree-id5445 . -40) (undo-tree-id5446 . -40) (undo-tree-id5447 . -40) (undo-tree-id5448 . -39) (undo-tree-id5449 . -40) (undo-tree-id5450 . -24) (undo-tree-id5451 . -25) (undo-tree-id5452 . -25) (undo-tree-id5453 . -40) (undo-tree-id5454 . -40) (undo-tree-id5455 . -40) (undo-tree-id5456 . -40)) nil (25919 61652 923506 849000) 0 nil])
([nil nil ((2044 . 2052)) nil (25919 61652 923469 216000) 0 nil])
([nil nil ((2052 . 2054)) nil (25919 61652 923468 809000) 0 nil])
([nil nil ((2054 . 2075)) nil (25919 61652 923468 421000) 0 nil])
([nil nil ((2075 . 2076)) nil (25919 61652 923467 902000) 0 nil])
([nil nil ((2076 . 2077)) nil (25919 61652 923467 505000) 0 nil])
([nil nil ((2069 . 2075)) nil (25919 61652 923467 92000) 0 nil])
([nil nil ((2083 . 2096)) nil (25919 61652 923466 666000) 0 nil])
([nil nil ((2096 . 2100)) nil (25919 61652 923466 274000) 0 nil])
([nil nil ((2096 . 2105) (#("spe" 0 3 (fontified nil)) . -2096) (2096 . 2099) (#("specializ" 0 9 (fontified nil)) . -2096) (2096 . 2105) (#("spei" 0 4 (fontified t)) . -2096) (undo-tree-id5349 . -4) (undo-tree-id5350 . -1) (undo-tree-id5351 . -2) (undo-tree-id5352 . -2) (undo-tree-id5353 . -3) (undo-tree-id5354 . -3) (undo-tree-id5355 . -4) (undo-tree-id5356 . -4) (undo-tree-id5357 . -4) (undo-tree-id5358 . -4) (undo-tree-id5359 . -4) (undo-tree-id5360 . -4) 2100) nil (25919 61652 923465 213000) 0 nil])
([nil nil ((2105 . 2108)) nil (25919 61652 923459 954000) 0 nil])
([nil nil ((2106 . 2112) (#("ap" 0 2 (fontified nil)) . -2106) (2106 . 2108) (#("append" 0 6 (fontified nil)) . -2106) (2106 . 2112) (#("ap" 0 2 (match-data (0 5 0 1 1 2 2 3 4 5) fontified t)) . -2106) (undo-tree-id5343 . -2) (undo-tree-id5344 . -1) (undo-tree-id5345 . -1) (undo-tree-id5346 . -2) (undo-tree-id5347 . -2) (undo-tree-id5348 . -2) 2108) nil (25919 61652 923458 987000) 0 nil])
([nil nil ((2112 . 2115)) nil (25919 61652 923453 976000) 0 nil])
([nil nil ((2113 . 2127) (#("Sp" 0 2 (fontified nil)) . -2113) (2113 . 2115) (#("Specialization" 0 14 (fontified nil)) . -2113) (2113 . 2127) (#("Sp" 0 2 (match-data (0 2 0 1 1 2) fontified t)) . -2113) (undo-tree-id5333 . -2) (undo-tree-id5334 . -2) (undo-tree-id5335 . -1) (undo-tree-id5336 . -2) (undo-tree-id5337 . -2) (undo-tree-id5338 . -2) (undo-tree-id5339 . -2) (undo-tree-id5340 . -2) (undo-tree-id5341 . -2) (undo-tree-id5342 . -2) 2115) nil (25919 61652 923452 928000) 0 nil])
([nil nil ((2127 . 2132)) nil (25919 61652 923448 590000) 0 nil])
([nil nil ((#("s" 0 1 (match-data (0 2 0 1 1 2) fontified t)) . -2128) (undo-tree-id5287 . -1) (undo-tree-id5288 . -1) (undo-tree-id5289 . -1) (undo-tree-id5290 . -1) (undo-tree-id5291 . -1) (undo-tree-id5292 . -1) (undo-tree-id5293 . -1) (undo-tree-id5294 . -1) (undo-tree-id5295 . -1) (undo-tree-id5296 . -1) (undo-tree-id5297 . -1) (undo-tree-id5298 . -1) (undo-tree-id5299 . -1) (undo-tree-id5300 . -1) (undo-tree-id5301 . -1) (undo-tree-id5302 . -1) (undo-tree-id5303 . -1) (undo-tree-id5304 . -1) (#("p" 0 1 (match-data (0 2 0 1 1 2) fontified t)) . -2129) (undo-tree-id5305 . -1) (undo-tree-id5306 . -1) (undo-tree-id5307 . -1) (undo-tree-id5308 . -1) (undo-tree-id5309 . -1) (undo-tree-id5310 . -1) (undo-tree-id5311 . -1) (undo-tree-id5312 . -1) (undo-tree-id5313 . -1) (undo-tree-id5314 . -1) (undo-tree-id5315 . -1) (undo-tree-id5316 . -1) (undo-tree-id5317 . -1) (#("e" 0 1 (match-data (0 2 0 1 1 2) fontified t)) . -2130) (undo-tree-id5318 . -1) (undo-tree-id5319 . -1) (undo-tree-id5320 . -1) (undo-tree-id5321 . -1) (undo-tree-id5322 . -1) (undo-tree-id5323 . -1) (undo-tree-id5324 . -1) (undo-tree-id5325 . -1) (undo-tree-id5326 . -1) (#("c" 0 1 (match-data (0 2 0 1 1 2) fontified t)) . -2131) (undo-tree-id5327 . -1) (undo-tree-id5328 . -1) (undo-tree-id5329 . -1) (undo-tree-id5330 . -1) (undo-tree-id5331 . -1) (undo-tree-id5332 . -1) 2132) nil (25919 61652 923446 706000) 0 nil])
([nil nil ((2128 . 2142)) nil (25919 61652 923428 145000) 0 nil])
([nil nil ((#(" " 0 1 (match-data (0 2 0 1 1 2) fontified t)) . 2141) (undo-tree-id5278 . -1) (undo-tree-id5279 . -1) (undo-tree-id5280 . -1) (undo-tree-id5281 . -1) (undo-tree-id5282 . -1) (undo-tree-id5283 . -1) (undo-tree-id5284 . -1) (undo-tree-id5285 . -1) (undo-tree-id5286 . -1) 2142) nil (25919 61652 923427 93000) 0 nil])
([nil nil ((#("a" 0 1 (match-data (0 2 0 1 1 2) fontified t)) . -2137) (undo-tree-id5201 . -1) (undo-tree-id5202 . -1) (undo-tree-id5203 . -1) (undo-tree-id5204 . -1) (undo-tree-id5205 . -1) (undo-tree-id5206 . -1) (undo-tree-id5207 . -1) (undo-tree-id5208 . -1) (undo-tree-id5209 . -1) (undo-tree-id5210 . -1) (undo-tree-id5211 . -1) (undo-tree-id5212 . -1) (undo-tree-id5213 . -1) (undo-tree-id5214 . -1) (undo-tree-id5215 . -1) (undo-tree-id5216 . -1) (undo-tree-id5217 . -1) (undo-tree-id5218 . -1) (undo-tree-id5219 . -1) (undo-tree-id5220 . -1) (undo-tree-id5221 . -1) (undo-tree-id5222 . -1) (undo-tree-id5223 . -1) (undo-tree-id5224 . -1) (undo-tree-id5225 . -1) (undo-tree-id5226 . -1) (#("c" 0 1 (match-data (0 2 0 1 1 2) fontified t)) . -2138) (undo-tree-id5227 . -1) (undo-tree-id5228 . -1) (undo-tree-id5229 . -1) (undo-tree-id5230 . -1) (undo-tree-id5231 . -1) (undo-tree-id5232 . -1) (undo-tree-id5233 . -1) (undo-tree-id5234 . -1) (undo-tree-id5235 . -1) (undo-tree-id5236 . -1) (undo-tree-id5237 . -1) (undo-tree-id5238 . -1) (undo-tree-id5239 . -1) (undo-tree-id5240 . -1) (undo-tree-id5241 . -1) (undo-tree-id5242 . -1) (undo-tree-id5243 . -1) (undo-tree-id5244 . -1) (undo-tree-id5245 . -1) (undo-tree-id5246 . -1) (undo-tree-id5247 . -1) (#("e" 0 1 (match-data (0 2 0 1 1 2) fontified t)) . -2139) (undo-tree-id5248 . -1) (undo-tree-id5249 . -1) (undo-tree-id5250 . -1) (undo-tree-id5251 . -1) (undo-tree-id5252 . -1) (undo-tree-id5253 . -1) (undo-tree-id5254 . -1) (undo-tree-id5255 . -1) (undo-tree-id5256 . -1) (undo-tree-id5257 . -1) (undo-tree-id5258 . -1) (undo-tree-id5259 . -1) (undo-tree-id5260 . -1) (undo-tree-id5261 . -1) (undo-tree-id5262 . -1) (undo-tree-id5263 . -1) (undo-tree-id5264 . -1) (#("," 0 1 (match-data (0 2 0 1 1 2) fontified t)) . -2140) (undo-tree-id5265 . -1) (undo-tree-id5266 . -1) (undo-tree-id5267 . -1) (undo-tree-id5268 . -1) (undo-tree-id5269 . -1) (undo-tree-id5270 . -1) (undo-tree-id5271 . -1) (undo-tree-id5272 . -1) (undo-tree-id5273 . -1) (undo-tree-id5274 . -1) (undo-tree-id5275 . -1) (undo-tree-id5276 . -1) (undo-tree-id5277 . -1) 2141) nil (25919 61652 923418 548000) 0 nil])
([nil nil ((2137 . 2144)) nil (25919 61652 920348 45000) 0 nil])
([nil nil ((2141 . 2149) (#("rol" 0 3 (fontified nil)) . -2141) (2141 . 2144) (#("role_id=" 0 8 (fontified nil)) . -2141) (2141 . 2149) (#("rol" 0 3 (match-data (0 2 0 1 1 2) fontified t)) . -2141) (undo-tree-id5185 . -3) (undo-tree-id5186 . -3) (undo-tree-id5187 . -1) (undo-tree-id5188 . -1) (undo-tree-id5189 . -2) (undo-tree-id5190 . -2) (undo-tree-id5191 . -2) (undo-tree-id5192 . -3) (undo-tree-id5193 . -3) (undo-tree-id5194 . -3) (undo-tree-id5195 . -3) (undo-tree-id5196 . -3) (undo-tree-id5197 . -3) (undo-tree-id5198 . -3) (undo-tree-id5199 . -3) (undo-tree-id5200 . -3) 2144) nil (25919 61652 920346 855000) 0 nil])
([nil nil ((2149 . 2155)) nil (25919 61652 920339 361000) 0 nil])
([nil nil ((2155 . 2169)) nil (25919 61652 920338 859000) 0 nil])
([nil nil ((2169 . 2175)) nil (25919 61652 920338 453000) 0 nil])
([nil nil ((2171 . 2181) (#("gea" 0 3 (fontified nil)) . -2171) (2171 . 2174) (#("gearscore=" 0 10 (fontified nil)) . -2171) (2171 . 2181) (#("gear" 0 4 (fontified t)) . -2171) (undo-tree-id5169 . -4) (undo-tree-id5170 . -4) (undo-tree-id5171 . -1) (undo-tree-id5172 . -1) (undo-tree-id5173 . -1) (undo-tree-id5174 . -2) (undo-tree-id5175 . -2) (undo-tree-id5176 . -3) (undo-tree-id5177 . -3) (undo-tree-id5178 . -4) (undo-tree-id5179 . -4) (undo-tree-id5180 . -4) (undo-tree-id5181 . -4) (undo-tree-id5182 . -4) (undo-tree-id5183 . -4) (undo-tree-id5184 . -4) 2175) nil (25919 61652 920337 434000) 0 nil])
([nil nil ((2181 . 2192)) nil (25919 61652 920330 107000) 0 nil])
([nil nil ((#("\\" 0 1 (fontified t)) . -2191) (undo-tree-id5154 . -1) (undo-tree-id5155 . -1) (undo-tree-id5156 . -1) (undo-tree-id5157 . -1) (undo-tree-id5158 . -1) (undo-tree-id5159 . -1) (undo-tree-id5160 . -1) (undo-tree-id5161 . -1) (undo-tree-id5162 . -1) (undo-tree-id5163 . -1) (undo-tree-id5164 . -1) (undo-tree-id5165 . -1) (undo-tree-id5166 . -1) (undo-tree-id5167 . -1) (undo-tree-id5168 . -1) 2192) nil (25919 61652 920329 75000) 0 nil])
([nil nil ((2191 . 2205)) nil (25919 61652 920322 395000) 0 nil])
([nil nil ((2203 . 2216) (#("ch" 0 2 (fontified nil)) . -2203) (2203 . 2205) (#("character_id=" 0 13 (fontified nil)) . -2203) (2203 . 2216) (#("ch" 0 2 (fontified t)) . -2203) (undo-tree-id5142 . -2) (undo-tree-id5143 . -2) (undo-tree-id5144 . -1) (undo-tree-id5145 . -2) (undo-tree-id5146 . -2) (undo-tree-id5147 . -2) (undo-tree-id5148 . -2) (undo-tree-id5149 . -2) (undo-tree-id5150 . -2) (undo-tree-id5151 . -2) (undo-tree-id5152 . -2) (undo-tree-id5153 . -2) 2205) nil (25919 61652 920321 11000) 0 nil])
([nil nil ((2216 . 2223)) nil (25919 61652 920315 855000) 0 nil])
([nil nil ((2223 . 2225)) nil (25919 61652 920315 502000) 0 nil])
([nil nil ((2225 . 2238)) nil (25919 61652 920315 125000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . 2234) (undo-tree-id5130 . -4) (undo-tree-id5131 . -4) (undo-tree-id5132 . -4) (undo-tree-id5133 . -4) (undo-tree-id5134 . -4) (undo-tree-id5135 . -4) (undo-tree-id5136 . -4) (undo-tree-id5137 . -4) (undo-tree-id5138 . -4) (undo-tree-id5139 . -4) (undo-tree-id5140 . -4) (undo-tree-id5141 . -4) 2238) nil (25919 61652 920314 348000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . 2230) (undo-tree-id5114 . -4) (undo-tree-id5115 . -4) (undo-tree-id5116 . -4) (undo-tree-id5117 . -4) (undo-tree-id5118 . -4) (undo-tree-id5119 . -4) (undo-tree-id5120 . -4) (undo-tree-id5121 . -4) (undo-tree-id5122 . -4) (undo-tree-id5123 . -4) (undo-tree-id5124 . -4) (undo-tree-id5125 . -4) (undo-tree-id5126 . -4) (undo-tree-id5127 . -4) (undo-tree-id5128 . -4) (undo-tree-id5129 . -4) 2234) nil (25919 61652 920308 856000) 0 nil])
([nil nil ((2230 . 2234)) nil (25919 61652 920301 295000) 0 nil])
([nil nil ((2233 . 2240) (#("s" 0 1 (fontified nil)) . -2233) (2233 . 2234) (#("session" 0 7 (fontified nil)) . -2233) (2233 . 2240) (#("s" 0 1 (fontified t)) . -2233) (undo-tree-id5107 . -1) (undo-tree-id5108 . -1) (undo-tree-id5109 . -1) (undo-tree-id5110 . -1) (undo-tree-id5111 . -1) (undo-tree-id5112 . -1) (undo-tree-id5113 . -1) 2234) nil (25919 61652 920300 259000) 0 nil])
([nil nil ((2240 . 2243)) nil (25919 61652 920296 106000) 0 nil])
([nil nil ((2241 . 2258) (#("bu" 0 2 (fontified nil)) . -2241) (2241 . 2243) (#("bulk_save_objects" 0 17 (fontified nil)) . -2241) (2241 . 2258) (#("bu" 0 2 (match-data (0 1 0 1) fontified t)) . -2241) (undo-tree-id5096 . -2) (undo-tree-id5097 . -2) (undo-tree-id5098 . -1) (undo-tree-id5099 . -1) (undo-tree-id5100 . -2) (undo-tree-id5101 . -2) (undo-tree-id5102 . -2) (undo-tree-id5103 . -2) (undo-tree-id5104 . -2) (undo-tree-id5105 . -2) (undo-tree-id5106 . -2) 2243) nil (25919 61652 920294 792000) 0 nil])
([nil nil ((2258 . 2259)) nil (25919 61652 920289 521000) 0 nil])
([nil nil ((2259 . 2261)) nil (25919 61652 920289 68000) 0 nil])
([nil nil ((2259 . 2268) (#("sp" 0 2 (fontified nil)) . -2259) (2259 . 2261) (#("specializ" 0 9 (fontified nil)) . -2259) (2259 . 2268) (#("sp" 0 2 (match-data (0 2 0 1 1 2) fontified t)) . -2259) (undo-tree-id5071 . -2) (undo-tree-id5072 . -2) (undo-tree-id5073 . -1) (undo-tree-id5074 . -1) (undo-tree-id5075 . -1) (undo-tree-id5076 . -2) (undo-tree-id5077 . -2) (undo-tree-id5078 . -2) (undo-tree-id5079 . -2) (undo-tree-id5080 . -2) (undo-tree-id5081 . -2) (undo-tree-id5082 . -2) (undo-tree-id5083 . -1) (undo-tree-id5084 . -1) (undo-tree-id5085 . -1) (undo-tree-id5086 . -1) (undo-tree-id5087 . -1) (undo-tree-id5088 . -1) (undo-tree-id5089 . -2) (undo-tree-id5090 . -2) (undo-tree-id5091 . -2) (undo-tree-id5092 . -2) (undo-tree-id5093 . -2) (undo-tree-id5094 . -2) (undo-tree-id5095 . -2) 2261) nil (25919 61652 920286 750000) 0 nil])
([nil nil ((2268 . 2269)) nil (25919 61652 920265 387000) 0 nil])
([nil nil ((1981 . 1990) (t 25919 61652 927230 475000)) nil (25919 61749 675901 398000) 0 nil])
([nil nil ((1990 . 1991)) nil (25919 61749 675900 748000) 0 nil])
([nil nil ((#("z" 0 1 (match-data (0 4 0 1 1 2 2 3 3 4) fontified t)) . -1990) (undo-tree-id5519 . -1) (undo-tree-id5520 . -1) (undo-tree-id5521 . -1) 1991) nil (25919 61749 675899 927000) 0 nil])
([nil nil ((#("        " 0 8 (match-data (0 4 0 1 1 2 2 3 3 4) fontified t)) . 1982) (undo-tree-id5494 . -8) (undo-tree-id5495 . -8) (undo-tree-id5496 . -8) (undo-tree-id5497 . -8) (undo-tree-id5498 . -8) (undo-tree-id5499 . -8) (undo-tree-id5500 . -8) (undo-tree-id5501 . -8) (undo-tree-id5502 . -8) (undo-tree-id5503 . -8) (undo-tree-id5504 . -8) (undo-tree-id5505 . -8) (undo-tree-id5506 . -8) (undo-tree-id5507 . -8) (undo-tree-id5508 . -8) (undo-tree-id5509 . -8) (undo-tree-id5510 . -8) (undo-tree-id5511 . -8) (undo-tree-id5512 . -8) (undo-tree-id5513 . -8) (undo-tree-id5514 . -8) (undo-tree-id5515 . -8) (undo-tree-id5516 . -8) (undo-tree-id5517 . -8) (undo-tree-id5518 . -8)) nil (25919 61749 675895 692000) 0 nil])
([nil nil ((2044 . 2053)) nil (25919 61749 675876 770000) 0 nil])
([nil nil ((2053 . 2064)) nil (25919 61749 675873 499000) 0 nil])
([nil nil ((#("C" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-string-face)) . 842) (t 25919 61749 677188 817000)) nil (25919 61788 270465 938000) 0 nil])
([nil nil ((842 . 843)) nil (25919 61788 270465 389000) 0 nil])
([nil nil ((#("W" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-string-face)) . -933) (undo-tree-id5581 . -1) (undo-tree-id5582 . 1) (undo-tree-id5583 . -1) (undo-tree-id5584 . -1) (undo-tree-id5585 . -1) (undo-tree-id5586 . -1) 934) nil (25919 61788 270464 649000) 0 nil])
([nil nil ((933 . 934)) nil (25919 61788 270461 651000) 0 nil])
([nil nil ((#("T" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-string-face)) . -1019) (undo-tree-id5571 . -1) (undo-tree-id5572 . -1) (undo-tree-id5573 . 1) (undo-tree-id5574 . -1) (undo-tree-id5575 . -1) (undo-tree-id5576 . -1) (undo-tree-id5577 . -1) (undo-tree-id5578 . -1) (undo-tree-id5579 . -1) (undo-tree-id5580 . -1) 1020) nil (25919 61788 270460 740000) 0 nil])
([nil nil ((1019 . 1020)) nil (25919 61788 270455 248000) 0 nil])
([nil nil ((#("D" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-string-face)) . -1110) (undo-tree-id5556 . -1) (undo-tree-id5557 . -1) (undo-tree-id5558 . 1) (undo-tree-id5559 . -1) (undo-tree-id5560 . -1) (undo-tree-id5561 . -1) (undo-tree-id5562 . -1) (undo-tree-id5563 . -1) (undo-tree-id5564 . -1) (undo-tree-id5565 . -1) (undo-tree-id5566 . -1) (undo-tree-id5567 . -1) (undo-tree-id5568 . -1) (undo-tree-id5569 . -1) (undo-tree-id5570 . -1) 1111) nil (25919 61788 270454 263000) 0 nil])
([nil nil ((1110 . 1111)) nil (25919 61788 270448 23000) 0 nil])
([nil nil ((#("B" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-string-face)) . -1199) (undo-tree-id5542 . -1) (undo-tree-id5543 . -1) (undo-tree-id5544 . -1) (undo-tree-id5545 . -1) (undo-tree-id5546 . -1) (undo-tree-id5547 . -1) (undo-tree-id5548 . -1) (undo-tree-id5549 . -1) (undo-tree-id5550 . -1) (undo-tree-id5551 . -1) (undo-tree-id5552 . -1) (undo-tree-id5553 . -1) (undo-tree-id5554 . -1) (undo-tree-id5555 . -1) 1200) nil (25919 61788 270447 50000) 0 nil])
([nil nil ((1199 . 1200)) nil (25919 61788 270440 925000) 0 nil])
([nil nil ((#("S" 0 1 (match-data (0 3 0 1 1 2 2 3) face font-lock-string-face fontified t)) . -1299) (undo-tree-id5533 . -1) (undo-tree-id5534 . -1) (undo-tree-id5535 . 1) (undo-tree-id5536 . -1) (undo-tree-id5537 . -1) (undo-tree-id5538 . -1) (undo-tree-id5539 . -1) (undo-tree-id5540 . -1) (undo-tree-id5541 . -1) 1300) nil (25919 61788 270440 104000) 0 nil])
([nil nil ((1299 . 1300)) nil (25919 61788 270435 421000) 0 nil])
([nil nil ((#("S" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-string-face)) . -1393) (undo-tree-id5522 . -1) (undo-tree-id5523 . -1) (undo-tree-id5524 . 1) (undo-tree-id5525 . -1) (undo-tree-id5526 . -1) (undo-tree-id5527 . -1) (undo-tree-id5528 . -1) (undo-tree-id5529 . -1) (undo-tree-id5530 . -1) (undo-tree-id5531 . -1) (undo-tree-id5532 . -1) 1394) nil (25919 61788 270433 843000) 0 nil])
([nil nil ((1393 . 1394)) nil (25919 61788 270418 863000) 0 nil])
([nil nil ((865 . 866) (#("P" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-string-face)) . 865) (undo-tree-id5934 . 1) (t 25919 61788 267175 472000)) nil (25919 61929 468263 653000) 0 nil])
([nil nil ((954 . 955) (#("M" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-string-face)) . 954)) nil (25919 61929 468262 390000) 0 nil])
([nil nil ((1043 . 1044) (#("H" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-string-face)) . 1043)) nil (25919 61929 468261 835000) 0 nil])
([nil nil ((1132 . 1133) (#("S" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-string-face)) . 1132)) nil (25919 61929 468261 303000) 0 nil])
([nil nil ((1226 . 1227) (#("D" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-string-face)) . 1226)) nil (25919 61929 468260 702000) 0 nil])
([nil nil ((1232 . 1233) (#("K" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-string-face)) . 1232)) nil (25919 61929 468260 133000) 0 nil])
([nil nil ((1327 . 1328) (#("D" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-string-face)) . 1327)) nil (25919 61929 468259 553000) 0 nil])
([nil nil ((1421 . 1422) (#("P" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-string-face)) . 1421)) nil (25919 61929 468258 960000) 0 nil])
([nil nil ((522 . 523) (#("D" 0 1 (match-data (0 1 0 1) fontified t face font-lock-string-face)) . 522) (undo-tree-id5933 . 1)) nil (25919 61929 468258 256000) 0 nil])
([nil nil ((578 . 579) (#("T" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-string-face)) . 578)) nil (25919 61929 468256 800000) 0 nil])
([nil nil ((633 . 634) (#("H" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-string-face)) . 633)) nil (25919 61929 468255 931000) 0 nil])
([nil nil ((690 . 691) (#("M" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-string-face)) . 690)) nil (25919 61929 468255 273000) 0 nil])
([nil nil ((748 . 749) (#("R" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-string-face)) . 748)) nil (25919 61929 468254 723000) 0 nil])
([nil nil ((228 . 229) (#("T" 0 1 (fontified t face font-lock-string-face)) . 228)) nil (25919 61929 468254 180000) 0 nil])
([nil nil ((264 . 265) (#("M" 0 1 (fontified t face font-lock-string-face)) . 264)) nil (25919 61929 468253 584000) 0 nil])
([nil nil ((301 . 302) (#("R" 0 1 (fontified t face font-lock-string-face)) . 301)) nil (25919 61929 468252 992000) 0 nil])
([nil nil ((339 . 340) (#("H" 0 1 (fontified t face font-lock-string-face)) . 339)) nil (25919 61929 468252 382000) 0 nil])
([nil nil ((441 . 442) (#("D" 0 1 (fontified t face font-lock-string-face)) . 441) (undo-tree-id5932 . 1)) nil (25919 61929 468251 736000) 0 nil])
([nil nil ((2785 . 2786) (#("B" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-string-face)) . 2785) (undo-tree-id5931 . 1)) nil (25919 61929 468250 638000) 0 nil])
([nil nil ((2877 . 2878) (#("O" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-string-face)) . 2877) (undo-tree-id5930 . 1)) nil (25919 61929 468249 614000) 0 nil])
([nil nil ((2969 . 2970) (#("B" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-string-face)) . 2969) (undo-tree-id5925 . -1) (undo-tree-id5926 . -1) (undo-tree-id5927 . -1) (undo-tree-id5928 . -1) (undo-tree-id5929 . 1)) nil (25919 61929 468248 8000) 0 nil])
([nil nil ((3058 . 3059) (#("H" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-string-face)) . 3058) (undo-tree-id5924 . 1)) nil (25919 61929 468245 328000) 0 nil])
([nil nil ((3152 . 3153) (#("Q" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-string-face)) . 3152) (undo-tree-id5923 . 1)) nil (25919 61929 468244 350000) 0 nil])
([nil nil ((3242 . 3243) (#("M" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-string-face)) . 3242)) nil (25919 61929 468243 311000) 0 nil])
([nil nil ((3341 . 3342) (#("D" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-string-face)) . 3341) (undo-tree-id5922 . 1)) nil (25919 61929 468242 561000) 0 nil])
([nil nil ((3436 . 3437) (#("R" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-string-face)) . 3436) (undo-tree-id5921 . 1)) nil (25919 61929 468241 441000) 0 nil])
([nil nil ((2808 . 2809) (#("W" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-string-face)) . 2808)) nil (25919 61929 468240 366000) 0 nil])
([nil nil ((2899 . 2900) (#("P" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-string-face)) . 2899)) nil (25919 61929 468239 723000) 0 nil])
([nil nil ((2992 . 2993) (#("M" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-string-face)) . 2992)) nil (25919 61929 468238 952000) 0 nil])
([nil nil ((3494 . 3495) (#("
" 0 1 (fontified nil)) . 3494) (undo-tree-id5855 . -1) (3493 . 3494) (#("
" 0 1 (fontified nil)) . 3493) (undo-tree-id5856 . -1) (undo-tree-id5857 . -1) (undo-tree-id5858 . -1) (undo-tree-id5859 . -1) (undo-tree-id5860 . -1) (undo-tree-id5861 . -1) (3492 . 3493) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 3492) (3491 . 3492) (#(")" 0 1 (rear-nonsticky t match-data (0 3 0 1 1 2 2 3) fontified nil face (rainbow-delimiters-depth-2-face))) . 3491) (3490 . 3491) (#("d" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3490) (undo-tree-id5862 . -1) (3489 . 3490) (#("i" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3489) (3488 . 3489) (#("." 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3488) (undo-tree-id5863 . -1) (3487 . 3488) (#("N" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3487) (3486 . 3487) (#("O" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3486) (3485 . 3486) (#("T" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3485) (3484 . 3485) (#("L" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3484) (3483 . 3484) (#("A" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3483) (3482 . 3483) (#("B" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3482) (3481 . 3482) (#(" " 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3481) (3480 . 3481) (#("=" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3480) (3479 . 3480) (#(" " 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3479) (3478 . 3479) (#("d" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3478) (3477 . 3478) (#("i" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3477) (3476 . 3477) (#("_" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3476) (3475 . 3476) (#("r" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3475) (3474 . 3475) (#("e" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3474) (3473 . 3474) (#("y" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3473) (3472 . 3473) (#("a" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3472) (3471 . 3472) (#("l" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3471) (3470 . 3471) (#("p" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3470) (3469 . 3470) (#(" " 0 1 (fontified nil)) . 3469) (3468 . 3469) (#("," 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3468) (3467 . 3468) (#("\"" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3467) (3466 . 3467) (#("t" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3466) (3465 . 3466) (#("s" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3465) (3464 . 3465) (#("e" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3464) (3463 . 3464) (#("i" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3463) (3462 . 3463) (#("r" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3462) (3461 . 3462) (#("P" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3461) (3460 . 3461) (#("\"" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3460) (3459 . 3460) (#(" " 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3459) (3458 . 3459) (#("=" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3458) (3457 . 3458) (#(" " 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3457) (3456 . 3457) (#("e" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3456) (3455 . 3456) (#("m" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3455) (3454 . 3455) (#("a" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3454) (3453 . 3454) (#("n" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3453) (3452 . 3453) (#("_" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3452) (3451 . 3452) (#("s" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3451) (3450 . 3451) (#("s" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3450) (3449 . 3450) (#("a" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3449) (3448 . 3449) (#("l" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3448) (3447 . 3448) (#("c" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3447) (3446 . 3447) (#(" " 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3446) (3445 . 3446) (#("," 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3445) (3444 . 3445) (#("\"" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3444) (3443 . 3444) (#("o" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3443) (undo-tree-id5864 . 1) (undo-tree-id5865 . -1) (3442 . 3443) (#("y" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3442) (undo-tree-id5866 . 1) (3441 . 3442) (#("k" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3441) (undo-tree-id5867 . 1) (3440 . 3441) (#("e" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3440) (undo-tree-id5868 . 1) (3439 . 3440) (#("g" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3439) (undo-tree-id5869 . 1) (3438 . 3439) (#("n" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3438) (undo-tree-id5870 . 1) (3437 . 3438) (#("e" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3437) (undo-tree-id5871 . 1) (3436 . 3437) (#("r" 0 1 (fontified nil face font-lock-string-face)) . 3436) (undo-tree-id5872 . 1) (3435 . 3436) (#("\"" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3435) (3434 . 3435) (#(" " 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3434) (3433 . 3434) (#("=" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3433) (3432 . 3433) (#(" " 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3432) (3431 . 3432) (#("e" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3431) (3430 . 3431) (#("m" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3430) (3429 . 3430) (#("a" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3429) (3428 . 3429) (#("n" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3428) (3427 . 3428) (#("(" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face (rainbow-delimiters-depth-2-face))) . 3427) (3426 . 3427) (#("r" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3426) (3425 . 3426) (#("e" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3425) (3424 . 3425) (#("t" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3424) (3423 . 3424) (#("c" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3423) (3422 . 3423) (#("a" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3422) (3421 . 3422) (#("r" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3421) (3420 . 3421) (#("a" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3420) (3419 . 3420) (#("h" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3419) (3418 . 3419) (#("C" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3418) (3417 . 3418) (#(" " 0 1 (fontified nil)) . 3417) (3416 . 3417) (#("(" 0 1 (rear-nonsticky t fontified nil face (rainbow-delimiters-depth-1-face))) . 3416) (3415 . 3416) (#("d" 0 1 (fontified nil)) . 3415) (3414 . 3415) (#("n" 0 1 (fontified nil)) . 3414) (3413 . 3414) (#("e" 0 1 (fontified nil)) . 3413) (3412 . 3413) (#("p" 0 1 (fontified nil)) . 3412) (3411 . 3412) (#("p" 0 1 (fontified nil)) . 3411) (3410 . 3411) (#("a" 0 1 (fontified nil)) . 3410) (3409 . 3410) (#("." 0 1 (fontified nil)) . 3409) (3408 . 3409) (#("s" 0 1 (fontified nil)) . 3408) (3407 . 3408) (#("n" 0 1 (fontified nil)) . 3407) (3406 . 3407) (#("o" 0 1 (fontified nil)) . 3406) (3405 . 3406) (#("o" 0 1 (fontified nil)) . 3405) (3404 . 3405) (#("t" 0 1 (fontified nil)) . 3404) (3403 . 3404) (#(" " 0 1 (fontified nil)) . 3403) (3402 . 3403) (#(" " 0 1 (fontified nil)) . 3402) (3401 . 3402) (#(" " 0 1 (fontified nil)) . 3401) (3400 . 3401) (#(" " 0 1 (fontified nil)) . 3400) (3399 . 3400) (#("
" 0 1 (rear-nonsticky t fontified nil)) . 3399) (3398 . 3399) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 3398) (3397 . 3398) (#(")" 0 1 (rear-nonsticky t match-data (0 3 0 1 1 2 2 3) fontified nil face (rainbow-delimiters-depth-2-face))) . 3397) (3396 . 3397) (#("d" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3396) (undo-tree-id5873 . -1) (3395 . 3396) (#("i" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3395) (3394 . 3395) (#("." 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3394) (undo-tree-id5874 . -1) (3393 . 3394) (#("N" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3393) (3392 . 3393) (#("O" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3392) (3391 . 3392) (#("T" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3391) (3390 . 3391) (#("L" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3390) (3389 . 3390) (#("A" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3389) (3388 . 3389) (#("B" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3388) (3387 . 3388) (#(" " 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3387) (3386 . 3387) (#("=" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3386) (3385 . 3386) (#(" " 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3385) (3384 . 3385) (#("d" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3384) (3383 . 3384) (#("i" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3383) (3382 . 3383) (#("_" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3382) (3381 . 3382) (#("r" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3381) (3380 . 3381) (#("e" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3380) (3379 . 3380) (#("y" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3379) (3378 . 3379) (#("a" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3378) (3377 . 3378) (#("l" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3377) (3376 . 3377) (#("p" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3376) (3375 . 3376) (#(" " 0 1 (fontified nil)) . 3375) (3374 . 3375) (#("," 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3374) (3373 . 3374) (#("\"" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3373) (3372 . 3373) (#("e" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3372) (3371 . 3372) (#("u" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3371) (3370 . 3371) (#("g" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3370) (3369 . 3370) (#("o" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3369) (3368 . 3369) (#("R" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3368) (3367 . 3368) (#("\"" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3367) (3366 . 3367) (#(" " 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3366) (3365 . 3366) (#("=" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3365) (3364 . 3365) (#(" " 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3364) (3363 . 3364) (#("e" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3363) (3362 . 3363) (#("m" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3362) (3361 . 3362) (#("a" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3361) (3360 . 3361) (#("n" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3360) (3359 . 3360) (#("_" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3359) (3358 . 3359) (#("s" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3358) (3357 . 3358) (#("s" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3357) (3356 . 3357) (#("a" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3356) (3355 . 3356) (#("l" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3355) (3354 . 3355) (#("c" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3354) (3353 . 3354) (#(" " 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3353) (3352 . 3353) (#("," 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3352) (3351 . 3352) (#("\"" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3351) (3350 . 3351) (#("n" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3350) (3349 . 3350) (#("e" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3349) (3348 . 3349) (#("k" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3348) (3347 . 3348) (#("o" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3347) (3346 . 3347) (#("t" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3346) (3345 . 3346) (#("h" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3345) (3344 . 3345) (#("t" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3344) (3343 . 3344) (#("a" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3343) (3342 . 3343) (#("e" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3342) (3341 . 3342) (#("d" 0 1 (fontified nil face font-lock-string-face)) . 3341) (3340 . 3341) (#("\"" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3340) (3339 . 3340) (#(" " 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3339) (3338 . 3339) (#("=" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3338) (3337 . 3338) (#(" " 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3337) (3336 . 3337) (#("e" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3336) (3335 . 3336) (#("m" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3335) (3334 . 3335) (#("a" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3334) (3333 . 3334) (#("n" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3333) (3332 . 3333) (#("(" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face (rainbow-delimiters-depth-2-face))) . 3332) (3331 . 3332) (#("r" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3331) (3330 . 3331) (#("e" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3330) (3329 . 3330) (#("t" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3329) (3328 . 3329) (#("c" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3328) (3327 . 3328) (#("a" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3327) (3326 . 3327) (#("r" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3326) (3325 . 3326) (#("a" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3325) (3324 . 3325) (#("h" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3324) (3323 . 3324) (#("C" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3323) (3322 . 3323) (#("(" 0 1 (rear-nonsticky t fontified nil face (rainbow-delimiters-depth-1-face))) . 3322) (3321 . 3322) (#("d" 0 1 (fontified nil)) . 3321) (3320 . 3321) (#("n" 0 1 (fontified nil)) . 3320) (3319 . 3320) (#("e" 0 1 (fontified nil)) . 3319) (3318 . 3319) (#("p" 0 1 (fontified nil)) . 3318) (3317 . 3318) (#("p" 0 1 (fontified nil)) . 3317) (3316 . 3317) (#("a" 0 1 (fontified nil)) . 3316) (3315 . 3316) (#("." 0 1 (fontified nil)) . 3315) (3314 . 3315) (#("s" 0 1 (fontified nil)) . 3314) (3313 . 3314) (#("n" 0 1 (fontified nil)) . 3313) (3312 . 3313) (#("o" 0 1 (fontified nil)) . 3312) (3311 . 3312) (#("o" 0 1 (fontified nil)) . 3311) (3310 . 3311) (#("t" 0 1 (fontified nil)) . 3310) (3309 . 3310) (#(" " 0 1 (fontified nil)) . 3309) (3308 . 3309) (#(" " 0 1 (fontified nil)) . 3308) (3307 . 3308) (#(" " 0 1 (fontified nil)) . 3307) (3306 . 3307) (#(" " 0 1 (fontified nil)) . 3306) (3305 . 3306) (#("
" 0 1 (fontified nil)) . 3305) (3304 . 3305) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 3304) (3303 . 3304) (#(")" 0 1 (match-data (0 3 0 1 1 2 2 3) rear-nonsticky t fontified nil face (rainbow-delimiters-depth-2-face))) . 3303) (3302 . 3303) (#("d" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3302) (undo-tree-id5875 . -1) (3301 . 3302) (#("i" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3301) (3300 . 3301) (#("." 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3300) (undo-tree-id5876 . -1) (3299 . 3300) (#("N" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3299) (3298 . 3299) (#("O" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3298) (3297 . 3298) (#("T" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3297) (3296 . 3297) (#("L" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3296) (3295 . 3296) (#("A" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3295) (3294 . 3295) (#("B" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3294) (3293 . 3294) (#(" " 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3293) (3292 . 3293) (#("=" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3292) (3291 . 3292) (#(" " 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3291) (3290 . 3291) (#("d" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3290) (3289 . 3290) (#("i" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3289) (3288 . 3289) (#("_" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3288) (3287 . 3288) (#("r" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3287) (3286 . 3287) (#("e" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3286) (3285 . 3286) (#("y" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3285) (3284 . 3285) (#("a" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3284) (3283 . 3284) (#("l" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3283) (3282 . 3283) (#("p" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3282) (3281 . 3282) (#(" " 0 1 (fontified nil)) . 3281) (3280 . 3281) (#("," 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3280) (3279 . 3280) (#("\"" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3279) (3278 . 3279) (#("t" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3278) (3277 . 3278) (#("h" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3277) (3276 . 3277) (#("g" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3276) (3275 . 3276) (#("i" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3275) (3274 . 3275) (#("n" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3274) (3273 . 3274) (#("K" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3273) (3272 . 3273) (#(" " 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3272) (3271 . 3272) (#("h" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3271) (3270 . 3271) (#("t" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3270) (3269 . 3270) (#("a" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3269) (3268 . 3269) (#("e" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3268) (3267 . 3268) (#("D" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3267) (3266 . 3267) (#("\"" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3266) (3265 . 3266) (#(" " 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3265) (3264 . 3265) (#("=" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3264) (3263 . 3264) (#(" " 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3263) (3262 . 3263) (#("e" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3262) (3261 . 3262) (#("m" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3261) (3260 . 3261) (#("a" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3260) (3259 . 3260) (#("n" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3259) (3258 . 3259) (#("_" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3258) (3257 . 3258) (#("s" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3257) (3256 . 3257) (#("s" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3256) (3255 . 3256) (#("a" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3255) (3254 . 3255) (#("l" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3254) (3253 . 3254) (#("c" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3253) (3252 . 3253) (#(" " 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3252) (3251 . 3252) (#("," 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3251) (3250 . 3251) (#("\"" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3250) (3249 . 3250) (#("a" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3249) (undo-tree-id5877 . 1) (undo-tree-id5878 . -1) (3248 . 3249) (#("p" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3248) (undo-tree-id5879 . 1) (3247 . 3248) (#("e" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3247) (undo-tree-id5880 . 1) (3246 . 3247) (#("r" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3246) (undo-tree-id5881 . 1) (3245 . 3246) (#("a" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3245) (undo-tree-id5882 . 1) (3244 . 3245) (#("l" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3244) (undo-tree-id5883 . 1) (3243 . 3244) (#("i" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3243) (undo-tree-id5884 . 1) (3242 . 3243) (#("m" 0 1 (fontified nil face font-lock-string-face)) . 3242) (undo-tree-id5885 . 1) (3241 . 3242) (#("\"" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3241) (3240 . 3241) (#(" " 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3240) (3239 . 3240) (#("=" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3239) (3238 . 3239) (#(" " 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3238) (3237 . 3238) (#("e" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3237) (3236 . 3237) (#("m" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3236) (3235 . 3236) (#("a" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3235) (3234 . 3235) (#("n" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3234) (3233 . 3234) (#("(" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face (rainbow-delimiters-depth-2-face))) . 3233) (3232 . 3233) (#("r" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3232) (3231 . 3232) (#("e" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3231) (3230 . 3231) (#("t" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3230) (3229 . 3230) (#("c" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3229) (3228 . 3229) (#("a" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3228) (3227 . 3228) (#("r" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3227) (3226 . 3227) (#("a" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3226) (3225 . 3226) (#("h" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3225) (3224 . 3225) (#("C" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3224) (3223 . 3224) (#("(" 0 1 (rear-nonsticky t fontified nil face (rainbow-delimiters-depth-1-face))) . 3223) (3222 . 3223) (#("d" 0 1 (fontified nil)) . 3222) (3221 . 3222) (#("n" 0 1 (fontified nil)) . 3221) (3220 . 3221) (#("e" 0 1 (fontified nil)) . 3220) (3219 . 3220) (#("p" 0 1 (fontified nil)) . 3219) (3218 . 3219) (#("p" 0 1 (fontified nil)) . 3218) (3217 . 3218) (#("a" 0 1 (fontified nil)) . 3217) (3216 . 3217) (#("." 0 1 (fontified nil)) . 3216) (3215 . 3216) (#("s" 0 1 (fontified nil)) . 3215) (3214 . 3215) (#("n" 0 1 (fontified nil)) . 3214) (3213 . 3214) (#("o" 0 1 (fontified nil)) . 3213) (3212 . 3213) (#("o" 0 1 (fontified nil)) . 3212) (3211 . 3212) (#("t" 0 1 (fontified nil)) . 3211) (3210 . 3211) (#(" " 0 1 (fontified nil)) . 3210) (3209 . 3210) (#(" " 0 1 (fontified nil)) . 3209) (3208 . 3209) (#(" " 0 1 (fontified nil)) . 3208) (3207 . 3208) (#(" " 0 1 (fontified nil)) . 3207) (3206 . 3207) (#("
" 0 1 (fontified nil)) . 3206) (3205 . 3206) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 3205) (3204 . 3205) (#(")" 0 1 (match-data (0 3 0 1 1 2 2 3) rear-nonsticky t fontified nil face (rainbow-delimiters-depth-2-face))) . 3204) (3203 . 3204) (#("d" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3203) (undo-tree-id5886 . -1) (3202 . 3203) (#("i" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3202) (3201 . 3202) (#("." 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3201) (undo-tree-id5887 . -1) (3200 . 3201) (#("N" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3200) (3199 . 3200) (#("O" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3199) (3198 . 3199) (#("T" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3198) (3197 . 3198) (#("L" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3197) (3196 . 3197) (#("A" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3196) (3195 . 3196) (#("B" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3195) (3194 . 3195) (#(" " 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3194) (3193 . 3194) (#("=" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3193) (3192 . 3193) (#(" " 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3192) (3191 . 3192) (#("d" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3191) (3190 . 3191) (#("i" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3190) (3189 . 3190) (#("_" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3189) (3188 . 3189) (#("r" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3188) (3187 . 3188) (#("e" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3187) (3186 . 3187) (#("y" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3186) (3185 . 3186) (#("a" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3185) (3184 . 3185) (#("l" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3184) (3183 . 3184) (#("p" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3183) (3182 . 3183) (#(" " 0 1 (fontified nil)) . 3182) (3181 . 3182) (#("," 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3181) (3180 . 3181) (#("\"" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3180) (3179 . 3180) (#("n" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3179) (3178 . 3179) (#("a" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3178) (3177 . 3178) (#("m" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3177) (3176 . 3177) (#("a" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3176) (3175 . 3176) (#("h" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3175) (3174 . 3175) (#("S" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3174) (3173 . 3174) (#("\"" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3173) (3172 . 3173) (#(" " 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3172) (3171 . 3172) (#("=" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3171) (3170 . 3171) (#(" " 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3170) (3169 . 3170) (#("e" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3169) (3168 . 3169) (#("m" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3168) (3167 . 3168) (#("a" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3167) (3166 . 3167) (#("n" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3166) (3165 . 3166) (#("_" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3165) (3164 . 3165) (#("s" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3164) (3163 . 3164) (#("s" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3163) (3162 . 3163) (#("a" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3162) (3161 . 3162) (#("l" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3161) (3160 . 3161) (#("c" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3160) (3159 . 3160) (#(" " 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3159) (3158 . 3159) (#("," 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3158) (3157 . 3158) (#("\"" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3157) (3156 . 3157) (#("x" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3156) (undo-tree-id5888 . 1) (undo-tree-id5889 . -1) (undo-tree-id5890 . 1) (undo-tree-id5891 . -1) (3155 . 3156) (#("z" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3155) (undo-tree-id5892 . 1) (undo-tree-id5893 . 1) (3154 . 3155) (#("h" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3154) (undo-tree-id5894 . 1) (undo-tree-id5895 . 1) (3153 . 3154) (#("u" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3153) (undo-tree-id5896 . 1) (undo-tree-id5897 . 1) (3152 . 3153) (#("q" 0 1 (fontified nil face font-lock-string-face)) . 3152) (undo-tree-id5898 . 1) (3151 . 3152) (#("\"" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3151) (3150 . 3151) (#(" " 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3150) (3149 . 3150) (#("=" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3149) (3148 . 3149) (#(" " 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3148) (3147 . 3148) (#("e" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3147) (3146 . 3147) (#("m" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3146) (3145 . 3146) (#("a" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3145) (3144 . 3145) (#("n" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3144) (3143 . 3144) (#("(" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face (rainbow-delimiters-depth-2-face))) . 3143) (3142 . 3143) (#("r" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3142) (3141 . 3142) (#("e" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3141) (3140 . 3141) (#("t" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3140) (3139 . 3140) (#("c" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3139) (3138 . 3139) (#("a" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3138) (3137 . 3138) (#("r" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3137) (3136 . 3137) (#("a" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3136) (3135 . 3136) (#("h" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3135) (3134 . 3135) (#("C" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3134) (3133 . 3134) (#("(" 0 1 (rear-nonsticky t fontified nil face (rainbow-delimiters-depth-1-face))) . 3133) (3132 . 3133) (#("d" 0 1 (fontified nil)) . 3132) (3131 . 3132) (#("n" 0 1 (fontified nil)) . 3131) (3130 . 3131) (#("e" 0 1 (fontified nil)) . 3130) (3129 . 3130) (#("p" 0 1 (fontified nil)) . 3129) (3128 . 3129) (#("p" 0 1 (fontified nil)) . 3128) (3127 . 3128) (#("a" 0 1 (fontified nil)) . 3127) (3126 . 3127) (#("." 0 1 (fontified nil)) . 3126) (3125 . 3126) (#("s" 0 1 (fontified nil)) . 3125) (3124 . 3125) (#("n" 0 1 (fontified nil)) . 3124) (3123 . 3124) (#("o" 0 1 (fontified nil)) . 3123) (3122 . 3123) (#("o" 0 1 (fontified nil)) . 3122) (3121 . 3122) (#("t" 0 1 (fontified nil)) . 3121) (3120 . 3121) (#(" " 0 1 (fontified nil)) . 3120) (3119 . 3120) (#(" " 0 1 (fontified nil)) . 3119) (3118 . 3119) (#(" " 0 1 (fontified nil)) . 3118) (3117 . 3118) (#(" " 0 1 (fontified nil)) . 3117) (3116 . 3117) (#("
" 0 1 (fontified nil)) . 3116) (3115 . 3116) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 3115) (3114 . 3115) (#(")" 0 1 (match-data (0 3 0 1 1 2 2 3) rear-nonsticky t fontified nil face (rainbow-delimiters-depth-2-face))) . 3114) (3113 . 3114) (#("d" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3113) (undo-tree-id5899 . -1) (3112 . 3113) (#("i" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3112) (3111 . 3112) (#("." 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3111) (undo-tree-id5900 . -1) (3110 . 3111) (#("N" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3110) (3109 . 3110) (#("O" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3109) (3108 . 3109) (#("T" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3108) (3107 . 3108) (#("L" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3107) (3106 . 3107) (#("A" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3106) (3105 . 3106) (#("B" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3105) (3104 . 3105) (#(" " 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3104) (3103 . 3104) (#("=" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3103) (3102 . 3103) (#(" " 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3102) (3101 . 3102) (#("d" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3101) (3100 . 3101) (#("i" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3100) (3099 . 3100) (#("_" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3099) (3098 . 3099) (#("r" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3098) (3097 . 3098) (#("e" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3097) (3096 . 3097) (#("y" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3096) (3095 . 3096) (#("a" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3095) (3094 . 3095) (#("l" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3094) (3093 . 3094) (#("p" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3093) (3092 . 3093) (#(" " 0 1 (fontified nil)) . 3092) (3091 . 3092) (#("," 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3091) (3090 . 3091) (#("\"" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3090) (3089 . 3090) (#("r" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3089) (3088 . 3089) (#("e" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3088) (3087 . 3088) (#("t" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3087) (3086 . 3087) (#("n" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3086) (3085 . 3086) (#("u" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3085) (3084 . 3085) (#("H" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3084) (3083 . 3084) (#("\"" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3083) (3082 . 3083) (#(" " 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3082) (3081 . 3082) (#("=" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3081) (3080 . 3081) (#(" " 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3080) (3079 . 3080) (#("e" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3079) (3078 . 3079) (#("m" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3078) (3077 . 3078) (#("a" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3077) (3076 . 3077) (#("n" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3076) (3075 . 3076) (#("_" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3075) (3074 . 3075) (#("s" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3074) (3073 . 3074) (#("s" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3073) (3072 . 3073) (#("a" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3072) (3071 . 3072) (#("l" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3071) (3070 . 3071) (#("c" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3070) (3069 . 3070) (#(" " 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3069) (3068 . 3069) (#("," 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3068) (3067 . 3068) (#("\"" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3067) (3066 . 3067) (#("s" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3066) (3065 . 3066) (#("i" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3065) (3064 . 3065) (#("d" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3064) (3063 . 3064) (#("n" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3063) (3062 . 3063) (#("o" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3062) (3061 . 3062) (#("t" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3061) (3060 . 3061) (#("n" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3060) (3059 . 3060) (#("u" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3059) (3058 . 3059) (#("h" 0 1 (fontified nil face font-lock-string-face)) . 3058) (3057 . 3058) (#("\"" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 3057) (3056 . 3057) (#(" " 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3056) (3055 . 3056) (#("=" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3055) (3054 . 3055) (#(" " 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3054) (3053 . 3054) (#("e" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3053) (3052 . 3053) (#("m" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3052) (3051 . 3052) (#("a" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3051) (3050 . 3051) (#("n" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3050) (3049 . 3050) (#("(" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face (rainbow-delimiters-depth-2-face))) . 3049) (3048 . 3049) (#("r" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3048) (3047 . 3048) (#("e" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3047) (3046 . 3047) (#("t" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3046) (3045 . 3046) (#("c" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3045) (3044 . 3045) (#("a" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3044) (3043 . 3044) (#("r" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3043) (3042 . 3043) (#("a" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3042) (3041 . 3042) (#("h" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3041) (3040 . 3041) (#("C" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3040) (3039 . 3040) (#("(" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 3039) (3038 . 3039) (#("d" 0 1 (fontified nil)) . 3038) (3037 . 3038) (#("n" 0 1 (fontified nil)) . 3037) (3036 . 3037) (#("e" 0 1 (fontified nil)) . 3036) (3035 . 3036) (#("p" 0 1 (fontified nil)) . 3035) (3034 . 3035) (#("p" 0 1 (fontified nil)) . 3034) (3033 . 3034) (#("a" 0 1 (fontified nil)) . 3033) (3032 . 3033) (#("." 0 1 (fontified nil)) . 3032) (3031 . 3032) (#("s" 0 1 (fontified nil)) . 3031) (3030 . 3031) (#("n" 0 1 (fontified nil)) . 3030) (3029 . 3030) (#("o" 0 1 (fontified nil)) . 3029) (3028 . 3029) (#("o" 0 1 (fontified nil)) . 3028) (3027 . 3028) (#("t" 0 1 (fontified nil)) . 3027) (3026 . 3027) (#(" " 0 1 (fontified nil)) . 3026) (3025 . 3026) (#(" " 0 1 (fontified nil)) . 3025) (3024 . 3025) (#(" " 0 1 (fontified nil)) . 3024) (3023 . 3024) (#(" " 0 1 (fontified nil)) . 3023) (3022 . 3023) (#("
" 0 1 (fontified nil)) . 3022) (3021 . 3022) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 3021) (3020 . 3021) (#(")" 0 1 (match-data (0 3 0 1 1 2 2 3) rear-nonsticky t fontified nil face (rainbow-delimiters-depth-2-face))) . 3020) (3019 . 3020) (#("d" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3019) (undo-tree-id5901 . -1) (3018 . 3019) (#("i" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3018) (3017 . 3018) (#("." 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3017) (undo-tree-id5902 . -1) (3016 . 3017) (#("N" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3016) (3015 . 3016) (#("O" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3015) (3014 . 3015) (#("T" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3014) (3013 . 3014) (#("L" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3013) (3012 . 3013) (#("A" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3012) (3011 . 3012) (#("B" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3011) (3010 . 3011) (#(" " 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3010) (3009 . 3010) (#("=" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3009) (3008 . 3009) (#(" " 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3008) (3007 . 3008) (#("d" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3007) (3006 . 3007) (#("i" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3006) (3005 . 3006) (#("_" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3005) (3004 . 3005) (#("r" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3004) (3003 . 3004) (#("e" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3003) (3002 . 3003) (#("y" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3002) (3001 . 3002) (#("a" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3001) (3000 . 3001) (#("l" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 3000) (2999 . 3000) (#("p" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 2999) (2998 . 2999) (#(" " 0 1 (fontified nil)) . 2998) (2997 . 2998) (#("," 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 2997) (2996 . 2997) (#("\"" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 2996) (2995 . 2996) (#("e" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 2995) (2994 . 2995) (#("g" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 2994) (2993 . 2994) (#("a" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 2993) (2992 . 2993) (#("m" 0 1 (fontified nil face font-lock-string-face)) . 2992) (undo-tree-id5903 . -1) (2991 . 2992) (#("\"" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 2991) (undo-tree-id5904 . -1) (undo-tree-id5905 . -1) (2990 . 2991) (#(" " 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 2990) (2989 . 2990) (#("=" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 2989) (2988 . 2989) (#(" " 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 2988) (2987 . 2988) (#("e" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 2987) (2986 . 2987) (#("m" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 2986) (2985 . 2986) (#("a" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 2985) (2984 . 2985) (#("n" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 2984) (2983 . 2984) (#("_" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 2983) (2982 . 2983) (#("s" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 2982) (2981 . 2982) (#("s" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 2981) (2980 . 2981) (#("a" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 2980) (2979 . 2980) (#("l" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 2979) (2978 . 2979) (#("c" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 2978) (2977 . 2978) (#(" " 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 2977) (2976 . 2977) (#("," 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 2976) (2975 . 2976) (#("\"" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 2975) (2974 . 2975) (#("n" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 2974) (undo-tree-id5906 . 1) (undo-tree-id5907 . -1) (undo-tree-id5908 . 1) (undo-tree-id5909 . -1) (2973 . 2974) (#("o" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 2973) (undo-tree-id5910 . 1) (undo-tree-id5911 . 1) (2972 . 2973) (#("t" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 2972) (undo-tree-id5912 . 1) (undo-tree-id5913 . 1) (2971 . 2972) (#("u" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 2971) (undo-tree-id5914 . 1) (undo-tree-id5915 . 1) (2970 . 2971) (#("o" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 2970) (undo-tree-id5916 . 1) (undo-tree-id5917 . 1) (2969 . 2970) (#("b" 0 1 (fontified nil face font-lock-string-face)) . 2969) (undo-tree-id5918 . 1) (2968 . 2969) (#("\"" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 2968) (2967 . 2968) (#(" " 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 2967) (2966 . 2967) (#("=" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 2966) (2965 . 2966) (#(" " 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 2965) (2964 . 2965) (#("e" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 2964) (2963 . 2964) (#("m" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 2963) (2962 . 2963) (#("a" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 2962) (2961 . 2962) (#("n" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 2961) (2960 . 2961) (#("(" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face (rainbow-delimiters-depth-2-face))) . 2960) (2959 . 2960) (#("r" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 2959) (2958 . 2959) (#("e" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 2958) (2957 . 2958) (#("t" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 2957) (2956 . 2957) (#("c" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 2956) (2955 . 2956) (#("a" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 2955) (2954 . 2955) (#("r" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 2954) (2953 . 2954) (#("a" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 2953) (2952 . 2953) (#("h" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 2952) (2951 . 2952) (#("C" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 2951) (2950 . 2951) (#(" " 0 1 (fontified nil)) . 2950) (2949 . 2950) (#("(" 0 1 (rear-nonsticky t fontified nil face (rainbow-delimiters-depth-1-face))) . 2949) (2948 . 2949) (#("d" 0 1 (fontified nil)) . 2948) (2947 . 2948) (#("n" 0 1 (fontified nil)) . 2947) (2946 . 2947) (#("e" 0 1 (fontified nil)) . 2946) (2945 . 2946) (#("p" 0 1 (fontified nil)) . 2945) (2944 . 2945) (#("p" 0 1 (fontified nil)) . 2944) (2943 . 2944) (#("a" 0 1 (fontified nil)) . 2943) (2942 . 2943) (#("." 0 1 (fontified nil)) . 2942) (2941 . 2942) (#("s" 0 1 (fontified nil)) . 2941) (2940 . 2941) (#("n" 0 1 (fontified nil)) . 2940) (2939 . 2940) (#("o" 0 1 (fontified nil)) . 2939) (2938 . 2939) (#("o" 0 1 (fontified nil)) . 2938) (2937 . 2938) (#("t" 0 1 (fontified nil)) . 2937) (2936 . 2937) (#(" " 0 1 (fontified nil)) . 2936) (2935 . 2936) (#(" " 0 1 (fontified nil)) . 2935) (2934 . 2935) (#(" " 0 1 (fontified nil)) . 2934) (2933 . 2934) (#(" " 0 1 (fontified nil)) . 2933) (2932 . 2933) (#("
" 0 1 (fontified nil)) . 2932) (2931 . 2932) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 2931) (2930 . 2931) (#(")" 0 1 (match-data (0 3 0 1 1 2 2 3) rear-nonsticky t fontified nil face (rainbow-delimiters-depth-2-face))) . 2930) (2929 . 2930) (#("d" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 2929) (undo-tree-id5919 . -1) (2928 . 2929) (#("i" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 2928) (2927 . 2928) (#("." 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 2927) (undo-tree-id5920 . -1) (2926 . 2927) (#("N" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 2926) (2925 . 2926) (#("O" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 2925) (2924 . 2925) (#("T" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 2924) (2923 . 2924) (#("L" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 2923) (2922 . 2923) (#("A" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 2922) (2921 . 2922) (#("B" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 2921) (2920 . 2921) (#(" " 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 2920) (2919 . 2920) (#("=" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 2919) (2918 . 2919) (#(" " 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 2918) (2917 . 2918) (#("d" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 2917) (2916 . 2917) (#("i" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 2916) (2915 . 2916) (#("_" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 2915) (2914 . 2915) (#("r" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 2914) (2913 . 2914) (#("e" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 2913) (2912 . 2913) (#("y" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 2912) (2911 . 2912) (#("a" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 2911) (2910 . 2911) (#("l" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 2910) (2909 . 2910) (#("p" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 2909) (2908 . 2909) (#(" " 0 1 (fontified nil)) . 2908) (2907 . 2908) (#("," 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 2907) (2906 . 2907) (#("\"" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 2906) (2905 . 2906) (#("n" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 2905) (2904 . 2905) (#("i" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 2904) (2903 . 2904) (#("d" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 2903) (2902 . 2903) (#("a" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 2902) (2901 . 2902) (#("l" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 2901) (2900 . 2901) (#("a" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil face font-lock-string-face)) . 2900) (2899 . 2900) (#("p" 0 1 (fontified nil face font-lock-string-face)) . 2899) (2898 . 2899) (#("\"" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-string-face)) . 2898) 3494) nil (25919 61929 468166 14000) 0 nil])
([nil nil ((3471 . 3472) (#("L" 0 1 (fontified nil)) . 3471) (undo-tree-id5677 . -1) (undo-tree-id5678 . -1) (undo-tree-id5679 . -1) (3470 . 3471) (#("P" 0 1 (fontified nil)) . 3470) (undo-tree-id5680 . -1) (undo-tree-id5681 . -1) (undo-tree-id5682 . -1) (undo-tree-id5683 . -1) (undo-tree-id5684 . -1) (undo-tree-id5685 . -1) (undo-tree-id5686 . -1) (undo-tree-id5687 . -1) (undo-tree-id5688 . -1) (undo-tree-id5689 . -1) (undo-tree-id5690 . -1) (undo-tree-id5691 . -1) (3469 . 3470) (#(" " 0 1 (fontified nil)) . 3469) (undo-tree-id5692 . -1) (3468 . 3469) (#("," 0 1 (fontified nil)) . 3468) (3467 . 3468) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 3467) (3466 . 3467) (#("T" 0 1 (fontified nil face font-lock-string-face)) . 3466) (undo-tree-id5693 . 1) (undo-tree-id5694 . -1) (3465 . 3466) (#("S" 0 1 (fontified nil face font-lock-string-face)) . 3465) (undo-tree-id5695 . 1) (3464 . 3465) (#("E" 0 1 (fontified nil face font-lock-string-face)) . 3464) (undo-tree-id5696 . 1) (3463 . 3464) (#("I" 0 1 (fontified nil face font-lock-string-face)) . 3463) (undo-tree-id5697 . 1) (3462 . 3463) (#("R" 0 1 (fontified nil face font-lock-string-face)) . 3462) (undo-tree-id5698 . 1) (3461 . 3462) (#("p" 0 1 (fontified nil face font-lock-string-face)) . 3461) (undo-tree-id5699 . 1) (3460 . 3461) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 3460) (3459 . 3460) (#(" " 0 1 (fontified nil)) . 3459) (3458 . 3459) (#("=" 0 1 (fontified nil)) . 3458) (3457 . 3458) (#(" " 0 1 (fontified nil)) . 3457) (3456 . 3457) (#("E" 0 1 (fontified nil)) . 3456) (3455 . 3456) (#("M" 0 1 (fontified nil)) . 3455) (3454 . 3455) (#("A" 0 1 (fontified nil)) . 3454) (3453 . 3454) (#("N" 0 1 (fontified nil)) . 3453) (3452 . 3453) (#("_" 0 1 (fontified nil)) . 3452) (3451 . 3452) (#("S" 0 1 (fontified nil)) . 3451) (3450 . 3451) (#("S" 0 1 (fontified nil)) . 3450) (3449 . 3450) (#("A" 0 1 (fontified nil)) . 3449) (3448 . 3449) (#("L" 0 1 (fontified nil)) . 3448) (3447 . 3448) (#("C" 0 1 (fontified nil)) . 3447) (3446 . 3447) (#(" " 0 1 (fontified nil)) . 3446) (3445 . 3446) (#("," 0 1 (fontified nil)) . 3445) (3444 . 3445) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 3444) (3443 . 3444) (#("O" 0 1 (fontified nil face font-lock-string-face)) . 3443) (undo-tree-id5700 . 1) (undo-tree-id5701 . -1) (3442 . 3443) (#("Y" 0 1 (fontified nil face font-lock-string-face)) . 3442) (undo-tree-id5702 . 1) (3441 . 3442) (#("K" 0 1 (fontified nil face font-lock-string-face)) . 3441) (undo-tree-id5703 . 1) (3440 . 3441) (#("E" 0 1 (fontified nil face font-lock-string-face)) . 3440) (undo-tree-id5704 . 1) (3439 . 3440) (#("G" 0 1 (fontified nil face font-lock-string-face)) . 3439) (undo-tree-id5705 . 1) (3438 . 3439) (#("N" 0 1 (fontified nil face font-lock-string-face)) . 3438) (undo-tree-id5706 . 1) (3437 . 3438) (#("E" 0 1 (fontified nil face font-lock-string-face)) . 3437) (undo-tree-id5707 . 1) (3436 . 3437) (#("R" 0 1 (fontified nil face font-lock-string-face)) . 3436) (undo-tree-id5708 . 1) (3435 . 3436) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 3435) (3434 . 3435) (#(" " 0 1 (fontified nil)) . 3434) (3433 . 3434) (#("=" 0 1 (fontified nil)) . 3433) (3432 . 3433) (#(" " 0 1 (fontified nil)) . 3432) (3431 . 3432) (#("E" 0 1 (fontified nil)) . 3431) (3430 . 3431) (#("M" 0 1 (fontified nil)) . 3430) (3429 . 3430) (#("A" 0 1 (fontified nil)) . 3429) (3428 . 3429) (#("N" 0 1 (fontified nil)) . 3428) (3427 . 3428) (#("(" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . 3427) (3426 . 3427) (#("R" 0 1 (fontified nil)) . 3426) (undo-tree-id5709 . -1) (3425 . 3426) (#("E" 0 1 (fontified nil)) . 3425) (3424 . 3425) (#("T" 0 1 (fontified nil)) . 3424) (3423 . 3424) (#("C" 0 1 (fontified nil)) . 3423) (3422 . 3423) (#("A" 0 1 (fontified nil)) . 3422) (3421 . 3422) (#("R" 0 1 (fontified nil)) . 3421) (3420 . 3421) (#("A" 0 1 (fontified nil)) . 3420) (3419 . 3420) (#("H" 0 1 (fontified nil)) . 3419) (3418 . 3419) (#("c" 0 1 (fontified nil)) . 3418) (3417 . 3418) (#(" " 0 1 (fontified nil)) . 3417) (undo-tree-id5710 . -1) (3416 . 3417) (#("(" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 3416) (3415 . 3416) (#("D" 0 1 (fontified nil)) . 3415) (3414 . 3415) (#("N" 0 1 (fontified nil)) . 3414) (3413 . 3414) (#("E" 0 1 (fontified nil)) . 3413) (3412 . 3413) (#("P" 0 1 (fontified nil)) . 3412) (3411 . 3412) (#("P" 0 1 (fontified nil)) . 3411) (3410 . 3411) (#("A" 0 1 (fontified nil)) . 3410) (3409 . 3410) (#("." 0 1 (fontified nil)) . 3409) (3408 . 3409) (#("S" 0 1 (fontified nil)) . 3408) (undo-tree-id5711 . -1) (3407 . 3408) (#("N" 0 1 (fontified nil)) . 3407) (3406 . 3407) (#("O" 0 1 (fontified nil)) . 3406) (3405 . 3406) (#("O" 0 1 (fontified nil)) . 3405) (3404 . 3405) (#("T" 0 1 (fontified nil)) . 3404) (3403 . 3404) (#(" " 0 1 (fontified nil)) . 3403) (undo-tree-id5712 . -1) (3402 . 3403) (#(" " 0 1 (fontified nil)) . 3402) (3401 . 3402) (#(" " 0 1 (fontified nil)) . 3401) (3400 . 3401) (#(" " 0 1 (fontified nil)) . 3400) (3399 . 3400) (#("
" 0 1 (fontified nil)) . 3399) (undo-tree-id5713 . -1) (3398 . 3399) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 3398) (3397 . 3398) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . 3397) (3396 . 3397) (#("D" 0 1 (fontified nil)) . 3396) (undo-tree-id5714 . -1) (3395 . 3396) (#("I" 0 1 (fontified nil)) . 3395) (3394 . 3395) (#("." 0 1 (fontified nil)) . 3394) (undo-tree-id5715 . -1) (3393 . 3394) (#("n" 0 1 (fontified nil)) . 3393) (undo-tree-id5716 . -1) (3392 . 3393) (#("o" 0 1 (fontified nil)) . 3392) (3391 . 3392) (#("t" 0 1 (fontified nil)) . 3391) (3390 . 3391) (#("l" 0 1 (fontified nil)) . 3390) (3389 . 3390) (#("a" 0 1 (fontified nil)) . 3389) (3388 . 3389) (#("b" 0 1 (fontified nil)) . 3388) (3387 . 3388) (#(" " 0 1 (fontified nil)) . 3387) (undo-tree-id5717 . -1) (3386 . 3387) (#("=" 0 1 (fontified nil)) . 3386) (3385 . 3386) (#(" " 0 1 (fontified nil)) . 3385) (3384 . 3385) (#("D" 0 1 (fontified nil)) . 3384) (3383 . 3384) (#("I" 0 1 (fontified nil)) . 3383) (3382 . 3383) (#("_" 0 1 (fontified nil)) . 3382) (3381 . 3382) (#("R" 0 1 (fontified nil)) . 3381) (3380 . 3381) (#("E" 0 1 (fontified nil)) . 3380) (3379 . 3380) (#("Y" 0 1 (fontified nil)) . 3379) (3378 . 3379) (#("A" 0 1 (fontified nil)) . 3378) (3377 . 3378) (#("L" 0 1 (fontified nil)) . 3377) (3376 . 3377) (#("P" 0 1 (fontified nil)) . 3376) (3375 . 3376) (#(" " 0 1 (fontified nil)) . 3375) (3374 . 3375) (#("," 0 1 (fontified nil)) . 3374) (undo-tree-id5718 . -1) (3373 . 3374) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 3373) (3372 . 3373) (#("E" 0 1 (fontified nil face font-lock-string-face)) . 3372) (undo-tree-id5719 . 1) (undo-tree-id5720 . -1) (undo-tree-id5721 . -1) (3371 . 3372) (#("U" 0 1 (fontified nil face font-lock-string-face)) . 3371) (undo-tree-id5722 . 1) (3370 . 3371) (#("G" 0 1 (fontified nil face font-lock-string-face)) . 3370) (undo-tree-id5723 . 1) (3369 . 3370) (#("O" 0 1 (fontified nil face font-lock-string-face)) . 3369) (undo-tree-id5724 . 1) (3368 . 3369) (#("r" 0 1 (fontified nil face font-lock-string-face)) . 3368) (undo-tree-id5725 . 1) (3367 . 3368) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 3367) (3366 . 3367) (#(" " 0 1 (fontified nil)) . 3366) (3365 . 3366) (#("=" 0 1 (fontified nil)) . 3365) (3364 . 3365) (#(" " 0 1 (fontified nil)) . 3364) (3363 . 3364) (#("E" 0 1 (fontified nil)) . 3363) (3362 . 3363) (#("M" 0 1 (fontified nil)) . 3362) (3361 . 3362) (#("A" 0 1 (fontified nil)) . 3361) (3360 . 3361) (#("N" 0 1 (fontified nil)) . 3360) (3359 . 3360) (#("_" 0 1 (fontified nil)) . 3359) (3358 . 3359) (#("S" 0 1 (fontified nil)) . 3358) (3357 . 3358) (#("S" 0 1 (fontified nil)) . 3357) (3356 . 3357) (#("A" 0 1 (fontified nil)) . 3356) (3355 . 3356) (#("L" 0 1 (fontified nil)) . 3355) (3354 . 3355) (#("C" 0 1 (fontified nil)) . 3354) (3353 . 3354) (#(" " 0 1 (fontified nil)) . 3353) (3352 . 3353) (#("," 0 1 (fontified nil)) . 3352) (3351 . 3352) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 3351) (3350 . 3351) (#("N" 0 1 (fontified nil face font-lock-string-face)) . 3350) (undo-tree-id5726 . 1) (undo-tree-id5727 . -1) (3349 . 3350) (#("E" 0 1 (fontified nil face font-lock-string-face)) . 3349) (undo-tree-id5728 . 1) (3348 . 3349) (#("K" 0 1 (fontified nil face font-lock-string-face)) . 3348) (undo-tree-id5729 . 1) (3347 . 3348) (#("O" 0 1 (fontified nil face font-lock-string-face)) . 3347) (undo-tree-id5730 . 1) (3346 . 3347) (#("T" 0 1 (fontified nil face font-lock-string-face)) . 3346) (undo-tree-id5731 . 1) (3345 . 3346) (#("H" 0 1 (fontified nil face font-lock-string-face)) . 3345) (undo-tree-id5732 . 1) (3344 . 3345) (#("T" 0 1 (fontified nil face font-lock-string-face)) . 3344) (undo-tree-id5733 . 1) (3343 . 3344) (#("A" 0 1 (fontified nil face font-lock-string-face)) . 3343) (undo-tree-id5734 . 1) (3342 . 3343) (#("E" 0 1 (fontified nil face font-lock-string-face)) . 3342) (undo-tree-id5735 . 1) (3341 . 3342) (#("D" 0 1 (fontified nil face font-lock-string-face)) . 3341) (undo-tree-id5736 . 1) (3340 . 3341) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 3340) (3339 . 3340) (#(" " 0 1 (fontified nil)) . 3339) (3338 . 3339) (#("=" 0 1 (fontified nil)) . 3338) (3337 . 3338) (#(" " 0 1 (fontified nil)) . 3337) (3336 . 3337) (#("E" 0 1 (fontified nil)) . 3336) (3335 . 3336) (#("M" 0 1 (fontified nil)) . 3335) (3334 . 3335) (#("A" 0 1 (fontified nil)) . 3334) (3333 . 3334) (#("N" 0 1 (fontified nil)) . 3333) (3332 . 3333) (#("(" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . 3332) (3331 . 3332) (#("R" 0 1 (fontified nil)) . 3331) (undo-tree-id5737 . -1) (3330 . 3331) (#("E" 0 1 (fontified nil)) . 3330) (3329 . 3330) (#("T" 0 1 (fontified nil)) . 3329) (3328 . 3329) (#("C" 0 1 (fontified nil)) . 3328) (3327 . 3328) (#("A" 0 1 (fontified nil)) . 3327) (3326 . 3327) (#("R" 0 1 (fontified nil)) . 3326) (3325 . 3326) (#("A" 0 1 (fontified nil)) . 3325) (3324 . 3325) (#("H" 0 1 (fontified nil)) . 3324) (3323 . 3324) (#("c" 0 1 (fontified nil)) . 3323) (3322 . 3323) (#("(" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 3322) (undo-tree-id5738 . -1) (3321 . 3322) (#("D" 0 1 (fontified nil)) . 3321) (3320 . 3321) (#("N" 0 1 (fontified nil)) . 3320) (3319 . 3320) (#("E" 0 1 (fontified nil)) . 3319) (3318 . 3319) (#("P" 0 1 (fontified nil)) . 3318) (3317 . 3318) (#("P" 0 1 (fontified nil)) . 3317) (3316 . 3317) (#("A" 0 1 (fontified nil)) . 3316) (3315 . 3316) (#("." 0 1 (fontified nil)) . 3315) (3314 . 3315) (#("S" 0 1 (fontified nil)) . 3314) (undo-tree-id5739 . -1) (3313 . 3314) (#("N" 0 1 (fontified nil)) . 3313) (3312 . 3313) (#("O" 0 1 (fontified nil)) . 3312) (3311 . 3312) (#("O" 0 1 (fontified nil)) . 3311) (3310 . 3311) (#("T" 0 1 (fontified nil)) . 3310) (3309 . 3310) (#(" " 0 1 (fontified nil)) . 3309) (undo-tree-id5740 . -1) (3308 . 3309) (#(" " 0 1 (fontified nil)) . 3308) (3307 . 3308) (#(" " 0 1 (fontified nil)) . 3307) (3306 . 3307) (#(" " 0 1 (fontified nil)) . 3306) (3305 . 3306) (#("
" 0 1 (fontified nil)) . 3305) (3304 . 3305) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 3304) (3303 . 3304) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . 3303) (3302 . 3303) (#("D" 0 1 (fontified nil)) . 3302) (undo-tree-id5741 . -1) (3301 . 3302) (#("I" 0 1 (fontified nil)) . 3301) (3300 . 3301) (#("." 0 1 (fontified nil)) . 3300) (undo-tree-id5742 . -1) (3299 . 3300) (#("n" 0 1 (fontified nil)) . 3299) (undo-tree-id5743 . -1) (3298 . 3299) (#("o" 0 1 (fontified nil)) . 3298) (3297 . 3298) (#("t" 0 1 (fontified nil)) . 3297) (3296 . 3297) (#("l" 0 1 (fontified nil)) . 3296) (3295 . 3296) (#("a" 0 1 (fontified nil)) . 3295) (3294 . 3295) (#("b" 0 1 (fontified nil)) . 3294) (3293 . 3294) (#(" " 0 1 (fontified nil)) . 3293) (undo-tree-id5744 . -1) (3292 . 3293) (#("=" 0 1 (fontified nil)) . 3292) (3291 . 3292) (#(" " 0 1 (fontified nil)) . 3291) (3290 . 3291) (#("D" 0 1 (fontified nil)) . 3290) (3289 . 3290) (#("I" 0 1 (fontified nil)) . 3289) (3288 . 3289) (#("_" 0 1 (fontified nil)) . 3288) (3287 . 3288) (#("R" 0 1 (fontified nil)) . 3287) (3286 . 3287) (#("E" 0 1 (fontified nil)) . 3286) (3285 . 3286) (#("Y" 0 1 (fontified nil)) . 3285) (3284 . 3285) (#("A" 0 1 (fontified nil)) . 3284) (3283 . 3284) (#("L" 0 1 (fontified nil)) . 3283) (3282 . 3283) (#("P" 0 1 (fontified nil)) . 3282) (3281 . 3282) (#(" " 0 1 (fontified nil)) . 3281) (3280 . 3281) (#("," 0 1 (fontified nil)) . 3280) (3279 . 3280) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 3279) (3278 . 3279) (#("T" 0 1 (fontified nil face font-lock-string-face)) . 3278) (undo-tree-id5745 . 1) (undo-tree-id5746 . -1) (3277 . 3278) (#("H" 0 1 (fontified nil face font-lock-string-face)) . 3277) (undo-tree-id5747 . 1) (3276 . 3277) (#("G" 0 1 (fontified nil face font-lock-string-face)) . 3276) (undo-tree-id5748 . 1) (3275 . 3276) (#("I" 0 1 (fontified nil face font-lock-string-face)) . 3275) (undo-tree-id5749 . 1) (3274 . 3275) (#("N" 0 1 (fontified nil face font-lock-string-face)) . 3274) (undo-tree-id5750 . 1) (3273 . 3274) (#("k" 0 1 (fontified nil face font-lock-string-face)) . 3273) (undo-tree-id5751 . 1) (3272 . 3273) (#(" " 0 1 (fontified nil face font-lock-string-face)) . 3272) (3271 . 3272) (#("H" 0 1 (fontified nil face font-lock-string-face)) . 3271) (undo-tree-id5752 . 1) (undo-tree-id5753 . -1) (undo-tree-id5754 . -1) (3270 . 3271) (#("T" 0 1 (fontified nil face font-lock-string-face)) . 3270) (undo-tree-id5755 . 1) (3269 . 3270) (#("A" 0 1 (fontified nil face font-lock-string-face)) . 3269) (undo-tree-id5756 . 1) (3268 . 3269) (#("E" 0 1 (fontified nil face font-lock-string-face)) . 3268) (undo-tree-id5757 . 1) (undo-tree-id5758 . -1) (3267 . 3268) (#("d" 0 1 (fontified nil face font-lock-string-face)) . 3267) (undo-tree-id5759 . 1) (3266 . 3267) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 3266) (3265 . 3266) (#(" " 0 1 (fontified nil)) . 3265) (3264 . 3265) (#("=" 0 1 (fontified nil)) . 3264) (3263 . 3264) (#(" " 0 1 (fontified nil)) . 3263) (3262 . 3263) (#("E" 0 1 (fontified nil)) . 3262) (3261 . 3262) (#("M" 0 1 (fontified nil)) . 3261) (3260 . 3261) (#("A" 0 1 (fontified nil)) . 3260) (3259 . 3260) (#("N" 0 1 (fontified nil)) . 3259) (3258 . 3259) (#("_" 0 1 (fontified nil)) . 3258) (3257 . 3258) (#("S" 0 1 (fontified nil)) . 3257) (3256 . 3257) (#("S" 0 1 (fontified nil)) . 3256) (3255 . 3256) (#("A" 0 1 (fontified nil)) . 3255) (3254 . 3255) (#("L" 0 1 (fontified nil)) . 3254) (3253 . 3254) (#("C" 0 1 (fontified nil)) . 3253) (3252 . 3253) (#(" " 0 1 (fontified nil)) . 3252) (3251 . 3252) (#("," 0 1 (fontified nil)) . 3251) (3250 . 3251) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 3250) (3249 . 3250) (#("A" 0 1 (fontified nil face font-lock-string-face)) . 3249) (undo-tree-id5760 . 1) (undo-tree-id5761 . -1) (3248 . 3249) (#("P" 0 1 (fontified nil face font-lock-string-face)) . 3248) (undo-tree-id5762 . 1) (3247 . 3248) (#("E" 0 1 (fontified nil face font-lock-string-face)) . 3247) (undo-tree-id5763 . 1) (3246 . 3247) (#("R" 0 1 (fontified nil face font-lock-string-face)) . 3246) (undo-tree-id5764 . 1) (3245 . 3246) (#("A" 0 1 (fontified nil face font-lock-string-face)) . 3245) (undo-tree-id5765 . 1) (3244 . 3245) (#("L" 0 1 (fontified nil face font-lock-string-face)) . 3244) (undo-tree-id5766 . 1) (3243 . 3244) (#("I" 0 1 (fontified nil face font-lock-string-face)) . 3243) (undo-tree-id5767 . 1) (3242 . 3243) (#("M" 0 1 (fontified nil face font-lock-string-face)) . 3242) (undo-tree-id5768 . 1) (3241 . 3242) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 3241) (3240 . 3241) (#(" " 0 1 (fontified nil)) . 3240) (3239 . 3240) (#("=" 0 1 (fontified nil)) . 3239) (3238 . 3239) (#(" " 0 1 (fontified nil)) . 3238) (3237 . 3238) (#("E" 0 1 (fontified nil)) . 3237) (3236 . 3237) (#("M" 0 1 (fontified nil)) . 3236) (3235 . 3236) (#("A" 0 1 (fontified nil)) . 3235) (3234 . 3235) (#("N" 0 1 (fontified nil)) . 3234) (3233 . 3234) (#("(" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . 3233) (3232 . 3233) (#("R" 0 1 (fontified nil)) . 3232) (undo-tree-id5769 . -1) (3231 . 3232) (#("E" 0 1 (fontified nil)) . 3231) (3230 . 3231) (#("T" 0 1 (fontified nil)) . 3230) (3229 . 3230) (#("C" 0 1 (fontified nil)) . 3229) (3228 . 3229) (#("A" 0 1 (fontified nil)) . 3228) (3227 . 3228) (#("R" 0 1 (fontified nil)) . 3227) (3226 . 3227) (#("A" 0 1 (fontified nil)) . 3226) (3225 . 3226) (#("H" 0 1 (fontified nil)) . 3225) (3224 . 3225) (#("c" 0 1 (fontified nil)) . 3224) (3223 . 3224) (#("(" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 3223) (undo-tree-id5770 . -1) (3222 . 3223) (#("D" 0 1 (fontified nil)) . 3222) (3221 . 3222) (#("N" 0 1 (fontified nil)) . 3221) (3220 . 3221) (#("E" 0 1 (fontified nil)) . 3220) (3219 . 3220) (#("P" 0 1 (fontified nil)) . 3219) (3218 . 3219) (#("P" 0 1 (fontified nil)) . 3218) (3217 . 3218) (#("A" 0 1 (fontified nil)) . 3217) (3216 . 3217) (#("." 0 1 (fontified nil)) . 3216) (3215 . 3216) (#("S" 0 1 (fontified nil)) . 3215) (undo-tree-id5771 . -1) (3214 . 3215) (#("N" 0 1 (fontified nil)) . 3214) (3213 . 3214) (#("O" 0 1 (fontified nil)) . 3213) (3212 . 3213) (#("O" 0 1 (fontified nil)) . 3212) (3211 . 3212) (#("T" 0 1 (fontified nil)) . 3211) (3210 . 3211) (#(" " 0 1 (fontified nil)) . 3210) (undo-tree-id5772 . -1) (3209 . 3210) (#(" " 0 1 (fontified nil)) . 3209) (3208 . 3209) (#(" " 0 1 (fontified nil)) . 3208) (3207 . 3208) (#(" " 0 1 (fontified nil)) . 3207) (3206 . 3207) (#("
" 0 1 (fontified nil)) . 3206) (3205 . 3206) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 3205) (3204 . 3205) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . 3204) (3203 . 3204) (#("D" 0 1 (fontified nil)) . 3203) (undo-tree-id5773 . -1) (3202 . 3203) (#("I" 0 1 (fontified nil)) . 3202) (3201 . 3202) (#("." 0 1 (fontified nil)) . 3201) (undo-tree-id5774 . -1) (3200 . 3201) (#("n" 0 1 (fontified nil)) . 3200) (undo-tree-id5775 . -1) (3199 . 3200) (#("o" 0 1 (fontified nil)) . 3199) (3198 . 3199) (#("t" 0 1 (fontified nil)) . 3198) (3197 . 3198) (#("l" 0 1 (fontified nil)) . 3197) (3196 . 3197) (#("a" 0 1 (fontified nil)) . 3196) (3195 . 3196) (#("b" 0 1 (fontified nil)) . 3195) (3194 . 3195) (#(" " 0 1 (fontified nil)) . 3194) (undo-tree-id5776 . -1) (3193 . 3194) (#("=" 0 1 (fontified nil)) . 3193) (3192 . 3193) (#(" " 0 1 (fontified nil)) . 3192) (3191 . 3192) (#("D" 0 1 (fontified nil)) . 3191) (3190 . 3191) (#("I" 0 1 (fontified nil)) . 3190) (3189 . 3190) (#("_" 0 1 (fontified nil)) . 3189) (3188 . 3189) (#("R" 0 1 (fontified nil)) . 3188) (3187 . 3188) (#("E" 0 1 (fontified nil)) . 3187) (3186 . 3187) (#("Y" 0 1 (fontified nil)) . 3186) (3185 . 3186) (#("A" 0 1 (fontified nil)) . 3185) (3184 . 3185) (#("L" 0 1 (fontified nil)) . 3184) (3183 . 3184) (#("P" 0 1 (fontified nil)) . 3183) (3182 . 3183) (#(" " 0 1 (fontified nil)) . 3182) (3181 . 3182) (#("," 0 1 (fontified nil)) . 3181) (3180 . 3181) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 3180) (3179 . 3180) (#("N" 0 1 (fontified nil face font-lock-string-face)) . 3179) (undo-tree-id5777 . 1) (undo-tree-id5778 . -1) (3178 . 3179) (#("A" 0 1 (fontified nil face font-lock-string-face)) . 3178) (undo-tree-id5779 . 1) (3177 . 3178) (#("M" 0 1 (fontified nil face font-lock-string-face)) . 3177) (undo-tree-id5780 . 1) (3176 . 3177) (#("A" 0 1 (fontified nil face font-lock-string-face)) . 3176) (undo-tree-id5781 . 1) (3175 . 3176) (#("H" 0 1 (fontified nil face font-lock-string-face)) . 3175) (undo-tree-id5782 . 1) (3174 . 3175) (#("s" 0 1 (fontified nil face font-lock-string-face)) . 3174) (undo-tree-id5783 . 1) (undo-tree-id5784 . -1) (3173 . 3174) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 3173) (3172 . 3173) (#(" " 0 1 (fontified nil)) . 3172) (3171 . 3172) (#("=" 0 1 (fontified nil)) . 3171) (3170 . 3171) (#(" " 0 1 (fontified nil)) . 3170) (3169 . 3170) (#("E" 0 1 (fontified nil)) . 3169) (3168 . 3169) (#("M" 0 1 (fontified nil)) . 3168) (3167 . 3168) (#("A" 0 1 (fontified nil)) . 3167) (3166 . 3167) (#("N" 0 1 (fontified nil)) . 3166) (3165 . 3166) (#("_" 0 1 (fontified nil)) . 3165) (3164 . 3165) (#("S" 0 1 (fontified nil)) . 3164) (3163 . 3164) (#("S" 0 1 (fontified nil)) . 3163) (3162 . 3163) (#("A" 0 1 (fontified nil)) . 3162) (3161 . 3162) (#("L" 0 1 (fontified nil)) . 3161) (3160 . 3161) (#("C" 0 1 (fontified nil)) . 3160) (3159 . 3160) (#(" " 0 1 (fontified nil)) . 3159) (3158 . 3159) (#("," 0 1 (fontified nil)) . 3158) (3157 . 3158) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 3157) (3156 . 3157) (#("X" 0 1 (fontified nil face font-lock-string-face)) . 3156) (undo-tree-id5785 . 1) (undo-tree-id5786 . -1) (3155 . 3156) (#("Z" 0 1 (fontified nil face font-lock-string-face)) . 3155) (undo-tree-id5787 . 1) (3154 . 3155) (#("H" 0 1 (fontified nil face font-lock-string-face)) . 3154) (undo-tree-id5788 . 1) (3153 . 3154) (#("U" 0 1 (fontified nil face font-lock-string-face)) . 3153) (undo-tree-id5789 . 1) (3152 . 3153) (#("Q" 0 1 (fontified nil face font-lock-string-face)) . 3152) (undo-tree-id5790 . 1) (3151 . 3152) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 3151) (3150 . 3151) (#(" " 0 1 (fontified nil)) . 3150) (3149 . 3150) (#("=" 0 1 (fontified nil)) . 3149) (3148 . 3149) (#(" " 0 1 (fontified nil)) . 3148) (3147 . 3148) (#("E" 0 1 (fontified nil)) . 3147) (3146 . 3147) (#("M" 0 1 (fontified nil)) . 3146) (3145 . 3146) (#("A" 0 1 (fontified nil)) . 3145) (3144 . 3145) (#("N" 0 1 (fontified nil)) . 3144) (3143 . 3144) (#("(" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . 3143) (3142 . 3143) (#("R" 0 1 (fontified nil)) . 3142) (undo-tree-id5791 . -1) (3141 . 3142) (#("E" 0 1 (fontified nil)) . 3141) (3140 . 3141) (#("T" 0 1 (fontified nil)) . 3140) (3139 . 3140) (#("C" 0 1 (fontified nil)) . 3139) (3138 . 3139) (#("A" 0 1 (fontified nil)) . 3138) (3137 . 3138) (#("R" 0 1 (fontified nil)) . 3137) (3136 . 3137) (#("A" 0 1 (fontified nil)) . 3136) (3135 . 3136) (#("H" 0 1 (fontified nil)) . 3135) (3134 . 3135) (#("c" 0 1 (fontified nil)) . 3134) (3133 . 3134) (#("(" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 3133) (undo-tree-id5792 . -1) (3132 . 3133) (#("D" 0 1 (fontified nil)) . 3132) (3131 . 3132) (#("N" 0 1 (fontified nil)) . 3131) (3130 . 3131) (#("E" 0 1 (fontified nil)) . 3130) (3129 . 3130) (#("P" 0 1 (fontified nil)) . 3129) (3128 . 3129) (#("P" 0 1 (fontified nil)) . 3128) (3127 . 3128) (#("A" 0 1 (fontified nil)) . 3127) (3126 . 3127) (#("." 0 1 (fontified nil)) . 3126) (3125 . 3126) (#("S" 0 1 (fontified nil)) . 3125) (undo-tree-id5793 . -1) (3124 . 3125) (#("N" 0 1 (fontified nil)) . 3124) (3123 . 3124) (#("O" 0 1 (fontified nil)) . 3123) (3122 . 3123) (#("O" 0 1 (fontified nil)) . 3122) (3121 . 3122) (#("T" 0 1 (fontified nil)) . 3121) (3120 . 3121) (#(" " 0 1 (fontified nil)) . 3120) (undo-tree-id5794 . -1) (3119 . 3120) (#(" " 0 1 (fontified nil)) . 3119) (3118 . 3119) (#(" " 0 1 (fontified nil)) . 3118) (3117 . 3118) (#(" " 0 1 (fontified nil)) . 3117) (3116 . 3117) (#("
" 0 1 (fontified nil)) . 3116) (3115 . 3116) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 3115) (3114 . 3115) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . 3114) (3113 . 3114) (#("D" 0 1 (fontified nil)) . 3113) (undo-tree-id5795 . -1) (3112 . 3113) (#("I" 0 1 (fontified nil)) . 3112) (3111 . 3112) (#("." 0 1 (fontified nil)) . 3111) (undo-tree-id5796 . -1) (3110 . 3111) (#("n" 0 1 (fontified nil)) . 3110) (undo-tree-id5797 . -1) (3109 . 3110) (#("o" 0 1 (fontified nil)) . 3109) (3108 . 3109) (#("t" 0 1 (fontified nil)) . 3108) (3107 . 3108) (#("l" 0 1 (fontified nil)) . 3107) (3106 . 3107) (#("a" 0 1 (fontified nil)) . 3106) (3105 . 3106) (#("b" 0 1 (fontified nil)) . 3105) (3104 . 3105) (#(" " 0 1 (fontified nil)) . 3104) (undo-tree-id5798 . -1) (3103 . 3104) (#("=" 0 1 (fontified nil)) . 3103) (3102 . 3103) (#(" " 0 1 (fontified nil)) . 3102) (3101 . 3102) (#("D" 0 1 (fontified nil)) . 3101) (3100 . 3101) (#("I" 0 1 (fontified nil)) . 3100) (3099 . 3100) (#("_" 0 1 (fontified nil)) . 3099) (3098 . 3099) (#("R" 0 1 (fontified nil)) . 3098) (3097 . 3098) (#("E" 0 1 (fontified nil)) . 3097) (3096 . 3097) (#("Y" 0 1 (fontified nil)) . 3096) (3095 . 3096) (#("A" 0 1 (fontified nil)) . 3095) (3094 . 3095) (#("L" 0 1 (fontified nil)) . 3094) (3093 . 3094) (#("P" 0 1 (fontified nil)) . 3093) (3092 . 3093) (#(" " 0 1 (fontified nil)) . 3092) (3091 . 3092) (#("," 0 1 (fontified nil)) . 3091) (3090 . 3091) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 3090) (3089 . 3090) (#("R" 0 1 (fontified nil face font-lock-string-face)) . 3089) (undo-tree-id5799 . 1) (undo-tree-id5800 . -1) (3088 . 3089) (#("E" 0 1 (fontified nil face font-lock-string-face)) . 3088) (undo-tree-id5801 . 1) (3087 . 3088) (#("T" 0 1 (fontified nil face font-lock-string-face)) . 3087) (undo-tree-id5802 . 1) (3086 . 3087) (#("N" 0 1 (fontified nil face font-lock-string-face)) . 3086) (undo-tree-id5803 . 1) (3085 . 3086) (#("U" 0 1 (fontified nil face font-lock-string-face)) . 3085) (undo-tree-id5804 . 1) (3084 . 3085) (#("h" 0 1 (fontified nil face font-lock-string-face)) . 3084) (undo-tree-id5805 . 1) (3083 . 3084) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 3083) (3082 . 3083) (#(" " 0 1 (fontified nil)) . 3082) (3081 . 3082) (#("=" 0 1 (fontified nil)) . 3081) (3080 . 3081) (#(" " 0 1 (fontified nil)) . 3080) (3079 . 3080) (#("E" 0 1 (fontified nil)) . 3079) (3078 . 3079) (#("M" 0 1 (fontified nil)) . 3078) (3077 . 3078) (#("A" 0 1 (fontified nil)) . 3077) (3076 . 3077) (#("N" 0 1 (fontified nil)) . 3076) (undo-tree-id5806 . -1) (3075 . 3076) (#("_" 0 1 (fontified nil)) . 3075) (3074 . 3075) (#("S" 0 1 (fontified nil)) . 3074) (undo-tree-id5807 . -1) (3073 . 3074) (#("S" 0 1 (fontified nil)) . 3073) (3072 . 3073) (#("A" 0 1 (fontified nil)) . 3072) (3071 . 3072) (#("L" 0 1 (fontified nil)) . 3071) (3070 . 3071) (#("C" 0 1 (fontified nil)) . 3070) (3069 . 3070) (#(" " 0 1 (fontified nil)) . 3069) (3068 . 3069) (#("," 0 1 (fontified nil)) . 3068) (3067 . 3068) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 3067) (3066 . 3067) (#("S" 0 1 (fontified nil face font-lock-string-face)) . 3066) (undo-tree-id5808 . 1) (undo-tree-id5809 . -1) (3065 . 3066) (#("I" 0 1 (fontified nil face font-lock-string-face)) . 3065) (undo-tree-id5810 . 1) (3064 . 3065) (#("D" 0 1 (fontified nil face font-lock-string-face)) . 3064) (undo-tree-id5811 . 1) (3063 . 3064) (#("N" 0 1 (fontified nil face font-lock-string-face)) . 3063) (undo-tree-id5812 . 1) (3062 . 3063) (#("O" 0 1 (fontified nil face font-lock-string-face)) . 3062) (undo-tree-id5813 . 1) (3061 . 3062) (#("T" 0 1 (fontified nil face font-lock-string-face)) . 3061) (undo-tree-id5814 . 1) (3060 . 3061) (#("N" 0 1 (fontified nil face font-lock-string-face)) . 3060) (undo-tree-id5815 . 1) (3059 . 3060) (#("U" 0 1 (fontified nil face font-lock-string-face)) . 3059) (undo-tree-id5816 . 1) (3058 . 3059) (#("H" 0 1 (fontified nil face font-lock-string-face)) . 3058) (undo-tree-id5817 . 1) (3057 . 3058) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 3057) (3056 . 3057) (#(" " 0 1 (fontified nil)) . 3056) (3055 . 3056) (#("=" 0 1 (fontified nil)) . 3055) (3054 . 3055) (#(" " 0 1 (fontified nil)) . 3054) (3053 . 3054) (#("E" 0 1 (fontified nil)) . 3053) (3052 . 3053) (#("M" 0 1 (fontified nil)) . 3052) (3051 . 3052) (#("A" 0 1 (fontified nil)) . 3051) (3050 . 3051) (#("N" 0 1 (fontified nil)) . 3050) (3049 . 3050) (#("(" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . 3049) (3048 . 3049) (#("R" 0 1 (fontified nil)) . 3048) (undo-tree-id5818 . -1) (3047 . 3048) (#("E" 0 1 (fontified nil)) . 3047) (3046 . 3047) (#("T" 0 1 (fontified nil)) . 3046) (3045 . 3046) (#("C" 0 1 (fontified nil)) . 3045) (3044 . 3045) (#("A" 0 1 (fontified nil)) . 3044) (3043 . 3044) (#("R" 0 1 (fontified nil)) . 3043) (3042 . 3043) (#("A" 0 1 (fontified nil)) . 3042) (3041 . 3042) (#("H" 0 1 (fontified nil)) . 3041) (3040 . 3041) (#("c" 0 1 (fontified nil)) . 3040) (3039 . 3040) (#("(" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 3039) (undo-tree-id5819 . -1) (3038 . 3039) (#("D" 0 1 (fontified nil)) . 3038) (3037 . 3038) (#("N" 0 1 (fontified nil)) . 3037) (3036 . 3037) (#("E" 0 1 (fontified nil)) . 3036) (3035 . 3036) (#("P" 0 1 (fontified nil)) . 3035) (3034 . 3035) (#("P" 0 1 (fontified nil)) . 3034) (3033 . 3034) (#("A" 0 1 (fontified nil)) . 3033) (3032 . 3033) (#("." 0 1 (fontified nil)) . 3032) (3031 . 3032) (#("S" 0 1 (fontified nil)) . 3031) (undo-tree-id5820 . -1) (3030 . 3031) (#("N" 0 1 (fontified nil)) . 3030) (3029 . 3030) (#("O" 0 1 (fontified nil)) . 3029) (3028 . 3029) (#("O" 0 1 (fontified nil)) . 3028) (3027 . 3028) (#("T" 0 1 (fontified nil)) . 3027) (3026 . 3027) (#(" " 0 1 (fontified nil)) . 3026) (undo-tree-id5821 . -1) (3025 . 3026) (#(" " 0 1 (fontified nil)) . 3025) (3024 . 3025) (#(" " 0 1 (fontified nil)) . 3024) (3023 . 3024) (#(" " 0 1 (fontified nil)) . 3023) (3022 . 3023) (#("
" 0 1 (fontified nil)) . 3022) (3021 . 3022) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 3021) (3020 . 3021) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . 3020) (3019 . 3020) (#("D" 0 1 (fontified nil)) . 3019) (undo-tree-id5822 . -1) (3018 . 3019) (#("I" 0 1 (fontified nil)) . 3018) (3017 . 3018) (#("." 0 1 (fontified nil)) . 3017) (undo-tree-id5823 . -1) (3016 . 3017) (#("n" 0 1 (fontified nil)) . 3016) (undo-tree-id5824 . -1) (3015 . 3016) (#("o" 0 1 (fontified nil)) . 3015) (3014 . 3015) (#("t" 0 1 (fontified nil)) . 3014) (3013 . 3014) (#("l" 0 1 (fontified nil)) . 3013) (3012 . 3013) (#("a" 0 1 (fontified nil)) . 3012) (3011 . 3012) (#("b" 0 1 (fontified nil)) . 3011) (3010 . 3011) (#(" " 0 1 (fontified nil)) . 3010) (undo-tree-id5825 . -1) (3009 . 3010) (#("=" 0 1 (fontified nil)) . 3009) (3008 . 3009) (#(" " 0 1 (fontified nil)) . 3008) (3007 . 3008) (#("D" 0 1 (fontified nil)) . 3007) (3006 . 3007) (#("I" 0 1 (fontified nil)) . 3006) (3005 . 3006) (#("_" 0 1 (fontified nil)) . 3005) (3004 . 3005) (#("R" 0 1 (fontified nil)) . 3004) (3003 . 3004) (#("E" 0 1 (fontified nil)) . 3003) (3002 . 3003) (#("Y" 0 1 (fontified nil)) . 3002) (3001 . 3002) (#("A" 0 1 (fontified nil)) . 3001) (3000 . 3001) (#("L" 0 1 (fontified nil)) . 3000) (2999 . 3000) (#("P" 0 1 (fontified nil)) . 2999) (2998 . 2999) (#(" " 0 1 (fontified nil)) . 2998) (2997 . 2998) (#("," 0 1 (fontified nil)) . 2997) (2996 . 2997) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 2996) (2995 . 2996) (#("E" 0 1 (fontified nil face font-lock-string-face)) . 2995) (2994 . 2995) (#("G" 0 1 (fontified nil face font-lock-string-face)) . 2994) (2993 . 2994) (#("A" 0 1 (fontified nil face font-lock-string-face)) . 2993) (2992 . 2993) (#("M" 0 1 (fontified nil face font-lock-string-face)) . 2992) (2991 . 2992) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 2991) (2990 . 2991) (#(" " 0 1 (fontified nil)) . 2990) (2989 . 2990) (#("=" 0 1 (fontified nil)) . 2989) (2988 . 2989) (#(" " 0 1 (fontified nil)) . 2988) (2987 . 2988) (#("E" 0 1 (fontified nil)) . 2987) (2986 . 2987) (#("M" 0 1 (fontified nil)) . 2986) (2985 . 2986) (#("A" 0 1 (fontified nil)) . 2985) (2984 . 2985) (#("N" 0 1 (fontified nil)) . 2984) (2983 . 2984) (#("_" 0 1 (fontified nil)) . 2983) (2982 . 2983) (#("S" 0 1 (fontified nil)) . 2982) (2981 . 2982) (#("S" 0 1 (fontified nil)) . 2981) (undo-tree-id5826 . -1) (2980 . 2981) (#("A" 0 1 (fontified nil)) . 2980) (undo-tree-id5827 . -1) (2979 . 2980) (#("L" 0 1 (fontified nil)) . 2979) (2978 . 2979) (#("C" 0 1 (fontified nil)) . 2978) (2977 . 2978) (#(" " 0 1 (fontified nil)) . 2977) (2976 . 2977) (#("," 0 1 (fontified nil)) . 2976) (2975 . 2976) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 2975) (2974 . 2975) (#("N" 0 1 (fontified nil face font-lock-string-face)) . 2974) (undo-tree-id5828 . 1) (undo-tree-id5829 . -1) (2973 . 2974) (#("O" 0 1 (fontified nil face font-lock-string-face)) . 2973) (undo-tree-id5830 . 1) (2972 . 2973) (#("T" 0 1 (fontified nil face font-lock-string-face)) . 2972) (undo-tree-id5831 . 1) (2971 . 2972) (#("U" 0 1 (fontified nil face font-lock-string-face)) . 2971) (undo-tree-id5832 . 1) (2970 . 2971) (#("O" 0 1 (fontified nil face font-lock-string-face)) . 2970) (undo-tree-id5833 . 1) (2969 . 2970) (#("B" 0 1 (fontified nil face font-lock-string-face)) . 2969) (undo-tree-id5834 . 1) (2968 . 2969) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 2968) (2967 . 2968) (#(" " 0 1 (fontified nil)) . 2967) (2966 . 2967) (#("=" 0 1 (fontified nil)) . 2966) (2965 . 2966) (#(" " 0 1 (fontified nil)) . 2965) (2964 . 2965) (#("E" 0 1 (fontified nil)) . 2964) (2963 . 2964) (#("M" 0 1 (fontified nil)) . 2963) (2962 . 2963) (#("A" 0 1 (fontified nil)) . 2962) (2961 . 2962) (#("N" 0 1 (fontified nil)) . 2961) (2960 . 2961) (#("(" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . 2960) (2959 . 2960) (#("R" 0 1 (fontified nil)) . 2959) (undo-tree-id5835 . -1) (2958 . 2959) (#("E" 0 1 (fontified nil)) . 2958) (2957 . 2958) (#("T" 0 1 (fontified nil)) . 2957) (2956 . 2957) (#("C" 0 1 (fontified nil)) . 2956) (2955 . 2956) (#("A" 0 1 (fontified nil)) . 2955) (2954 . 2955) (#("R" 0 1 (fontified nil)) . 2954) (2953 . 2954) (#("A" 0 1 (fontified nil)) . 2953) (2952 . 2953) (#("H" 0 1 (fontified nil)) . 2952) (2951 . 2952) (#("c" 0 1 (fontified nil)) . 2951) (2950 . 2951) (#(" " 0 1 (fontified nil)) . 2950) (undo-tree-id5836 . -1) (2949 . 2950) (#("(" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 2949) (2948 . 2949) (#("D" 0 1 (fontified nil)) . 2948) (2947 . 2948) (#("N" 0 1 (fontified nil)) . 2947) (2946 . 2947) (#("E" 0 1 (fontified nil)) . 2946) (2945 . 2946) (#("P" 0 1 (fontified nil)) . 2945) (2944 . 2945) (#("P" 0 1 (fontified nil)) . 2944) (2943 . 2944) (#("A" 0 1 (fontified nil)) . 2943) (2942 . 2943) (#("." 0 1 (fontified nil)) . 2942) (2941 . 2942) (#("S" 0 1 (fontified nil)) . 2941) (undo-tree-id5837 . -1) (2940 . 2941) (#("N" 0 1 (fontified nil)) . 2940) (2939 . 2940) (#("O" 0 1 (fontified nil)) . 2939) (2938 . 2939) (#("O" 0 1 (fontified nil)) . 2938) (2937 . 2938) (#("T" 0 1 (fontified nil)) . 2937) (2936 . 2937) (#(" " 0 1 (fontified nil)) . 2936) (undo-tree-id5838 . -1) (2935 . 2936) (#(" " 0 1 (fontified nil)) . 2935) (2934 . 2935) (#(" " 0 1 (fontified nil)) . 2934) (2933 . 2934) (#(" " 0 1 (fontified nil)) . 2933) (2932 . 2933) (#("
" 0 1 (fontified nil)) . 2932) (2931 . 2932) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 2931) (2930 . 2931) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . 2930) (undo-tree-id5839 . -1) (2929 . 2930) (#("D" 0 1 (fontified nil)) . 2929) (undo-tree-id5840 . -1) (2928 . 2929) (#("I" 0 1 (fontified nil)) . 2928) (2927 . 2928) (#("." 0 1 (fontified nil)) . 2927) (undo-tree-id5841 . -1) (2926 . 2927) (#("n" 0 1 (fontified nil)) . 2926) (undo-tree-id5842 . -1) (2925 . 2926) (#("o" 0 1 (fontified nil)) . 2925) (2924 . 2925) (#("t" 0 1 (fontified nil)) . 2924) (2923 . 2924) (#("l" 0 1 (fontified nil)) . 2923) (2922 . 2923) (#("a" 0 1 (fontified nil)) . 2922) (2921 . 2922) (#("b" 0 1 (fontified nil)) . 2921) (2920 . 2921) (#(" " 0 1 (fontified nil)) . 2920) (undo-tree-id5843 . -1) (2919 . 2920) (#("=" 0 1 (fontified nil)) . 2919) (2918 . 2919) (#(" " 0 1 (fontified nil)) . 2918) (2917 . 2918) (#("D" 0 1 (fontified nil)) . 2917) (undo-tree-id5844 . -1) (2916 . 2917) (#("I" 0 1 (fontified nil)) . 2916) (2915 . 2916) (#("_" 0 1 (fontified nil)) . 2915) (2914 . 2915) (#("R" 0 1 (fontified nil)) . 2914) (2913 . 2914) (#("E" 0 1 (fontified nil)) . 2913) (2912 . 2913) (#("Y" 0 1 (fontified nil)) . 2912) (2911 . 2912) (#("A" 0 1 (fontified nil)) . 2911) (2910 . 2911) (#("L" 0 1 (fontified nil)) . 2910) (2909 . 2910) (#("P" 0 1 (fontified nil)) . 2909) (2908 . 2909) (#(" " 0 1 (fontified nil)) . 2908) (undo-tree-id5845 . -1) (2907 . 2908) (#("," 0 1 (fontified nil)) . 2907) (2906 . 2907) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 2906) (2905 . 2906) (#("N" 0 1 (fontified nil face font-lock-string-face)) . 2905) (2904 . 2905) (#("I" 0 1 (fontified nil face font-lock-string-face)) . 2904) (2903 . 2904) (#("D" 0 1 (fontified nil face font-lock-string-face)) . 2903) (2902 . 2903) (#("A" 0 1 (fontified nil face font-lock-string-face)) . 2902) (2901 . 2902) (#("L" 0 1 (fontified nil face font-lock-string-face)) . 2901) (2900 . 2901) (#("A" 0 1 (fontified nil face font-lock-string-face)) . 2900) (2899 . 2900) (#("P" 0 1 (fontified nil face font-lock-string-face)) . 2899) (2898 . 2899) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 2898) (2897 . 2898) (#(" " 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 2897) (undo-tree-id5846 . -1) (undo-tree-id5847 . -1) (undo-tree-id5848 . -1) (undo-tree-id5849 . -1) (undo-tree-id5850 . -1) (undo-tree-id5851 . -1) (undo-tree-id5852 . -1) (undo-tree-id5853 . -1) (undo-tree-id5854 . -1) (2896 . 2897) (#("=" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 2896) (2895 . 2896) (#(" " 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 2895) (2894 . 2895) (#("e" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 2894) (2893 . 2894) (#("m" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 2893) (2892 . 2893) (#("a" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 2892) (2891 . 2892) (#("n" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 2891) (2890 . 2891) (#("_" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified nil)) . 2890) (2889 . 2890) (#("s" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t)) . 2889) 3471) nil (25919 61929 467960 521000) 0 nil])
([nil nil ((3084 . 3085) (#("H" 0 1 (fontified t face font-lock-string-face)) . 3084) (undo-tree-id5675 . -1) (undo-tree-id5676 . -1)) nil (25919 61929 448942 30000) 0 nil])
([nil nil ((3174 . 3175) (#("S" 0 1 (fontified t face font-lock-string-face)) . 3174) (undo-tree-id5673 . -1) (undo-tree-id5674 . -1)) nil (25919 61929 448940 686000) 0 nil])
([nil nil ((3267 . 3268) (#("D" 0 1 (fontified t face font-lock-string-face)) . 3267) (undo-tree-id5670 . -1) (undo-tree-id5671 . -1) (undo-tree-id5672 . -1)) nil (25919 61929 448939 144000) 0 nil])
([nil nil ((3273 . 3274) (#("K" 0 1 (fontified t face font-lock-string-face)) . 3273) (undo-tree-id5668 . -1) (undo-tree-id5669 . -1)) nil (25919 61929 448937 417000) 0 nil])
([nil nil ((3368 . 3369) (#("R" 0 1 (fontified t face font-lock-string-face)) . 3368) (undo-tree-id5666 . -1) (undo-tree-id5667 . -1)) nil (25919 61929 448935 733000) 0 nil])
([nil nil ((3461 . 3462) (#("P" 0 1 (fontified t face font-lock-string-face)) . 3461) (undo-tree-id5664 . -1) (undo-tree-id5665 . -1)) nil (25919 61929 448934 266000) 0 nil])
([nil nil ((3643 . 3644) (#("B" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-string-face)) . 3643) (undo-tree-id5661 . 1) (undo-tree-id5662 . -1) (undo-tree-id5663 . -1)) nil (25919 61929 448932 897000) 0 nil])
([nil nil ((3932 . 3933) (#("O" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-string-face)) . 3932) (undo-tree-id5658 . 1) (undo-tree-id5659 . -1) (undo-tree-id5660 . -1)) nil (25919 61929 448931 151000) 0 nil])
([nil nil ((3698 . 3699) (#("P" 0 1 (match-data (0 2 0 1 1 2) fontified t face font-lock-string-face)) . 3698) (undo-tree-id5656 . -1) (undo-tree-id5657 . -1)) nil (25919 61929 448929 374000) 0 nil])
([nil nil ((3807 . 3808) (#("F" 0 1 (match-data (0 2 0 1 1 2) fontified t face font-lock-string-face)) . 3807) (undo-tree-id5654 . -1) (undo-tree-id5655 . -1)) nil (25919 61929 448927 869000) 0 nil])
([nil nil ((4222 . 4223) (#("B" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-string-face)) . 4222) (undo-tree-id5651 . 1) (undo-tree-id5652 . -1) (undo-tree-id5653 . -1)) nil (25919 61929 448926 421000) 0 nil])
([nil nil ((4277 . 4278) (#("F" 0 1 (match-data (0 2 0 1 1 2) fontified t face font-lock-string-face)) . 4277) (undo-tree-id5649 . -1) (undo-tree-id5650 . -1)) nil (25919 61929 448924 683000) 0 nil])
([nil nil ((4407 . 4408) (#("H" 0 1 (match-data (0 3 0 1 1 2 2 3) face font-lock-string-face fontified t)) . 4407) (undo-tree-id5646 . 1) (undo-tree-id5647 . -1) (undo-tree-id5648 . -1)) nil (25919 61929 448923 192000) 0 nil])
([nil nil ((4465 . 4466) (#("S" 0 1 (match-data (0 2 0 1 1 2) fontified t face font-lock-string-face)) . 4465) (undo-tree-id5631 . -1) (undo-tree-id5632 . -1) (undo-tree-id5633 . -1) (undo-tree-id5634 . -1) (undo-tree-id5635 . -1) (undo-tree-id5636 . -1) (undo-tree-id5637 . -1) (undo-tree-id5638 . -1) (undo-tree-id5639 . -1) (undo-tree-id5640 . -1) (undo-tree-id5641 . -1) (undo-tree-id5642 . -1) (undo-tree-id5643 . -1) (undo-tree-id5644 . -1) (undo-tree-id5645 . -1)) nil (25919 61929 448921 254000) 0 nil])
([nil nil ((4594 . 4595) (#("Q" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-string-face)) . 4594) (undo-tree-id5628 . 1) (undo-tree-id5629 . -1) (undo-tree-id5630 . -1)) nil (25919 61929 448914 539000) 0 nil])
([nil nil ((4648 . 4649) (#("R" 0 1 (match-data (0 2 0 1 1 2) fontified t face font-lock-string-face)) . 4648) (undo-tree-id5626 . -1) (undo-tree-id5627 . -1)) nil (25919 61929 448912 491000) 0 nil])
([nil nil ((4757 . 4758) (#("E" 0 1 (match-data (0 2 0 1 1 2) fontified t face font-lock-string-face)) . 4757) (undo-tree-id5624 . -1) (undo-tree-id5625 . -1)) nil (25919 61929 448911 141000) 0 nil])
([nil nil ((4890 . 4891) (#("M" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-string-face)) . 4890) (undo-tree-id5621 . 1) (undo-tree-id5622 . -1) (undo-tree-id5623 . -1)) nil (25919 61929 448909 546000) 0 nil])
([nil nil ((4947 . 4948) (#("B" 0 1 (match-data (0 2 0 1 1 2) face font-lock-string-face fontified t)) . 4947) (undo-tree-id5619 . -1) (undo-tree-id5620 . -1)) nil (25919 61929 448907 394000) 0 nil])
([nil nil ((5437 . 5438) (#("D" 0 1 (match-data (0 2 0 1 1 2) face font-lock-string-face fontified t)) . 5437) (undo-tree-id5617 . -1) (undo-tree-id5618 . -1)) nil (25919 61929 448905 447000) 0 nil])
([nil nil ((5545 . 5546) (#("S" 0 1 (match-data (0 2 0 1 1 2) fontified t face font-lock-string-face)) . 5545) (undo-tree-id5605 . -1) (undo-tree-id5606 . -1) (undo-tree-id5607 . -1) (undo-tree-id5608 . -1) (undo-tree-id5609 . -1) (undo-tree-id5610 . -1) (undo-tree-id5611 . -1) (undo-tree-id5612 . -1) (undo-tree-id5613 . -1) (undo-tree-id5614 . -1) (undo-tree-id5615 . -1) (undo-tree-id5616 . -1)) nil (25919 61929 448903 600000) 0 nil])
([nil nil ((5380 . 5381) (#("R" 0 1 (match-data (0 3 0 1 1 2 2 3) face font-lock-string-face fontified t)) . 5380) (undo-tree-id5602 . 1) (undo-tree-id5603 . -1) (undo-tree-id5604 . -1)) nil (25919 61929 448897 360000) 0 nil])
([nil nil ((5182 . 5183) (#("D" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-string-face)) . 5182) (undo-tree-id5599 . 1) (undo-tree-id5600 . -1) (undo-tree-id5601 . -1)) nil (25919 61929 448894 880000) 0 nil])
([nil nil ((5241 . 5242) (#("A" 0 1 (match-data (0 2 0 1 1 2) fontified t face font-lock-string-face)) . 5241) (undo-tree-id5587 . -1) (undo-tree-id5588 . -1) (undo-tree-id5589 . -1) (undo-tree-id5590 . -1) (undo-tree-id5591 . -1) (undo-tree-id5592 . -1) (undo-tree-id5593 . -1) (undo-tree-id5594 . -1) (undo-tree-id5595 . -1) (undo-tree-id5596 . -1) (undo-tree-id5597 . -1) (undo-tree-id5598 . -1)) nil (25919 61929 448890 317000) 0 nil])
([nil nil ((2894 . 2895) (#("E" 0 1 (fontified nil)) . 2894) (undo-tree-id5940 . -1) (undo-tree-id5941 . -1) (undo-tree-id5942 . -1) (undo-tree-id5943 . -1) (undo-tree-id5944 . -1) (2893 . 2894) (#("M" 0 1 (fontified nil)) . 2893) (undo-tree-id5945 . -1) (undo-tree-id5946 . -1) (undo-tree-id5947 . -1) (undo-tree-id5948 . -1) (undo-tree-id5949 . -1) (undo-tree-id5950 . -1) (undo-tree-id5951 . -1) (undo-tree-id5952 . -1) (undo-tree-id5953 . -1) (undo-tree-id5954 . -1) (undo-tree-id5955 . -1) (undo-tree-id5956 . -1) (undo-tree-id5957 . -1) (undo-tree-id5958 . -1) (undo-tree-id5959 . -1) (undo-tree-id5960 . -1) (undo-tree-id5961 . -1) (undo-tree-id5962 . -1) (undo-tree-id5963 . -1) (undo-tree-id5964 . -1) (undo-tree-id5965 . -1) (2892 . 2893) (#("A" 0 1 (fontified nil)) . 2892) (undo-tree-id5966 . -1) (2891 . 2892) (#("N" 0 1 (fontified nil)) . 2891) (undo-tree-id5967 . -1) (2890 . 2891) (#("_" 0 1 (fontified nil)) . 2890) (undo-tree-id5968 . -1) (2889 . 2890) (#("S" 0 1 (fontified t)) . 2889) (undo-tree-id5969 . -1) 2894 (t 25919 61929 467159 695000)) nil (25919 61952 868350 463000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 2950) (undo-tree-id5938 . -1) (undo-tree-id5939 . -1)) nil (25919 61952 868334 176000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 3416) (undo-tree-id5935 . -1) (undo-tree-id5936 . -1) (undo-tree-id5937 . -1)) nil (25919 61952 868330 56000) 0 nil])
([nil nil ((2458 . 2459) (#("B" 0 1 (match-data (0 1 0 1) fontified t face font-lock-string-face)) . 2458) (undo-tree-id5998 . 1) (undo-tree-id5999 . -1) (undo-tree-id6000 . -1) (t 25919 61952 867156 133000)) nil (25919 61975 416270 14000) 0 nil])
([nil nil ((2375 . 2376) (#("B" 0 1 (fontified t face font-lock-string-face)) . 2375) (undo-tree-id5987 . -1) (undo-tree-id5988 . -1) (undo-tree-id5989 . 1) (undo-tree-id5990 . -1) (undo-tree-id5991 . -1) (undo-tree-id5992 . -1) (undo-tree-id5993 . -1) (undo-tree-id5994 . -1) (undo-tree-id5995 . -1) (undo-tree-id5996 . -1) (undo-tree-id5997 . -1)) nil (25919 61975 416266 910000) 0 nil])
([nil nil ((2515 . 2516) (#("T" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-string-face)) . 2515) (undo-tree-id5976 . -1) (undo-tree-id5977 . -1) (undo-tree-id5978 . -1) (undo-tree-id5979 . -1) (undo-tree-id5980 . -1) (undo-tree-id5981 . -1) (undo-tree-id5982 . -1) (undo-tree-id5983 . -1) (undo-tree-id5984 . -1) (undo-tree-id5985 . -1) (undo-tree-id5986 . -1)) nil (25919 61975 416260 983000) 0 nil])
([nil nil ((2570 . 2571) (#("H" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-string-face)) . 2570) (undo-tree-id5974 . -1) (undo-tree-id5975 . -1)) nil (25919 61975 416254 541000) 0 nil])
([nil nil ((2627 . 2628) (#("M" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-string-face)) . 2627) (undo-tree-id5972 . -1) (undo-tree-id5973 . -1)) nil (25919 61975 416252 573000) 0 nil])
([nil nil ((2685 . 2686) (#("R" 0 1 (match-data (0 3 0 1 1 2 2 3) fontified t face font-lock-string-face)) . 2685) (undo-tree-id5970 . -1) (undo-tree-id5971 . -1)) nil (25919 61975 416248 326000) 0 nil])
([nil nil ((3485 . 3486) (#("n" 0 1 (fontified nil)) . 3485) (undo-tree-id6041 . -1) (undo-tree-id6042 . -1) (undo-tree-id6043 . -1) (undo-tree-id6044 . -1) (3484 . 3485) (#("o" 0 1 (fontified nil)) . 3484) (undo-tree-id6045 . -1) (undo-tree-id6046 . -1) (undo-tree-id6047 . -1) (undo-tree-id6048 . -1) (undo-tree-id6049 . -1) (undo-tree-id6050 . -1) (undo-tree-id6051 . -1) (undo-tree-id6052 . -1) (undo-tree-id6053 . -1) (undo-tree-id6054 . -1) (undo-tree-id6055 . -1) (undo-tree-id6056 . -1) (3483 . 3484) (#("t" 0 1 (fontified nil)) . 3483) (3482 . 3483) (#("l" 0 1 (fontified nil)) . 3482) (3481 . 3482) (#("a" 0 1 (fontified nil)) . 3481) (3480 . 3481) (#("b" 0 1 (fontified t)) . 3480) (undo-tree-id6057 . -1) (undo-tree-id6058 . -1) (undo-tree-id6059 . -1) (undo-tree-id6060 . -1) 3485 (t 25919 61975 417151 208000)) nil (25919 61994 498488 747000) 0 nil])
([nil nil ((3476 . 3477) (#("D" 0 1 (fontified nil)) . 3476) (undo-tree-id6021 . -1) (undo-tree-id6022 . -1) (undo-tree-id6023 . -1) (undo-tree-id6024 . -1) (3475 . 3476) (#("I" 0 1 (fontified nil)) . 3475) (undo-tree-id6025 . -1) (undo-tree-id6026 . -1) (undo-tree-id6027 . -1) (undo-tree-id6028 . -1) (undo-tree-id6029 . -1) (undo-tree-id6030 . -1) (undo-tree-id6031 . -1) (undo-tree-id6032 . -1) (3474 . 3475) (#("_" 0 1 (fontified nil)) . 3474) (undo-tree-id6033 . -1) (undo-tree-id6034 . -1) (undo-tree-id6035 . -1) (3473 . 3474) (#("R" 0 1 (fontified nil)) . 3473) (undo-tree-id6036 . -1) (3472 . 3473) (#("E" 0 1 (fontified nil)) . 3472) (undo-tree-id6037 . -1) (3471 . 3472) (#("Y" 0 1 (fontified nil)) . 3471) (undo-tree-id6038 . -1) (3470 . 3471) (#("A" 0 1 (fontified nil)) . 3470) (undo-tree-id6039 . -1) (3469 . 3470) (#("l" 0 1 (fontified t)) . 3469) (undo-tree-id6040 . -1) 3476) nil (25919 61994 498477 100000) 0 nil])
([nil nil ((3488 . 3489) (#("D" 0 1 (fontified nil)) . 3488) (undo-tree-id6001 . -1) (undo-tree-id6002 . -1) (undo-tree-id6003 . -1) (undo-tree-id6004 . -1) (3487 . 3488) (#("I" 0 1 (fontified t)) . 3487) (undo-tree-id6005 . -1) (undo-tree-id6006 . -1) (undo-tree-id6007 . -1) (undo-tree-id6008 . -1) (undo-tree-id6009 . -1) (undo-tree-id6010 . -1) (undo-tree-id6011 . -1) (undo-tree-id6012 . -1) (undo-tree-id6013 . -1) (undo-tree-id6014 . -1) (undo-tree-id6015 . -1) (undo-tree-id6016 . -1) (undo-tree-id6017 . -1) (undo-tree-id6018 . -1) (undo-tree-id6019 . -1) (undo-tree-id6020 . -1) 3488) nil (25919 61994 498463 514000) 0 nil])
([nil nil ((3469 . 3470) (#("L" 0 1 (fontified t)) . 3469) (undo-tree-id6061 . -1) (undo-tree-id6062 . -1) (undo-tree-id6063 . -1) (undo-tree-id6064 . -1) (undo-tree-id6065 . -1) (undo-tree-id6066 . -1) (undo-tree-id6067 . -1) (undo-tree-id6068 . -1) (undo-tree-id6069 . -1) (undo-tree-id6070 . -1) (undo-tree-id6071 . -1) (t 25919 61994 497147 515000)) nil (25919 62002 979952 405000) 0 nil])
([nil current ((5047 . 5048) (#("U" 0 1 (match-data (0 2 0 1 1 2) fontified t face font-lock-string-face)) . 5047) (undo-tree-id6072 . -1) (undo-tree-id6073 . -1) (t 25919 62002 977146 178000)) nil (25919 62021 987417 535000) 0 nil])
nil
